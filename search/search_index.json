{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"TNaLaGmes TNaLaGmes is a Toolbox for Natural Language Games I asked myself, what if random python objects could talk to you using only natural language? TNaLaGmes is a library that provides tools and default models for a variety of constructs, it was made thinking about games, but it really is about text enabling random code constructs! Read the Wiki early alpha version on pip install pip install TNaLaGmes Usage to play the original oregon trail from tnalagmes.games import OregonTrail game = OregonTrail() game.run() or maybe you prefer a zombie survival game from tnalagmes.games.zombie import ZVirus game = ZVirus() game.run() Chatbot agents are provided via all_the_chatbots , you need internet for this from tnalagmes.models.agents import Mitsuku # notable chat agents can be imported directly from tnalagmes.models.agents import ChatAgent # you can create your own and override on_turn hitler = ChatAgent.create_agent(\"hitler\") # get an agent from all_the_chatbots Mitsuku.run() # output bellow > My name is Mitsuku. hello > Hi there. How are you? tell me a joke > My mates been drinking brake fluid for 6 years but he says he's not addicted. He reckons he can stop anytime he wants. > Thanks for the information. do you believe in god? > <image>http://www.square-bear.co.uk/mitsuku/gallery/god.jpg</image> > I believe there is probably something out there but I doubt it is a man with a long beard sat on a throne. to do something useful as part of a project look how i made a Calendar class Calendar(TNaLaGmesConstruct): \"\"\" Calendar Object \"What day/date/week/weekday/month/year is it?\" \"next turn\" \"how many turns left\" \"how many turns passed\" \"how many days per turn\" \"maximum number of turns\" \"increase speed\" \"decrease speed\" \"rollback X days/months/weeks/years\" \"advance X days/months/weeks/years\" \"\"\" # standard python functionality, implementing date and turn tracking for our calendar def __init__(self, total_turns=20, start_date=None, turn_delta=0): TNaLaGmesConstruct.__init__(self, \"calendar\") # pass a string with object_type if desired self._date = start_date or datetime.now() self.days_per_turn = turn_delta self._turn_delta = timedelta(days=self.days_per_turn) if self.days_per_turn else None self._turn_count = 1 self._max_turns = total_turns def change_speed(self, days_per_turn=0): if isinstance(days_per_turn, str): if days_per_turn.strip().lower().startswith(\"easy\"): days_per_turn = 1 elif days_per_turn.strip().lower().startswith(\"hard\"): days_per_turn = 14 days_per_turn = self.extract_number(days_per_turn) self._turn_delta = timedelta(days_per_turn) def advance_date(self): if self._turn_delta is None: self._date = datetime.now() return self._date += self._turn_delta self._turn_count += 1 def rollback_date(self, rollback_days=None): rollback_days = rollback_days or self.days_per_turn self._date -= timedelta(days=rollback_days) @property def weekday(self): day = self._date.weekday() if day == 0: return \"Monday\" elif day == 1: return \"Tuesday\" elif day == 2: return \"Wednesday\" elif day == 3: return \"Thursday\" elif day == 4: return \"Friday\" elif day == 5: return \"Saturday\" elif day == 6: return \"Sunday\" return \"What kind of calendar is this? \" @property def pretty_date(self): return self.weekday + \" \" + self._date.strftime('%d, %b %Y') @property def is_final_turn(self): if not self._turn_delta: return False if self._turn_count >= self._max_turns: return True else: return False @property def turns(self): return self._turn_count @property def date(self): return self._date @property def max_turns(self): return self._max_turns @property def week_of_month(self): # https://en.wikipedia.org/wiki/ISO_week_date#Weeks_per_month first_day = self.date.replace(day=1) day_of_month = self.date.day # adjust for sundays if (first_day.weekday() == 6): adjusted_dom = (1 + first_day.weekday()) / 7 else: adjusted_dom = day_of_month + first_day.weekday() # days may belong to a month but their week may belong to another one # weeks belong to a month if its thursday falls on it if (first_day.weekday() > 3): return int(ceil(adjusted_dom / 7.0)) - 1 else: return int(ceil(adjusted_dom / 7.0)) # in here register the word triggers # im only using keyword rules instead of sample phrases # literal strings are used as keywords # if available on locale folder vocabulary is expanded def register_core_intents(self): self.register_keyword_intent(\"advance\", required=[\"date\", \"advance\"], optionals=[], handler=self.handle_advance) self.register_keyword_intent(\"rollback\", required=[\"rollback\", \"date\"], optionals=[], handler=self.handle_rollback) self.register_keyword_intent(\"speed_decrease\", required=[\"decrease\", \"speed\"], optionals=[], handler=self.handle_speed_decrease) self.register_keyword_intent(\"speed_increase\", required=[\"increase\", \"speed\"], optionals=[], handler=self.handle_speed_increase) self.register_keyword_intent(\"days_per_turn\", required=[\"turns\", \"day\"], optionals=[\"question\"], handler=self.handle_days_per_turn) self.register_keyword_intent(\"turns_max\", required=[\"turns\", \"total\"], optionals=[\"question\"], handler=self.handle_turns_max) self.register_keyword_intent(\"turns_past\", required=[\"turns\", \"past\"], optionals=[\"question\"], handler=self.handle_turns_past) self.register_keyword_intent(\"turns_current\", required=[\"turns\", \"current\"], optionals=[\"question\"], handler=self.handle_turns_current) self.register_keyword_intent(\"turns_left\", required=[\"turns\", \"remaining\"], optionals=[\"question\"], handler=self.handle_turns_left) self.register_keyword_intent(\"next_turn\", required=[\"next\", \"turn\"], optionals=[], handler=self.handle_next_turn) self.register_keyword_intent(\"ask_day\", required=[\"day\"], optionals=[\"question\"], handler=self.handle_day) self.register_keyword_intent(\"ask_week\", required=[\"week\"], optionals=[\"question\"], handler=self.handle_week) self.register_keyword_intent(\"ask_weekday\", required=[\"weekday\"], optionals=[\"question\"], handler=self.handle_weekday) self.register_keyword_intent(\"ask_month\", required=[\"month\"], optionals=[\"question\"], handler=self.handle_month) self.register_keyword_intent(\"ask_year\", required=[\"year\"], optionals=[\"question\"], handler=self.handle_year) self.register_keyword_intent(\"ask_date\", required=[\"date\"], optionals=[\"question\"], handler=self.handle_date) # handlers for each natural language questions def handle_date(self, intent): return self.pretty_date def handle_week(self, intent): # TODO util to pronounce cardinals return \"it is the \" + str(self.week_of_month) + \" week of the month\" def handle_weekday(self, intent): return self.weekday def handle_month(self, intent): return str(self.date.month) def handle_day(self, intent): return str(self.date.day) def handle_year(self, intent): return \"it is the year \" + str(self.date.year) def handle_days_per_turn(self, intent): return str(self._turn_delta) + \" days per turn\" def handle_turns_left(self, intent): return \"you have \" + str(self.max_turns - self.turns) + \" left\" def handle_turns_max(self, intent): return \"maximum number of turns is \" + str(self.max_turns) def handle_turns_current(self, intent): return \"currently in turn\" + str(self.turns) def handle_turns_past(self, intent): return str(self.turns - 1) + \" passed\" def handle_next_turn(self, intent): self.advance_date() return \"now in turn\" + str(self.turns) def handle_advance(self, intent): self.advance_date() return \"advanced date by \" + str(self._turn_delta) + \" days\" def handle_rollback(self, intent): number = self.extract_number(intent[\"utterance\"]) self.rollback_date(number) return \"rolled back date by \" + str(number) + \" days\" def handle_speed_decrease(self, intent): number = self.extract_number(intent[\"utterance\"]) number = number or 1 self.change_speed(self._turn_delta - number) return \"decreased speed by \" + str(number) + \" days\" def handle_speed_increase(self, intent): number = self.extract_number(intent[\"utterance\"]) number = number or 1 self.change_speed(self._turn_delta - number) return \"increased speed by \" + str(number) + \" days\" you can interact with it now if __name__ == \"__main__\": construct = Calendar() print(construct.parse_command(\"current date\")) print(construct.parse_command(\"what day\")) print(construct.parse_command(\"what month\")) print(construct.parse_command(\"what weekday\")) print(construct.parse_command(\"total turns\")) # Saturday 13, Oct 2018 # 13 # 10 # Saturday # maximum number of turns is 20","title":"Home"},{"location":"#tnalagmes","text":"TNaLaGmes is a Toolbox for Natural Language Games I asked myself, what if random python objects could talk to you using only natural language? TNaLaGmes is a library that provides tools and default models for a variety of constructs, it was made thinking about games, but it really is about text enabling random code constructs! Read the Wiki early alpha version on pip","title":"TNaLaGmes"},{"location":"#install","text":"pip install TNaLaGmes","title":"install"},{"location":"#usage","text":"to play the original oregon trail from tnalagmes.games import OregonTrail game = OregonTrail() game.run() or maybe you prefer a zombie survival game from tnalagmes.games.zombie import ZVirus game = ZVirus() game.run() Chatbot agents are provided via all_the_chatbots , you need internet for this from tnalagmes.models.agents import Mitsuku # notable chat agents can be imported directly from tnalagmes.models.agents import ChatAgent # you can create your own and override on_turn hitler = ChatAgent.create_agent(\"hitler\") # get an agent from all_the_chatbots Mitsuku.run() # output bellow > My name is Mitsuku. hello > Hi there. How are you? tell me a joke > My mates been drinking brake fluid for 6 years but he says he's not addicted. He reckons he can stop anytime he wants. > Thanks for the information. do you believe in god? > <image>http://www.square-bear.co.uk/mitsuku/gallery/god.jpg</image> > I believe there is probably something out there but I doubt it is a man with a long beard sat on a throne. to do something useful as part of a project look how i made a Calendar class Calendar(TNaLaGmesConstruct): \"\"\" Calendar Object \"What day/date/week/weekday/month/year is it?\" \"next turn\" \"how many turns left\" \"how many turns passed\" \"how many days per turn\" \"maximum number of turns\" \"increase speed\" \"decrease speed\" \"rollback X days/months/weeks/years\" \"advance X days/months/weeks/years\" \"\"\" # standard python functionality, implementing date and turn tracking for our calendar def __init__(self, total_turns=20, start_date=None, turn_delta=0): TNaLaGmesConstruct.__init__(self, \"calendar\") # pass a string with object_type if desired self._date = start_date or datetime.now() self.days_per_turn = turn_delta self._turn_delta = timedelta(days=self.days_per_turn) if self.days_per_turn else None self._turn_count = 1 self._max_turns = total_turns def change_speed(self, days_per_turn=0): if isinstance(days_per_turn, str): if days_per_turn.strip().lower().startswith(\"easy\"): days_per_turn = 1 elif days_per_turn.strip().lower().startswith(\"hard\"): days_per_turn = 14 days_per_turn = self.extract_number(days_per_turn) self._turn_delta = timedelta(days_per_turn) def advance_date(self): if self._turn_delta is None: self._date = datetime.now() return self._date += self._turn_delta self._turn_count += 1 def rollback_date(self, rollback_days=None): rollback_days = rollback_days or self.days_per_turn self._date -= timedelta(days=rollback_days) @property def weekday(self): day = self._date.weekday() if day == 0: return \"Monday\" elif day == 1: return \"Tuesday\" elif day == 2: return \"Wednesday\" elif day == 3: return \"Thursday\" elif day == 4: return \"Friday\" elif day == 5: return \"Saturday\" elif day == 6: return \"Sunday\" return \"What kind of calendar is this? \" @property def pretty_date(self): return self.weekday + \" \" + self._date.strftime('%d, %b %Y') @property def is_final_turn(self): if not self._turn_delta: return False if self._turn_count >= self._max_turns: return True else: return False @property def turns(self): return self._turn_count @property def date(self): return self._date @property def max_turns(self): return self._max_turns @property def week_of_month(self): # https://en.wikipedia.org/wiki/ISO_week_date#Weeks_per_month first_day = self.date.replace(day=1) day_of_month = self.date.day # adjust for sundays if (first_day.weekday() == 6): adjusted_dom = (1 + first_day.weekday()) / 7 else: adjusted_dom = day_of_month + first_day.weekday() # days may belong to a month but their week may belong to another one # weeks belong to a month if its thursday falls on it if (first_day.weekday() > 3): return int(ceil(adjusted_dom / 7.0)) - 1 else: return int(ceil(adjusted_dom / 7.0)) # in here register the word triggers # im only using keyword rules instead of sample phrases # literal strings are used as keywords # if available on locale folder vocabulary is expanded def register_core_intents(self): self.register_keyword_intent(\"advance\", required=[\"date\", \"advance\"], optionals=[], handler=self.handle_advance) self.register_keyword_intent(\"rollback\", required=[\"rollback\", \"date\"], optionals=[], handler=self.handle_rollback) self.register_keyword_intent(\"speed_decrease\", required=[\"decrease\", \"speed\"], optionals=[], handler=self.handle_speed_decrease) self.register_keyword_intent(\"speed_increase\", required=[\"increase\", \"speed\"], optionals=[], handler=self.handle_speed_increase) self.register_keyword_intent(\"days_per_turn\", required=[\"turns\", \"day\"], optionals=[\"question\"], handler=self.handle_days_per_turn) self.register_keyword_intent(\"turns_max\", required=[\"turns\", \"total\"], optionals=[\"question\"], handler=self.handle_turns_max) self.register_keyword_intent(\"turns_past\", required=[\"turns\", \"past\"], optionals=[\"question\"], handler=self.handle_turns_past) self.register_keyword_intent(\"turns_current\", required=[\"turns\", \"current\"], optionals=[\"question\"], handler=self.handle_turns_current) self.register_keyword_intent(\"turns_left\", required=[\"turns\", \"remaining\"], optionals=[\"question\"], handler=self.handle_turns_left) self.register_keyword_intent(\"next_turn\", required=[\"next\", \"turn\"], optionals=[], handler=self.handle_next_turn) self.register_keyword_intent(\"ask_day\", required=[\"day\"], optionals=[\"question\"], handler=self.handle_day) self.register_keyword_intent(\"ask_week\", required=[\"week\"], optionals=[\"question\"], handler=self.handle_week) self.register_keyword_intent(\"ask_weekday\", required=[\"weekday\"], optionals=[\"question\"], handler=self.handle_weekday) self.register_keyword_intent(\"ask_month\", required=[\"month\"], optionals=[\"question\"], handler=self.handle_month) self.register_keyword_intent(\"ask_year\", required=[\"year\"], optionals=[\"question\"], handler=self.handle_year) self.register_keyword_intent(\"ask_date\", required=[\"date\"], optionals=[\"question\"], handler=self.handle_date) # handlers for each natural language questions def handle_date(self, intent): return self.pretty_date def handle_week(self, intent): # TODO util to pronounce cardinals return \"it is the \" + str(self.week_of_month) + \" week of the month\" def handle_weekday(self, intent): return self.weekday def handle_month(self, intent): return str(self.date.month) def handle_day(self, intent): return str(self.date.day) def handle_year(self, intent): return \"it is the year \" + str(self.date.year) def handle_days_per_turn(self, intent): return str(self._turn_delta) + \" days per turn\" def handle_turns_left(self, intent): return \"you have \" + str(self.max_turns - self.turns) + \" left\" def handle_turns_max(self, intent): return \"maximum number of turns is \" + str(self.max_turns) def handle_turns_current(self, intent): return \"currently in turn\" + str(self.turns) def handle_turns_past(self, intent): return str(self.turns - 1) + \" passed\" def handle_next_turn(self, intent): self.advance_date() return \"now in turn\" + str(self.turns) def handle_advance(self, intent): self.advance_date() return \"advanced date by \" + str(self._turn_delta) + \" days\" def handle_rollback(self, intent): number = self.extract_number(intent[\"utterance\"]) self.rollback_date(number) return \"rolled back date by \" + str(number) + \" days\" def handle_speed_decrease(self, intent): number = self.extract_number(intent[\"utterance\"]) number = number or 1 self.change_speed(self._turn_delta - number) return \"decreased speed by \" + str(number) + \" days\" def handle_speed_increase(self, intent): number = self.extract_number(intent[\"utterance\"]) number = number or 1 self.change_speed(self._turn_delta - number) return \"increased speed by \" + str(number) + \" days\" you can interact with it now if __name__ == \"__main__\": construct = Calendar() print(construct.parse_command(\"current date\")) print(construct.parse_command(\"what day\")) print(construct.parse_command(\"what month\")) print(construct.parse_command(\"what weekday\")) print(construct.parse_command(\"total turns\")) # Saturday 13, Oct 2018 # 13 # 10 # Saturday # maximum number of turns is 20","title":"Usage"},{"location":"tnalagmes.constructs/","text":"Module tnalagmes.constructs TNaLaGmesConstruct None ask_numeric def ask_numeric(self, prompt, lower_bound=None, upper_bound=None) asks a question in a loop until a numeric answer is received text is matched against self.OPTION_VOCS for synonym translation ask again if number does not fit into lower_bound < number < upper_bound :param prompt: question to ask :param lower_bound: minimum number :param upper_bound: maximum number :return: number ask_with_timeout def ask_with_timeout(self, prompt='say BANG', answer='bang', timeout=7) ask_yes_no def ask_yes_no(self, prompt) ask question and expect yes or no response ask in a loop until answer matches \"yes\" or \"no\" resource :param prompt: question to ask :return: True if yes, False if no calc_intents def calc_intents(self, utterance, lang='en-us') raw intent match data :param utterance: :param lang: :return: direction_to_int def direction_to_int(direction, reference=0) match a string into a degree between 0 and 360 where 0 is north and direction if clockwise :param direction: string :param reference: reference angle if direction is relative, \"increase angle by 2\" :return: int extract_datetime def extract_datetime(text, anchor=None, lang='en-us') Extracts date and time information from a sentence. Parses many of the common ways that humans express dates and times, including relative dates like \"5 days from today\", \"tomorrow', and \"Tuesday\". Vague terminology are given arbitrary values, like: - morning = 8 AM - afternoon = 3 PM - evening = 7 PM If a time isn't supplied or implied, the function defaults to 12 AM Args: text (str): the text to be interpreted anchor (:obj:`datetime`, optional): the date to be used for relative dating (for example, what does \"tomorrow\" mean?). Defaults to the current local date/time. lang (string): the BCP-47 code for the language to use Returns: [:obj:`datetime`, :obj:`str`]: 'datetime' is the extracted date as a datetime object in the user's local timezone. 'leftover_string' is the original phrase with all date and time related keywords stripped out. See examples for further clarification Returns 'None' if the input string is empty. Examples: extract_datetime( ... \"What is the weather like the day after tomorrow?\", ... datetime(2017, 06, 30, 00, 00) ... ) [datetime.datetime(2017, 7, 2, 0, 0), 'what is weather like'] extract_datetime( ... \"Set up an appointment 2 weeks from Sunday at 5 pm\", ... datetime(2016, 02, 19, 00, 00) ... ) [datetime.datetime(2016, 3, 6, 17, 0), 'set up appointment'] extract_number def extract_number(text, short_scale=True, ordinals=False, lang='en-us') Takes in a string and extracts a number. Args: text (str): the string to extract a number from short_scale (bool): Use \"short scale\" or \"long scale\" for large numbers -- over a million. The default is short scale, which is now common in most English speaking countries. See https://en.wikipedia.org/wiki/Names_of_large_numbers ordinals (bool): consider ordinal numbers, e.g. third=3 instead of 1/3 lang (str): the BCP-47 code for the language to use Returns: (int, float or False): The number extracted or False if the input text contains no numbers fuzzy_match def fuzzy_match(x, against) Perform a 'fuzzy' comparison between two strings. Returns: float: match percentage -- 1.0 for perfect match, down to 0.0 for no match at all. load_resource def load_resource(name, sep='\\n', is_json=False) search all paths for a resource file (.voc/.intent/.dialog/.rx) :param name: resource filename or path :param sep: separate entries at this, default :param is_json: load as json :return: manual_fix_parse def manual_fix_parse(self, text) match_one def match_one(query, choices) Find best match from a list or dictionary given an input Arguments: query: string to test choices: list or dictionary of choices Returns: tuple with best match, score match_resource def match_resource(utterance, resource) if utterance matches a resource file (.voc/.intent/.dialog/.rx) return True :param utterance: :param resource: :return: move_to def move_to(self, coordinates) normalize def normalize(text, lang='en-us', remove_articles=True) Prepare a string for parsing This function prepares the given text for parsing by making numbers consistent, getting rid of contractions, etc. Args: text (str): the string to normalize lang (str): the code for the language text is in remove_articles (bool): whether to remove articles (like 'a', or 'the'). True by default. Returns: (str): The normalized string. parse_command def parse_command(self, utterance) chooses and executes best intent returning result register_core_intents def register_core_intents(self) register_default_intents def register_default_intents(self) register_intent def register_intent(self, name, samples, handler=None) register samples based intent (padatious) :param name: intent name :param samples: list of sample phrases or resource files, if None becomes [name] :param handler: handle intent and return string response :return: register_keyword_intent def register_keyword_intent(self, name, required=None, optionals=None, handler=None, ignore_default_kw=False) regster keyword based intent (adapt) :param name: :param required: list of [required keywords] or dict of kw: [synonyms] or if None becomes [name] :param optionals: list of [optional keywords] or dict of kw: [synonyms] or if None becomes [name] :param handler: intent handler, returns string response :param ignore_default_kw: if false do not expand vocabulary :return: word_gender def word_gender(word, input_string='', lang='en-us') guess gender of word, optionally use raw input text for context returns \"m\" if the word is male, \"f\" if female, False if unknown","title":"constructs"},{"location":"tnalagmes.constructs/#module-tnalagmesconstructs","text":"","title":"Module tnalagmes.constructs"},{"location":"tnalagmes.constructs/#tnalagmesconstruct","text":"None","title":"TNaLaGmesConstruct"},{"location":"tnalagmes.constructs/#ask95numeric","text":"def ask_numeric(self, prompt, lower_bound=None, upper_bound=None) asks a question in a loop until a numeric answer is received text is matched against self.OPTION_VOCS for synonym translation ask again if number does not fit into lower_bound < number < upper_bound :param prompt: question to ask :param lower_bound: minimum number :param upper_bound: maximum number :return: number","title":"ask_numeric"},{"location":"tnalagmes.constructs/#ask95with95timeout","text":"def ask_with_timeout(self, prompt='say BANG', answer='bang', timeout=7)","title":"ask_with_timeout"},{"location":"tnalagmes.constructs/#ask95yes95no","text":"def ask_yes_no(self, prompt) ask question and expect yes or no response ask in a loop until answer matches \"yes\" or \"no\" resource :param prompt: question to ask :return: True if yes, False if no","title":"ask_yes_no"},{"location":"tnalagmes.constructs/#calc95intents","text":"def calc_intents(self, utterance, lang='en-us') raw intent match data :param utterance: :param lang: :return:","title":"calc_intents"},{"location":"tnalagmes.constructs/#direction95to95int","text":"def direction_to_int(direction, reference=0) match a string into a degree between 0 and 360 where 0 is north and direction if clockwise :param direction: string :param reference: reference angle if direction is relative, \"increase angle by 2\" :return: int","title":"direction_to_int"},{"location":"tnalagmes.constructs/#extract95datetime","text":"def extract_datetime(text, anchor=None, lang='en-us') Extracts date and time information from a sentence. Parses many of the common ways that humans express dates and times, including relative dates like \"5 days from today\", \"tomorrow', and \"Tuesday\". Vague terminology are given arbitrary values, like: - morning = 8 AM - afternoon = 3 PM - evening = 7 PM If a time isn't supplied or implied, the function defaults to 12 AM Args: text (str): the text to be interpreted anchor (:obj:`datetime`, optional): the date to be used for relative dating (for example, what does \"tomorrow\" mean?). Defaults to the current local date/time. lang (string): the BCP-47 code for the language to use Returns: [:obj:`datetime`, :obj:`str`]: 'datetime' is the extracted date as a datetime object in the user's local timezone. 'leftover_string' is the original phrase with all date and time related keywords stripped out. See examples for further clarification Returns 'None' if the input string is empty. Examples: extract_datetime( ... \"What is the weather like the day after tomorrow?\", ... datetime(2017, 06, 30, 00, 00) ... ) [datetime.datetime(2017, 7, 2, 0, 0), 'what is weather like'] extract_datetime( ... \"Set up an appointment 2 weeks from Sunday at 5 pm\", ... datetime(2016, 02, 19, 00, 00) ... ) [datetime.datetime(2016, 3, 6, 17, 0), 'set up appointment']","title":"extract_datetime"},{"location":"tnalagmes.constructs/#extract95number","text":"def extract_number(text, short_scale=True, ordinals=False, lang='en-us') Takes in a string and extracts a number. Args: text (str): the string to extract a number from short_scale (bool): Use \"short scale\" or \"long scale\" for large numbers -- over a million. The default is short scale, which is now common in most English speaking countries. See https://en.wikipedia.org/wiki/Names_of_large_numbers ordinals (bool): consider ordinal numbers, e.g. third=3 instead of 1/3 lang (str): the BCP-47 code for the language to use Returns: (int, float or False): The number extracted or False if the input text contains no numbers","title":"extract_number"},{"location":"tnalagmes.constructs/#fuzzy95match","text":"def fuzzy_match(x, against) Perform a 'fuzzy' comparison between two strings. Returns: float: match percentage -- 1.0 for perfect match, down to 0.0 for no match at all.","title":"fuzzy_match"},{"location":"tnalagmes.constructs/#load95resource","text":"def load_resource(name, sep='\\n', is_json=False) search all paths for a resource file (.voc/.intent/.dialog/.rx) :param name: resource filename or path :param sep: separate entries at this, default :param is_json: load as json :return:","title":"load_resource"},{"location":"tnalagmes.constructs/#manual95fix95parse","text":"def manual_fix_parse(self, text)","title":"manual_fix_parse"},{"location":"tnalagmes.constructs/#match95one","text":"def match_one(query, choices) Find best match from a list or dictionary given an input Arguments: query: string to test choices: list or dictionary of choices Returns: tuple with best match, score","title":"match_one"},{"location":"tnalagmes.constructs/#match95resource","text":"def match_resource(utterance, resource) if utterance matches a resource file (.voc/.intent/.dialog/.rx) return True :param utterance: :param resource: :return:","title":"match_resource"},{"location":"tnalagmes.constructs/#move95to","text":"def move_to(self, coordinates)","title":"move_to"},{"location":"tnalagmes.constructs/#normalize","text":"def normalize(text, lang='en-us', remove_articles=True) Prepare a string for parsing This function prepares the given text for parsing by making numbers consistent, getting rid of contractions, etc. Args: text (str): the string to normalize lang (str): the code for the language text is in remove_articles (bool): whether to remove articles (like 'a', or 'the'). True by default. Returns: (str): The normalized string.","title":"normalize"},{"location":"tnalagmes.constructs/#parse95command","text":"def parse_command(self, utterance) chooses and executes best intent returning result","title":"parse_command"},{"location":"tnalagmes.constructs/#register95core95intents","text":"def register_core_intents(self)","title":"register_core_intents"},{"location":"tnalagmes.constructs/#register95default95intents","text":"def register_default_intents(self)","title":"register_default_intents"},{"location":"tnalagmes.constructs/#register95intent","text":"def register_intent(self, name, samples, handler=None) register samples based intent (padatious) :param name: intent name :param samples: list of sample phrases or resource files, if None becomes [name] :param handler: handle intent and return string response :return:","title":"register_intent"},{"location":"tnalagmes.constructs/#register95keyword95intent","text":"def register_keyword_intent(self, name, required=None, optionals=None, handler=None, ignore_default_kw=False) regster keyword based intent (adapt) :param name: :param required: list of [required keywords] or dict of kw: [synonyms] or if None becomes [name] :param optionals: list of [optional keywords] or dict of kw: [synonyms] or if None becomes [name] :param handler: intent handler, returns string response :param ignore_default_kw: if false do not expand vocabulary :return:","title":"register_keyword_intent"},{"location":"tnalagmes.constructs/#word95gender","text":"def word_gender(word, input_string='', lang='en-us') guess gender of word, optionally use raw input text for context returns \"m\" if the word is male, \"f\" if female, False if unknown","title":"word_gender"},{"location":"tnalagmes.data/","text":"Module tnalagmes.data Module tnalagmes.data.oregon_trail_data Module tnalagmes.data.template_data Module tnalagmes.data.zombie_survival_data","title":"data"},{"location":"tnalagmes.data/#module-tnalagmesdata","text":"","title":"Module tnalagmes.data"},{"location":"tnalagmes.data/#module-tnalagmesdataoregon_trail_data","text":"","title":"Module tnalagmes.data.oregon_trail_data"},{"location":"tnalagmes.data/#module-tnalagmesdatatemplate_data","text":"","title":"Module tnalagmes.data.template_data"},{"location":"tnalagmes.data/#module-tnalagmesdatazombie_survival_data","text":"","title":"Module tnalagmes.data.zombie_survival_data"},{"location":"tnalagmes.data.oregon_trail_data/","text":"Module tnalagmes.data.oregon_trail_data","title":"oregon_trail_data"},{"location":"tnalagmes.data.oregon_trail_data/#module-tnalagmesdataoregon_trail_data","text":"","title":"Module tnalagmes.data.oregon_trail_data"},{"location":"tnalagmes.data.template_data/","text":"Module tnalagmes.data.template_data","title":"template_data"},{"location":"tnalagmes.data.template_data/#module-tnalagmesdatatemplate_data","text":"","title":"Module tnalagmes.data.template_data"},{"location":"tnalagmes.data.zombie_survival_data/","text":"Module tnalagmes.data.zombie_survival_data","title":"zombie_survival_data"},{"location":"tnalagmes.data.zombie_survival_data/#module-tnalagmesdatazombie_survival_data","text":"","title":"Module tnalagmes.data.zombie_survival_data"},{"location":"tnalagmes.engines.intentworld/","text":"Module tnalagmes.engines.intentworld","title":"intentworld"},{"location":"tnalagmes.engines.intentworld/#module-tnalagmesenginesintentworld","text":"","title":"Module tnalagmes.engines.intentworld"},{"location":"tnalagmes.engines/","text":"Module tnalagmes.engines Event None add_field def add_field(self, name, data=None) bind_handler def bind_handler(self, event_handler=None) from_json def from_json(self, data) trigger def trigger(self, data=None) TNaLaGmesEngine None ask_world def ask_world(self, utterance) export_game_data def export_game_data(path=None) get_entity def get_entity(text) handle_export def handle_export(self, intent) handle_import def handle_import(self, intent) handle_load def handle_load(self, intent) handle_quit def handle_quit(self, intent) handle_save def handle_save(self, intent) import_game_data def import_game_data(path=None) intro def intro(self) load def load(self, path=None) manual_fix_parse def manual_fix_parse(self, text) on_chance_encounter def on_chance_encounter(self) on_damage def on_damage(self) on_difficulty_modifier def on_difficulty_modifier(self) on_easy_difficulty def on_easy_difficulty(self) on_game_over def on_game_over(self) on_hard_difficulty def on_hard_difficulty(self) on_lose def on_lose(self) on_medium_difficulty def on_medium_difficulty(self) on_random_event def on_random_event(self) on_shop def on_shop(self) on_start def on_start(self) on_turn def on_turn(self) on_win def on_win(self) parse_command def parse_command(self, utterance) chooses and executes best intent returning result pprint_data def pprint_data(self) quit def quit(self) register_core_intents def register_core_intents(self) register_event def register_event(self, event_object) register_events def register_events(self) load default events or from jsom :param from_json: :return: register_from_json def register_from_json(self, dictionary, event_handler=None) run def run(self) save def save(self, path=None) submit_command def submit_command(self, text='') Module tnalagmes.engines.intentworld Module tnalagmes.engines.oregon OregonEngine so called because logic is based on oregon trail SimpleInventory what do you have how much money do you have how much are you worth get_entity def get_entity(text) normalize_negative_values def normalize_negative_values(self) spend def spend(self, cost) TurnState am i injured am i eating/poorly/moderately/well suffering illness eating_moderately def eating_moderately(self) eating_poorly def eating_poorly(self) eating_well def eating_well(self) Module tnalagmes.engines.oregon75 Oregon75Engine so called because logic is ported from 1975 basic version of oregon trail animal_attack def animal_attack(self) bad_terrain def bad_terrain(self) cold def cold(self) companion_injury def companion_injury(self) enemy_attack def enemy_attack(self) find_supplies def find_supplies(self) fuel_damage def fuel_damage(self) get_poisoned def get_poisoned(self) handle_no def handle_no(self, intent) handle_yes def handle_yes(self, intent) NOTES: engine heavy_fog def heavy_fog(self) illness def illness(self) lose_companion def lose_companion(self) manual_fix_parse def manual_fix_parse(self, text) on_chance_encounter def on_chance_encounter(self) on_damage def on_damage(self) on_difficulty_damage def on_difficulty_damage(self) on_easy_difficulty def on_easy_difficulty(self) on_explore def on_explore(self) on_hard_difficulty def on_hard_difficulty(self) on_heal def on_heal(self) on_lose def on_lose(self) on_maintenance def on_maintenance(self) on_medium_difficulty def on_medium_difficulty(self) on_shop def on_shop(self) on_start def on_start(self) on_turn def on_turn(self) on_win def on_win(self) NOTES: turn events rain def rain(self) NOTES: random events register_default_intents def register_default_intents(self) register_events def register_events(self) load default events or from jsom :param from_json: :return: shelter_damage def shelter_damage(self) shelter_fire def shelter_fire(self) storm def storm(self) supply_damage def supply_damage(self) vehicle_damage def vehicle_damage(self) Module tnalagmes.engines.oregon78 Oregon78Engine so called because logic is ported from 1978 basic version of oregon trail Module tnalagmes.engines.textadventurer Module tnalagmes.engines.textwarrior","title":"engines"},{"location":"tnalagmes.engines/#module-tnalagmesengines","text":"","title":"Module tnalagmes.engines"},{"location":"tnalagmes.engines/#event","text":"None","title":"Event"},{"location":"tnalagmes.engines/#add95field","text":"def add_field(self, name, data=None)","title":"add_field"},{"location":"tnalagmes.engines/#bind95handler","text":"def bind_handler(self, event_handler=None)","title":"bind_handler"},{"location":"tnalagmes.engines/#from95json","text":"def from_json(self, data)","title":"from_json"},{"location":"tnalagmes.engines/#trigger","text":"def trigger(self, data=None)","title":"trigger"},{"location":"tnalagmes.engines/#tnalagmesengine","text":"None","title":"TNaLaGmesEngine"},{"location":"tnalagmes.engines/#ask95world","text":"def ask_world(self, utterance)","title":"ask_world"},{"location":"tnalagmes.engines/#export95game95data","text":"def export_game_data(path=None)","title":"export_game_data"},{"location":"tnalagmes.engines/#get95entity","text":"def get_entity(text)","title":"get_entity"},{"location":"tnalagmes.engines/#handle95export","text":"def handle_export(self, intent)","title":"handle_export"},{"location":"tnalagmes.engines/#handle95import","text":"def handle_import(self, intent)","title":"handle_import"},{"location":"tnalagmes.engines/#handle95load","text":"def handle_load(self, intent)","title":"handle_load"},{"location":"tnalagmes.engines/#handle95quit","text":"def handle_quit(self, intent)","title":"handle_quit"},{"location":"tnalagmes.engines/#handle95save","text":"def handle_save(self, intent)","title":"handle_save"},{"location":"tnalagmes.engines/#import95game95data","text":"def import_game_data(path=None)","title":"import_game_data"},{"location":"tnalagmes.engines/#intro","text":"def intro(self)","title":"intro"},{"location":"tnalagmes.engines/#load","text":"def load(self, path=None)","title":"load"},{"location":"tnalagmes.engines/#manual95fix95parse","text":"def manual_fix_parse(self, text)","title":"manual_fix_parse"},{"location":"tnalagmes.engines/#on95chance95encounter","text":"def on_chance_encounter(self)","title":"on_chance_encounter"},{"location":"tnalagmes.engines/#on95damage","text":"def on_damage(self)","title":"on_damage"},{"location":"tnalagmes.engines/#on95difficulty95modifier","text":"def on_difficulty_modifier(self)","title":"on_difficulty_modifier"},{"location":"tnalagmes.engines/#on95easy95difficulty","text":"def on_easy_difficulty(self)","title":"on_easy_difficulty"},{"location":"tnalagmes.engines/#on95game95over","text":"def on_game_over(self)","title":"on_game_over"},{"location":"tnalagmes.engines/#on95hard95difficulty","text":"def on_hard_difficulty(self)","title":"on_hard_difficulty"},{"location":"tnalagmes.engines/#on95lose","text":"def on_lose(self)","title":"on_lose"},{"location":"tnalagmes.engines/#on95medium95difficulty","text":"def on_medium_difficulty(self)","title":"on_medium_difficulty"},{"location":"tnalagmes.engines/#on95random95event","text":"def on_random_event(self)","title":"on_random_event"},{"location":"tnalagmes.engines/#on95shop","text":"def on_shop(self)","title":"on_shop"},{"location":"tnalagmes.engines/#on95start","text":"def on_start(self)","title":"on_start"},{"location":"tnalagmes.engines/#on95turn","text":"def on_turn(self)","title":"on_turn"},{"location":"tnalagmes.engines/#on95win","text":"def on_win(self)","title":"on_win"},{"location":"tnalagmes.engines/#parse95command","text":"def parse_command(self, utterance) chooses and executes best intent returning result","title":"parse_command"},{"location":"tnalagmes.engines/#pprint95data","text":"def pprint_data(self)","title":"pprint_data"},{"location":"tnalagmes.engines/#quit","text":"def quit(self)","title":"quit"},{"location":"tnalagmes.engines/#register95core95intents","text":"def register_core_intents(self)","title":"register_core_intents"},{"location":"tnalagmes.engines/#register95event","text":"def register_event(self, event_object)","title":"register_event"},{"location":"tnalagmes.engines/#register95events","text":"def register_events(self) load default events or from jsom :param from_json: :return:","title":"register_events"},{"location":"tnalagmes.engines/#register95from95json","text":"def register_from_json(self, dictionary, event_handler=None)","title":"register_from_json"},{"location":"tnalagmes.engines/#run","text":"def run(self)","title":"run"},{"location":"tnalagmes.engines/#save","text":"def save(self, path=None)","title":"save"},{"location":"tnalagmes.engines/#submit95command","text":"def submit_command(self, text='')","title":"submit_command"},{"location":"tnalagmes.engines/#module-tnalagmesenginesintentworld","text":"","title":"Module tnalagmes.engines.intentworld"},{"location":"tnalagmes.engines/#module-tnalagmesenginesoregon","text":"","title":"Module tnalagmes.engines.oregon"},{"location":"tnalagmes.engines/#oregonengine","text":"so called because logic is based on oregon trail","title":"OregonEngine"},{"location":"tnalagmes.engines/#simpleinventory","text":"what do you have how much money do you have how much are you worth","title":"SimpleInventory"},{"location":"tnalagmes.engines/#get95entity_1","text":"def get_entity(text)","title":"get_entity"},{"location":"tnalagmes.engines/#normalize95negative95values","text":"def normalize_negative_values(self)","title":"normalize_negative_values"},{"location":"tnalagmes.engines/#spend","text":"def spend(self, cost)","title":"spend"},{"location":"tnalagmes.engines/#turnstate","text":"am i injured am i eating/poorly/moderately/well suffering illness","title":"TurnState"},{"location":"tnalagmes.engines/#eating95moderately","text":"def eating_moderately(self)","title":"eating_moderately"},{"location":"tnalagmes.engines/#eating95poorly","text":"def eating_poorly(self)","title":"eating_poorly"},{"location":"tnalagmes.engines/#eating95well","text":"def eating_well(self)","title":"eating_well"},{"location":"tnalagmes.engines/#module-tnalagmesenginesoregon75","text":"","title":"Module tnalagmes.engines.oregon75"},{"location":"tnalagmes.engines/#oregon75engine","text":"so called because logic is ported from 1975 basic version of oregon trail","title":"Oregon75Engine"},{"location":"tnalagmes.engines/#animal95attack","text":"def animal_attack(self)","title":"animal_attack"},{"location":"tnalagmes.engines/#bad95terrain","text":"def bad_terrain(self)","title":"bad_terrain"},{"location":"tnalagmes.engines/#cold","text":"def cold(self)","title":"cold"},{"location":"tnalagmes.engines/#companion95injury","text":"def companion_injury(self)","title":"companion_injury"},{"location":"tnalagmes.engines/#enemy95attack","text":"def enemy_attack(self)","title":"enemy_attack"},{"location":"tnalagmes.engines/#find95supplies","text":"def find_supplies(self)","title":"find_supplies"},{"location":"tnalagmes.engines/#fuel95damage","text":"def fuel_damage(self)","title":"fuel_damage"},{"location":"tnalagmes.engines/#get95poisoned","text":"def get_poisoned(self)","title":"get_poisoned"},{"location":"tnalagmes.engines/#handle95no","text":"def handle_no(self, intent)","title":"handle_no"},{"location":"tnalagmes.engines/#handle95yes","text":"def handle_yes(self, intent) NOTES: engine","title":"handle_yes"},{"location":"tnalagmes.engines/#heavy95fog","text":"def heavy_fog(self)","title":"heavy_fog"},{"location":"tnalagmes.engines/#illness","text":"def illness(self)","title":"illness"},{"location":"tnalagmes.engines/#lose95companion","text":"def lose_companion(self)","title":"lose_companion"},{"location":"tnalagmes.engines/#manual95fix95parse_1","text":"def manual_fix_parse(self, text)","title":"manual_fix_parse"},{"location":"tnalagmes.engines/#on95chance95encounter_1","text":"def on_chance_encounter(self)","title":"on_chance_encounter"},{"location":"tnalagmes.engines/#on95damage_1","text":"def on_damage(self)","title":"on_damage"},{"location":"tnalagmes.engines/#on95difficulty95damage","text":"def on_difficulty_damage(self)","title":"on_difficulty_damage"},{"location":"tnalagmes.engines/#on95easy95difficulty_1","text":"def on_easy_difficulty(self)","title":"on_easy_difficulty"},{"location":"tnalagmes.engines/#on95explore","text":"def on_explore(self)","title":"on_explore"},{"location":"tnalagmes.engines/#on95hard95difficulty_1","text":"def on_hard_difficulty(self)","title":"on_hard_difficulty"},{"location":"tnalagmes.engines/#on95heal","text":"def on_heal(self)","title":"on_heal"},{"location":"tnalagmes.engines/#on95lose_1","text":"def on_lose(self)","title":"on_lose"},{"location":"tnalagmes.engines/#on95maintenance","text":"def on_maintenance(self)","title":"on_maintenance"},{"location":"tnalagmes.engines/#on95medium95difficulty_1","text":"def on_medium_difficulty(self)","title":"on_medium_difficulty"},{"location":"tnalagmes.engines/#on95shop_1","text":"def on_shop(self)","title":"on_shop"},{"location":"tnalagmes.engines/#on95start_1","text":"def on_start(self)","title":"on_start"},{"location":"tnalagmes.engines/#on95turn_1","text":"def on_turn(self)","title":"on_turn"},{"location":"tnalagmes.engines/#on95win_1","text":"def on_win(self) NOTES: turn events","title":"on_win"},{"location":"tnalagmes.engines/#rain","text":"def rain(self) NOTES: random events","title":"rain"},{"location":"tnalagmes.engines/#register95default95intents","text":"def register_default_intents(self)","title":"register_default_intents"},{"location":"tnalagmes.engines/#register95events_1","text":"def register_events(self) load default events or from jsom :param from_json: :return:","title":"register_events"},{"location":"tnalagmes.engines/#shelter95damage","text":"def shelter_damage(self)","title":"shelter_damage"},{"location":"tnalagmes.engines/#shelter95fire","text":"def shelter_fire(self)","title":"shelter_fire"},{"location":"tnalagmes.engines/#storm","text":"def storm(self)","title":"storm"},{"location":"tnalagmes.engines/#supply95damage","text":"def supply_damage(self)","title":"supply_damage"},{"location":"tnalagmes.engines/#vehicle95damage","text":"def vehicle_damage(self)","title":"vehicle_damage"},{"location":"tnalagmes.engines/#module-tnalagmesenginesoregon78","text":"","title":"Module tnalagmes.engines.oregon78"},{"location":"tnalagmes.engines/#oregon78engine","text":"so called because logic is ported from 1978 basic version of oregon trail","title":"Oregon78Engine"},{"location":"tnalagmes.engines/#module-tnalagmesenginestextadventurer","text":"","title":"Module tnalagmes.engines.textadventurer"},{"location":"tnalagmes.engines/#module-tnalagmesenginestextwarrior","text":"","title":"Module tnalagmes.engines.textwarrior"},{"location":"tnalagmes.engines.oregon/","text":"Module tnalagmes.engines.oregon OregonEngine so called because logic is based on oregon trail SimpleInventory what do you have how much money do you have how much are you worth get_entity def get_entity(text) normalize_negative_values def normalize_negative_values(self) spend def spend(self, cost) TurnState am i injured am i eating/poorly/moderately/well suffering illness eating_moderately def eating_moderately(self) eating_poorly def eating_poorly(self) eating_well def eating_well(self)","title":"oregon"},{"location":"tnalagmes.engines.oregon/#module-tnalagmesenginesoregon","text":"","title":"Module tnalagmes.engines.oregon"},{"location":"tnalagmes.engines.oregon/#oregonengine","text":"so called because logic is based on oregon trail","title":"OregonEngine"},{"location":"tnalagmes.engines.oregon/#simpleinventory","text":"what do you have how much money do you have how much are you worth","title":"SimpleInventory"},{"location":"tnalagmes.engines.oregon/#get95entity","text":"def get_entity(text)","title":"get_entity"},{"location":"tnalagmes.engines.oregon/#normalize95negative95values","text":"def normalize_negative_values(self)","title":"normalize_negative_values"},{"location":"tnalagmes.engines.oregon/#spend","text":"def spend(self, cost)","title":"spend"},{"location":"tnalagmes.engines.oregon/#turnstate","text":"am i injured am i eating/poorly/moderately/well suffering illness","title":"TurnState"},{"location":"tnalagmes.engines.oregon/#eating95moderately","text":"def eating_moderately(self)","title":"eating_moderately"},{"location":"tnalagmes.engines.oregon/#eating95poorly","text":"def eating_poorly(self)","title":"eating_poorly"},{"location":"tnalagmes.engines.oregon/#eating95well","text":"def eating_well(self)","title":"eating_well"},{"location":"tnalagmes.engines.oregon75/","text":"Module tnalagmes.engines.oregon75 Oregon75Engine so called because logic is ported from 1975 basic version of oregon trail animal_attack def animal_attack(self) bad_terrain def bad_terrain(self) cold def cold(self) companion_injury def companion_injury(self) enemy_attack def enemy_attack(self) find_supplies def find_supplies(self) fuel_damage def fuel_damage(self) get_poisoned def get_poisoned(self) handle_no def handle_no(self, intent) handle_yes def handle_yes(self, intent) NOTES: engine heavy_fog def heavy_fog(self) illness def illness(self) lose_companion def lose_companion(self) manual_fix_parse def manual_fix_parse(self, text) on_chance_encounter def on_chance_encounter(self) on_damage def on_damage(self) on_difficulty_damage def on_difficulty_damage(self) on_easy_difficulty def on_easy_difficulty(self) on_explore def on_explore(self) on_hard_difficulty def on_hard_difficulty(self) on_heal def on_heal(self) on_lose def on_lose(self) on_maintenance def on_maintenance(self) on_medium_difficulty def on_medium_difficulty(self) on_shop def on_shop(self) on_start def on_start(self) on_turn def on_turn(self) on_win def on_win(self) NOTES: turn events rain def rain(self) NOTES: random events register_default_intents def register_default_intents(self) register_events def register_events(self) load default events or from jsom :param from_json: :return: shelter_damage def shelter_damage(self) shelter_fire def shelter_fire(self) storm def storm(self) supply_damage def supply_damage(self) vehicle_damage def vehicle_damage(self)","title":"oregon75"},{"location":"tnalagmes.engines.oregon75/#module-tnalagmesenginesoregon75","text":"","title":"Module tnalagmes.engines.oregon75"},{"location":"tnalagmes.engines.oregon75/#oregon75engine","text":"so called because logic is ported from 1975 basic version of oregon trail","title":"Oregon75Engine"},{"location":"tnalagmes.engines.oregon75/#animal95attack","text":"def animal_attack(self)","title":"animal_attack"},{"location":"tnalagmes.engines.oregon75/#bad95terrain","text":"def bad_terrain(self)","title":"bad_terrain"},{"location":"tnalagmes.engines.oregon75/#cold","text":"def cold(self)","title":"cold"},{"location":"tnalagmes.engines.oregon75/#companion95injury","text":"def companion_injury(self)","title":"companion_injury"},{"location":"tnalagmes.engines.oregon75/#enemy95attack","text":"def enemy_attack(self)","title":"enemy_attack"},{"location":"tnalagmes.engines.oregon75/#find95supplies","text":"def find_supplies(self)","title":"find_supplies"},{"location":"tnalagmes.engines.oregon75/#fuel95damage","text":"def fuel_damage(self)","title":"fuel_damage"},{"location":"tnalagmes.engines.oregon75/#get95poisoned","text":"def get_poisoned(self)","title":"get_poisoned"},{"location":"tnalagmes.engines.oregon75/#handle95no","text":"def handle_no(self, intent)","title":"handle_no"},{"location":"tnalagmes.engines.oregon75/#handle95yes","text":"def handle_yes(self, intent) NOTES: engine","title":"handle_yes"},{"location":"tnalagmes.engines.oregon75/#heavy95fog","text":"def heavy_fog(self)","title":"heavy_fog"},{"location":"tnalagmes.engines.oregon75/#illness","text":"def illness(self)","title":"illness"},{"location":"tnalagmes.engines.oregon75/#lose95companion","text":"def lose_companion(self)","title":"lose_companion"},{"location":"tnalagmes.engines.oregon75/#manual95fix95parse","text":"def manual_fix_parse(self, text)","title":"manual_fix_parse"},{"location":"tnalagmes.engines.oregon75/#on95chance95encounter","text":"def on_chance_encounter(self)","title":"on_chance_encounter"},{"location":"tnalagmes.engines.oregon75/#on95damage","text":"def on_damage(self)","title":"on_damage"},{"location":"tnalagmes.engines.oregon75/#on95difficulty95damage","text":"def on_difficulty_damage(self)","title":"on_difficulty_damage"},{"location":"tnalagmes.engines.oregon75/#on95easy95difficulty","text":"def on_easy_difficulty(self)","title":"on_easy_difficulty"},{"location":"tnalagmes.engines.oregon75/#on95explore","text":"def on_explore(self)","title":"on_explore"},{"location":"tnalagmes.engines.oregon75/#on95hard95difficulty","text":"def on_hard_difficulty(self)","title":"on_hard_difficulty"},{"location":"tnalagmes.engines.oregon75/#on95heal","text":"def on_heal(self)","title":"on_heal"},{"location":"tnalagmes.engines.oregon75/#on95lose","text":"def on_lose(self)","title":"on_lose"},{"location":"tnalagmes.engines.oregon75/#on95maintenance","text":"def on_maintenance(self)","title":"on_maintenance"},{"location":"tnalagmes.engines.oregon75/#on95medium95difficulty","text":"def on_medium_difficulty(self)","title":"on_medium_difficulty"},{"location":"tnalagmes.engines.oregon75/#on95shop","text":"def on_shop(self)","title":"on_shop"},{"location":"tnalagmes.engines.oregon75/#on95start","text":"def on_start(self)","title":"on_start"},{"location":"tnalagmes.engines.oregon75/#on95turn","text":"def on_turn(self)","title":"on_turn"},{"location":"tnalagmes.engines.oregon75/#on95win","text":"def on_win(self) NOTES: turn events","title":"on_win"},{"location":"tnalagmes.engines.oregon75/#rain","text":"def rain(self) NOTES: random events","title":"rain"},{"location":"tnalagmes.engines.oregon75/#register95default95intents","text":"def register_default_intents(self)","title":"register_default_intents"},{"location":"tnalagmes.engines.oregon75/#register95events","text":"def register_events(self) load default events or from jsom :param from_json: :return:","title":"register_events"},{"location":"tnalagmes.engines.oregon75/#shelter95damage","text":"def shelter_damage(self)","title":"shelter_damage"},{"location":"tnalagmes.engines.oregon75/#shelter95fire","text":"def shelter_fire(self)","title":"shelter_fire"},{"location":"tnalagmes.engines.oregon75/#storm","text":"def storm(self)","title":"storm"},{"location":"tnalagmes.engines.oregon75/#supply95damage","text":"def supply_damage(self)","title":"supply_damage"},{"location":"tnalagmes.engines.oregon75/#vehicle95damage","text":"def vehicle_damage(self)","title":"vehicle_damage"},{"location":"tnalagmes.engines.oregon78/","text":"Module tnalagmes.engines.oregon78 Oregon78Engine so called because logic is ported from 1978 basic version of oregon trail","title":"oregon78"},{"location":"tnalagmes.engines.oregon78/#module-tnalagmesenginesoregon78","text":"","title":"Module tnalagmes.engines.oregon78"},{"location":"tnalagmes.engines.oregon78/#oregon78engine","text":"so called because logic is ported from 1978 basic version of oregon trail","title":"Oregon78Engine"},{"location":"tnalagmes.engines.textadventurer/","text":"Module tnalagmes.engines.textadventurer","title":"textadventurer"},{"location":"tnalagmes.engines.textadventurer/#module-tnalagmesenginestextadventurer","text":"","title":"Module tnalagmes.engines.textadventurer"},{"location":"tnalagmes.engines.textwarrior/","text":"Module tnalagmes.engines.textwarrior","title":"textwarrior"},{"location":"tnalagmes.engines.textwarrior/#module-tnalagmesenginestextwarrior","text":"","title":"Module tnalagmes.engines.textwarrior"},{"location":"tnalagmes.games.dummy/","text":"Module tnalagmes.games.dummy TemplateGame so called because logic is ported from 1975 basic version of oregon trail","title":"dummy"},{"location":"tnalagmes.games.dummy/#module-tnalagmesgamesdummy","text":"","title":"Module tnalagmes.games.dummy"},{"location":"tnalagmes.games.dummy/#templategame","text":"so called because logic is ported from 1975 basic version of oregon trail","title":"TemplateGame"},{"location":"tnalagmes.games/","text":"Module tnalagmes.games Module tnalagmes.games.dummy TemplateGame so called because logic is ported from 1975 basic version of oregon trail Module tnalagmes.games.oregon_trail OregonTrail so called because logic is ported from 1975 basic version of oregon trail Module tnalagmes.games.zombie ZVirus so called because logic is ported from 1975 basic version of oregon trail","title":"games"},{"location":"tnalagmes.games/#module-tnalagmesgames","text":"","title":"Module tnalagmes.games"},{"location":"tnalagmes.games/#module-tnalagmesgamesdummy","text":"","title":"Module tnalagmes.games.dummy"},{"location":"tnalagmes.games/#templategame","text":"so called because logic is ported from 1975 basic version of oregon trail","title":"TemplateGame"},{"location":"tnalagmes.games/#module-tnalagmesgamesoregon_trail","text":"","title":"Module tnalagmes.games.oregon_trail"},{"location":"tnalagmes.games/#oregontrail","text":"so called because logic is ported from 1975 basic version of oregon trail","title":"OregonTrail"},{"location":"tnalagmes.games/#module-tnalagmesgameszombie","text":"","title":"Module tnalagmes.games.zombie"},{"location":"tnalagmes.games/#zvirus","text":"so called because logic is ported from 1975 basic version of oregon trail","title":"ZVirus"},{"location":"tnalagmes.games.oregon_trail/","text":"Module tnalagmes.games.oregon_trail OregonTrail so called because logic is ported from 1975 basic version of oregon trail","title":"oregon_trail"},{"location":"tnalagmes.games.oregon_trail/#module-tnalagmesgamesoregon_trail","text":"","title":"Module tnalagmes.games.oregon_trail"},{"location":"tnalagmes.games.oregon_trail/#oregontrail","text":"so called because logic is ported from 1975 basic version of oregon trail","title":"OregonTrail"},{"location":"tnalagmes.games.zombie/","text":"Module tnalagmes.games.zombie ZVirus so called because logic is ported from 1975 basic version of oregon trail","title":"zombie"},{"location":"tnalagmes.games.zombie/#module-tnalagmesgameszombie","text":"","title":"Module tnalagmes.games.zombie"},{"location":"tnalagmes.games.zombie/#zvirus","text":"so called because logic is ported from 1975 basic version of oregon trail","title":"ZVirus"},{"location":"tnalagmes.intents/","text":"Module tnalagmes.intents ContextManager ContextManager Use to track context throughout the course of a conversational session. How to manage a session's lifecycle is not captured here. clear_context def clear_context(self) get_context def get_context(self, max_frames=None, missing_entities=None) Constructs a list of entities from the context. Args: max_frames(int): maximum number of frames to look back missing_entities(list of str): a list or set of tag names, as strings Returns: list: a list of entities inject_context def inject_context(self, entity, metadata=None) Args: entity(object): Format example... {'data': 'Entity tag as <str>', 'key': 'entity proper _name as <str>', 'confidence': <float>' } metadata(object): dict, arbitrary metadata about entity injected remove_context def remove_context(self, context_id) TNaLaGmesAdaptIntentParser None build_intent def build_intent(self, data, handler, validator) calc_intent def calc_intent(self, utterance, lang='en-us') learn def learn(self) For parsers that need a training phase :return: load_resource def load_resource(name, sep='\\n', is_json=False) match def match(self, utterance, ut) register_intent def register_intent(self, name, samples=None, handler=None, ignore_defaults=False, validator=None) register_keyword_intent def register_keyword_intent(self, name, required=None, optionals=None, handler=None, ignore_defaults=False, validator=None) rule based intent, required and optionals keywords may be dict , list or None, will be formatted into { word : [sample1, sample2] } :param name: :param required: :param optionals: :param handler: :param ignore_defaults: :return: TNaLaGmesBaseIntentParser None build_intent def build_intent(self, data, handler, validator) calc_intent def calc_intent(self, utterance, lang='en-us') learn def learn(self) For parsers that need a training phase :return: load_resource def load_resource(name, sep='\\n', is_json=False) match def match(self, utterance, ut) register_intent def register_intent(self, name, samples=None, handler=None, ignore_defaults=False, validator=None) register_keyword_intent def register_keyword_intent(self, name, required=None, optionals=None, handler=None, ignore_defaults=False, validator=None) rule based intent, required and optionals keywords may be dict , list or None, will be formatted into { word : [sample1, sample2] } :param name: :param required: :param optionals: :param handler: :param ignore_defaults: :return: TNaLaGmesEntailmentIntentParser None build_intent def build_intent(self, data, handler, validator) calc_intent def calc_intent(self, utterance, lang='en-us') learn def learn(self) For parsers that need a training phase :return: load_resource def load_resource(name, sep='\\n', is_json=False) match def match(self, utterance, sample) register_intent def register_intent(self, name, samples=None, handler=None, ignore_defaults=False, validator=None) register_keyword_intent def register_keyword_intent(self, name, required=None, optionals=None, handler=None, ignore_defaults=False, validator=None) rule based intent, required and optionals keywords may be dict , list or None, will be formatted into { word : [sample1, sample2] } :param name: :param required: :param optionals: :param handler: :param ignore_defaults: :return: TNaLaGmesIntent what can you do # self.description how do i trigger you # self.samples alternative meanings of question # other intents that could/will trigger / self.disambiguation what is your engine why did you trigger # matches what did you answer # last answer what is the question # last utterance can you answer X # judge if good question does answer X look correct # judge if good answer to question bind_answer_validator def bind_answer_validator(self, handler) bind_handler def bind_handler(self, handler) bind_question_validator def bind_question_validator(self, handler) from_json def from_json(self, data) validate_answer def validate_answer(self, intent) when asked if the answer of this intent looks good return True or False this step is called for disambiguation after an intent already matched return True -> intent looks good return False -> intent looks bad validate_question def validate_question(self, intent) when asked if you can solve this intent return True or False this step is called for disambiguation after an intent already matched return True -> can solve intent return False -> can not solve intent TNaLaGmesIntentContainer None calc_intent def calc_intent(self, utterance, lang='en-us') chose_best_intent def chose_best_intent(self, utterance, intent_list) disambiguate def disambiguate(self, commands, lang='en-us') execute_intent def execute_intent(self, intent) extract_multiple_commands def extract_multiple_commands(self, utterance, markers=None) fetch_answer_validator def fetch_answer_validator(self, intent) fetch_handler def fetch_handler(self, intent) fetch_question_validator def fetch_question_validator(self, intent) learn def learn(self) normalize_keyword_input def normalize_keyword_input(name=None, required=None, optionals=None, ignore_defaults=False) keywords may be a list, each will be loaded into a dict as {kw: [kw]} keywords may be None, name will be used as single keyword {name: [name]} keywords may be a dict, each key is a keyword + list of synonyms keyword samples will be expanded from .voc files if ignore_defaults=False :param name: str :param required: dict/list/None :param optionals: dict/list/None :param ignore_defaults: bool :return: required(dict), optionals(dict) normalize_samples_input def normalize_samples_input(name=None, samples=None, ignore_defaults=False) samples may be None and name will be used as single sample samples may be a list of sample phrases to trigger this intent if ignore_defaults is False, samples will be expanded from disk vocabulary :param name: :param samples: :param ignore_defaults: :return: register_intent def register_intent(self, name, samples=None, handler=None, ignore_defaults=False) register_keyword_intent def register_keyword_intent(self, name, required=None, optionals=None, handler=None, ignore_defaults=False) TNaLaGmesPadatiousIntentParser None build_intent def build_intent(self, data, handler, validator) calc_intent def calc_intent(self, utterance, lang='en-us') learn def learn(self) For parsers that need a training phase :return: load_resource def load_resource(name, sep='\\n', is_json=False) match def match(self, utterance, ut) register_intent def register_intent(self, name, samples=None, handler=None, ignore_defaults=False, validator=None) register_keyword_intent def register_keyword_intent(self, name, required=None, optionals=None, handler=None, ignore_defaults=False, validator=None) rule based intent, required and optionals keywords may be dict , list or None, will be formatted into { word : [sample1, sample2] } :param name: :param required: :param optionals: :param handler: :param ignore_defaults: :return:","title":"intents"},{"location":"tnalagmes.intents/#module-tnalagmesintents","text":"","title":"Module tnalagmes.intents"},{"location":"tnalagmes.intents/#contextmanager","text":"ContextManager Use to track context throughout the course of a conversational session. How to manage a session's lifecycle is not captured here.","title":"ContextManager"},{"location":"tnalagmes.intents/#clear95context","text":"def clear_context(self)","title":"clear_context"},{"location":"tnalagmes.intents/#get95context","text":"def get_context(self, max_frames=None, missing_entities=None) Constructs a list of entities from the context. Args: max_frames(int): maximum number of frames to look back missing_entities(list of str): a list or set of tag names, as strings Returns: list: a list of entities","title":"get_context"},{"location":"tnalagmes.intents/#inject95context","text":"def inject_context(self, entity, metadata=None) Args: entity(object): Format example... {'data': 'Entity tag as <str>', 'key': 'entity proper _name as <str>', 'confidence': <float>' } metadata(object): dict, arbitrary metadata about entity injected","title":"inject_context"},{"location":"tnalagmes.intents/#remove95context","text":"def remove_context(self, context_id)","title":"remove_context"},{"location":"tnalagmes.intents/#tnalagmesadaptintentparser","text":"None","title":"TNaLaGmesAdaptIntentParser"},{"location":"tnalagmes.intents/#build95intent","text":"def build_intent(self, data, handler, validator)","title":"build_intent"},{"location":"tnalagmes.intents/#calc95intent","text":"def calc_intent(self, utterance, lang='en-us')","title":"calc_intent"},{"location":"tnalagmes.intents/#learn","text":"def learn(self) For parsers that need a training phase :return:","title":"learn"},{"location":"tnalagmes.intents/#load95resource","text":"def load_resource(name, sep='\\n', is_json=False)","title":"load_resource"},{"location":"tnalagmes.intents/#match","text":"def match(self, utterance, ut)","title":"match"},{"location":"tnalagmes.intents/#register95intent","text":"def register_intent(self, name, samples=None, handler=None, ignore_defaults=False, validator=None)","title":"register_intent"},{"location":"tnalagmes.intents/#register95keyword95intent","text":"def register_keyword_intent(self, name, required=None, optionals=None, handler=None, ignore_defaults=False, validator=None) rule based intent, required and optionals keywords may be dict , list or None, will be formatted into { word : [sample1, sample2] } :param name: :param required: :param optionals: :param handler: :param ignore_defaults: :return:","title":"register_keyword_intent"},{"location":"tnalagmes.intents/#tnalagmesbaseintentparser","text":"None","title":"TNaLaGmesBaseIntentParser"},{"location":"tnalagmes.intents/#build95intent_1","text":"def build_intent(self, data, handler, validator)","title":"build_intent"},{"location":"tnalagmes.intents/#calc95intent_1","text":"def calc_intent(self, utterance, lang='en-us')","title":"calc_intent"},{"location":"tnalagmes.intents/#learn_1","text":"def learn(self) For parsers that need a training phase :return:","title":"learn"},{"location":"tnalagmes.intents/#load95resource_1","text":"def load_resource(name, sep='\\n', is_json=False)","title":"load_resource"},{"location":"tnalagmes.intents/#match_1","text":"def match(self, utterance, ut)","title":"match"},{"location":"tnalagmes.intents/#register95intent_1","text":"def register_intent(self, name, samples=None, handler=None, ignore_defaults=False, validator=None)","title":"register_intent"},{"location":"tnalagmes.intents/#register95keyword95intent_1","text":"def register_keyword_intent(self, name, required=None, optionals=None, handler=None, ignore_defaults=False, validator=None) rule based intent, required and optionals keywords may be dict , list or None, will be formatted into { word : [sample1, sample2] } :param name: :param required: :param optionals: :param handler: :param ignore_defaults: :return:","title":"register_keyword_intent"},{"location":"tnalagmes.intents/#tnalagmesentailmentintentparser","text":"None","title":"TNaLaGmesEntailmentIntentParser"},{"location":"tnalagmes.intents/#build95intent_2","text":"def build_intent(self, data, handler, validator)","title":"build_intent"},{"location":"tnalagmes.intents/#calc95intent_2","text":"def calc_intent(self, utterance, lang='en-us')","title":"calc_intent"},{"location":"tnalagmes.intents/#learn_2","text":"def learn(self) For parsers that need a training phase :return:","title":"learn"},{"location":"tnalagmes.intents/#load95resource_2","text":"def load_resource(name, sep='\\n', is_json=False)","title":"load_resource"},{"location":"tnalagmes.intents/#match_2","text":"def match(self, utterance, sample)","title":"match"},{"location":"tnalagmes.intents/#register95intent_2","text":"def register_intent(self, name, samples=None, handler=None, ignore_defaults=False, validator=None)","title":"register_intent"},{"location":"tnalagmes.intents/#register95keyword95intent_2","text":"def register_keyword_intent(self, name, required=None, optionals=None, handler=None, ignore_defaults=False, validator=None) rule based intent, required and optionals keywords may be dict , list or None, will be formatted into { word : [sample1, sample2] } :param name: :param required: :param optionals: :param handler: :param ignore_defaults: :return:","title":"register_keyword_intent"},{"location":"tnalagmes.intents/#tnalagmesintent","text":"what can you do # self.description how do i trigger you # self.samples alternative meanings of question # other intents that could/will trigger / self.disambiguation what is your engine why did you trigger # matches what did you answer # last answer what is the question # last utterance can you answer X # judge if good question does answer X look correct # judge if good answer to question","title":"TNaLaGmesIntent"},{"location":"tnalagmes.intents/#bind95answer95validator","text":"def bind_answer_validator(self, handler)","title":"bind_answer_validator"},{"location":"tnalagmes.intents/#bind95handler","text":"def bind_handler(self, handler)","title":"bind_handler"},{"location":"tnalagmes.intents/#bind95question95validator","text":"def bind_question_validator(self, handler)","title":"bind_question_validator"},{"location":"tnalagmes.intents/#from95json","text":"def from_json(self, data)","title":"from_json"},{"location":"tnalagmes.intents/#validate95answer","text":"def validate_answer(self, intent) when asked if the answer of this intent looks good return True or False this step is called for disambiguation after an intent already matched return True -> intent looks good return False -> intent looks bad","title":"validate_answer"},{"location":"tnalagmes.intents/#validate95question","text":"def validate_question(self, intent) when asked if you can solve this intent return True or False this step is called for disambiguation after an intent already matched return True -> can solve intent return False -> can not solve intent","title":"validate_question"},{"location":"tnalagmes.intents/#tnalagmesintentcontainer","text":"None","title":"TNaLaGmesIntentContainer"},{"location":"tnalagmes.intents/#calc95intent_3","text":"def calc_intent(self, utterance, lang='en-us')","title":"calc_intent"},{"location":"tnalagmes.intents/#chose95best95intent","text":"def chose_best_intent(self, utterance, intent_list)","title":"chose_best_intent"},{"location":"tnalagmes.intents/#disambiguate","text":"def disambiguate(self, commands, lang='en-us')","title":"disambiguate"},{"location":"tnalagmes.intents/#execute95intent","text":"def execute_intent(self, intent)","title":"execute_intent"},{"location":"tnalagmes.intents/#extract95multiple95commands","text":"def extract_multiple_commands(self, utterance, markers=None)","title":"extract_multiple_commands"},{"location":"tnalagmes.intents/#fetch95answer95validator","text":"def fetch_answer_validator(self, intent)","title":"fetch_answer_validator"},{"location":"tnalagmes.intents/#fetch95handler","text":"def fetch_handler(self, intent)","title":"fetch_handler"},{"location":"tnalagmes.intents/#fetch95question95validator","text":"def fetch_question_validator(self, intent)","title":"fetch_question_validator"},{"location":"tnalagmes.intents/#learn_3","text":"def learn(self)","title":"learn"},{"location":"tnalagmes.intents/#normalize95keyword95input","text":"def normalize_keyword_input(name=None, required=None, optionals=None, ignore_defaults=False) keywords may be a list, each will be loaded into a dict as {kw: [kw]} keywords may be None, name will be used as single keyword {name: [name]} keywords may be a dict, each key is a keyword + list of synonyms keyword samples will be expanded from .voc files if ignore_defaults=False :param name: str :param required: dict/list/None :param optionals: dict/list/None :param ignore_defaults: bool :return: required(dict), optionals(dict)","title":"normalize_keyword_input"},{"location":"tnalagmes.intents/#normalize95samples95input","text":"def normalize_samples_input(name=None, samples=None, ignore_defaults=False) samples may be None and name will be used as single sample samples may be a list of sample phrases to trigger this intent if ignore_defaults is False, samples will be expanded from disk vocabulary :param name: :param samples: :param ignore_defaults: :return:","title":"normalize_samples_input"},{"location":"tnalagmes.intents/#register95intent_3","text":"def register_intent(self, name, samples=None, handler=None, ignore_defaults=False)","title":"register_intent"},{"location":"tnalagmes.intents/#register95keyword95intent_3","text":"def register_keyword_intent(self, name, required=None, optionals=None, handler=None, ignore_defaults=False)","title":"register_keyword_intent"},{"location":"tnalagmes.intents/#tnalagmespadatiousintentparser","text":"None","title":"TNaLaGmesPadatiousIntentParser"},{"location":"tnalagmes.intents/#build95intent_3","text":"def build_intent(self, data, handler, validator)","title":"build_intent"},{"location":"tnalagmes.intents/#calc95intent_4","text":"def calc_intent(self, utterance, lang='en-us')","title":"calc_intent"},{"location":"tnalagmes.intents/#learn_4","text":"def learn(self) For parsers that need a training phase :return:","title":"learn"},{"location":"tnalagmes.intents/#load95resource_3","text":"def load_resource(name, sep='\\n', is_json=False)","title":"load_resource"},{"location":"tnalagmes.intents/#match_3","text":"def match(self, utterance, ut)","title":"match"},{"location":"tnalagmes.intents/#register95intent_4","text":"def register_intent(self, name, samples=None, handler=None, ignore_defaults=False, validator=None)","title":"register_intent"},{"location":"tnalagmes.intents/#register95keyword95intent_4","text":"def register_keyword_intent(self, name, required=None, optionals=None, handler=None, ignore_defaults=False, validator=None) rule based intent, required and optionals keywords may be dict , list or None, will be formatted into { word : [sample1, sample2] } :param name: :param required: :param optionals: :param handler: :param ignore_defaults: :return:","title":"register_keyword_intent"},{"location":"tnalagmes.lang.format_common/","text":"Module tnalagmes.lang.format_common convert_to_mixed_fraction def convert_to_mixed_fraction(number, denominators) Convert floats to components of a mixed fraction representation Returns the closest fractional representation using the provided denominators. For example, 4.500002 would become the whole number 4, the numerator 1 and the denominator 2 Args: number (float): number for convert denominators (iter of ints): denominators to use, default [1 .. 20] Returns: whole, numerator, denominator (int): Integers of the mixed fraction","title":"format_common"},{"location":"tnalagmes.lang.format_common/#module-tnalagmeslangformat_common","text":"","title":"Module tnalagmes.lang.format_common"},{"location":"tnalagmes.lang.format_common/#convert95to95mixed95fraction","text":"def convert_to_mixed_fraction(number, denominators) Convert floats to components of a mixed fraction representation Returns the closest fractional representation using the provided denominators. For example, 4.500002 would become the whole number 4, the numerator 1 and the denominator 2 Args: number (float): number for convert denominators (iter of ints): denominators to use, default [1 .. 20] Returns: whole, numerator, denominator (int): Integers of the mixed fraction","title":"convert_to_mixed_fraction"},{"location":"tnalagmes.lang.format_de/","text":"Module tnalagmes.lang.format_de nice_number_de def nice_number_de(number, speech, denominators) German helper for nice_number This function formats a float to human understandable functions. Like 4.5 becomes \"4 einhalb\" for speech and \"4 1/2\" for text Args: number (int or float): the float to format speech (bool): format for speech (True) or display (False) denominators (iter of ints): denominators to use, default [1 .. 20] Returns: (str): The formatted string. nice_ordinal_de def nice_ordinal_de(text) nice_response_de def nice_response_de(text) nice_time_de def nice_time_de(dt, speech=True, use_24hour=False, use_ampm=False) Format a time to a comfortable human format For example, generate 'five thirty' for speech or '5:30' for text display. Args: dt (datetime): date to format (assumes already in local timezone) speech (bool): format for speech (default/True) or display (False)=Fal use_24hour (bool): output in 24-hour/military or 12-hour format use_ampm (bool): include the am/pm for 12-hour format Returns: (str): The formatted time string pronounce_number_de def pronounce_number_de(num, places=2) Convert a number to its spoken equivalent For example, '5.2' would return 'five point two' Args: num(float or int): the number to pronounce (set limit below) places(int): maximum decimal places to speak Returns: (str): The pronounced number pronounce_ordinal_de def pronounce_ordinal_de(num)","title":"format_de"},{"location":"tnalagmes.lang.format_de/#module-tnalagmeslangformat_de","text":"","title":"Module tnalagmes.lang.format_de"},{"location":"tnalagmes.lang.format_de/#nice95number95de","text":"def nice_number_de(number, speech, denominators) German helper for nice_number This function formats a float to human understandable functions. Like 4.5 becomes \"4 einhalb\" for speech and \"4 1/2\" for text Args: number (int or float): the float to format speech (bool): format for speech (True) or display (False) denominators (iter of ints): denominators to use, default [1 .. 20] Returns: (str): The formatted string.","title":"nice_number_de"},{"location":"tnalagmes.lang.format_de/#nice95ordinal95de","text":"def nice_ordinal_de(text)","title":"nice_ordinal_de"},{"location":"tnalagmes.lang.format_de/#nice95response95de","text":"def nice_response_de(text)","title":"nice_response_de"},{"location":"tnalagmes.lang.format_de/#nice95time95de","text":"def nice_time_de(dt, speech=True, use_24hour=False, use_ampm=False) Format a time to a comfortable human format For example, generate 'five thirty' for speech or '5:30' for text display. Args: dt (datetime): date to format (assumes already in local timezone) speech (bool): format for speech (default/True) or display (False)=Fal use_24hour (bool): output in 24-hour/military or 12-hour format use_ampm (bool): include the am/pm for 12-hour format Returns: (str): The formatted time string","title":"nice_time_de"},{"location":"tnalagmes.lang.format_de/#pronounce95number95de","text":"def pronounce_number_de(num, places=2) Convert a number to its spoken equivalent For example, '5.2' would return 'five point two' Args: num(float or int): the number to pronounce (set limit below) places(int): maximum decimal places to speak Returns: (str): The pronounced number","title":"pronounce_number_de"},{"location":"tnalagmes.lang.format_de/#pronounce95ordinal95de","text":"def pronounce_ordinal_de(num)","title":"pronounce_ordinal_de"},{"location":"tnalagmes.lang.format_en/","text":"Module tnalagmes.lang.format_en nice_number_en def nice_number_en(number, speech, denominators) English helper for nice_number This function formats a float to human understandable functions. Like 4.5 becomes \"4 and a half\" for speech and \"4 1/2\" for text Args: number (int or float): the float to format speech (bool): format for speech (True) or display (False) denominators (iter of ints): denominators to use, default [1 .. 20] Returns: (str): The formatted string. nice_time_delta_en def nice_time_delta_en(time_delta, anchor=None) Get a timedelta or datetime object or a int() Epoch timestamp and return a pretty string like 'an hour ago', 'Yesterday', '3 months ago', 'just now', etc nice_time_en def nice_time_en(dt, speech=True, use_24hour=False, use_ampm=False) Format a time to a comfortable human format For example, generate 'five thirty' for speech or '5:30' for text display. Args: dt (datetime): date to format (assumes already in local timezone) speech (bool): format for speech (default/True) or display (False)=Fal use_24hour (bool): output in 24-hour/military or 12-hour format use_ampm (bool): include the am/pm for 12-hour format Returns: (str): The formatted time string pronounce_number_en def pronounce_number_en(num, places=2, short_scale=True, scientific=False) Convert a number to it's spoken equivalent For example, '5.2' would return 'five point two' Args: num(float or int): the number to pronounce (under 100) places(int): maximum decimal places to speak short_scale (bool) : use short (True) or long scale (False) https://en.wikipedia.org/wiki/Names_of_large_numbers scientific (bool): pronounce in scientific notation Returns: (str): The pronounced number","title":"format_en"},{"location":"tnalagmes.lang.format_en/#module-tnalagmeslangformat_en","text":"","title":"Module tnalagmes.lang.format_en"},{"location":"tnalagmes.lang.format_en/#nice95number95en","text":"def nice_number_en(number, speech, denominators) English helper for nice_number This function formats a float to human understandable functions. Like 4.5 becomes \"4 and a half\" for speech and \"4 1/2\" for text Args: number (int or float): the float to format speech (bool): format for speech (True) or display (False) denominators (iter of ints): denominators to use, default [1 .. 20] Returns: (str): The formatted string.","title":"nice_number_en"},{"location":"tnalagmes.lang.format_en/#nice95time95delta95en","text":"def nice_time_delta_en(time_delta, anchor=None) Get a timedelta or datetime object or a int() Epoch timestamp and return a pretty string like 'an hour ago', 'Yesterday', '3 months ago', 'just now', etc","title":"nice_time_delta_en"},{"location":"tnalagmes.lang.format_en/#nice95time95en","text":"def nice_time_en(dt, speech=True, use_24hour=False, use_ampm=False) Format a time to a comfortable human format For example, generate 'five thirty' for speech or '5:30' for text display. Args: dt (datetime): date to format (assumes already in local timezone) speech (bool): format for speech (default/True) or display (False)=Fal use_24hour (bool): output in 24-hour/military or 12-hour format use_ampm (bool): include the am/pm for 12-hour format Returns: (str): The formatted time string","title":"nice_time_en"},{"location":"tnalagmes.lang.format_en/#pronounce95number95en","text":"def pronounce_number_en(num, places=2, short_scale=True, scientific=False) Convert a number to it's spoken equivalent For example, '5.2' would return 'five point two' Args: num(float or int): the number to pronounce (under 100) places(int): maximum decimal places to speak short_scale (bool) : use short (True) or long scale (False) https://en.wikipedia.org/wiki/Names_of_large_numbers scientific (bool): pronounce in scientific notation Returns: (str): The pronounced number","title":"pronounce_number_en"},{"location":"tnalagmes.lang.format_fr/","text":"Module tnalagmes.lang.format_fr Format functions for french (fr) nice_number_fr def nice_number_fr(number, speech, denominators) French helper for nice_number This function formats a float to human understandable functions. Like 4.5 becomes \"4 et demi\" for speech and \"4 1/2\" for text Args: number (int or float): the float to format speech (bool): format for speech (True) or display (False) denominators (iter of ints): denominators to use, default [1 .. 20] Returns: (str): The formatted string. nice_time_fr def nice_time_fr(dt, speech=True, use_24hour=False, use_ampm=False) Format a time to a comfortable human format For example, generate 'cinq heures trente' for speech or '5:30' for text display. Args: dt (datetime): date to format (assumes already in local timezone) speech (bool): format for speech (default/True) or display (False)=Fal use_24hour (bool): output in 24-hour/military or 12-hour format use_ampm (bool): include the am/pm for 12-hour format Returns: (str): The formatted time string pronounce_number_fr def pronounce_number_fr(num, places=2) Convert a number to it's spoken equivalent For example, '5.2' would return 'cinq virgule deux' Args: num(float or int): the number to pronounce (under 100) places(int): maximum decimal places to speak Returns: (str): The pronounced number","title":"format_fr"},{"location":"tnalagmes.lang.format_fr/#module-tnalagmeslangformat_fr","text":"Format functions for french (fr)","title":"Module tnalagmes.lang.format_fr"},{"location":"tnalagmes.lang.format_fr/#nice95number95fr","text":"def nice_number_fr(number, speech, denominators) French helper for nice_number This function formats a float to human understandable functions. Like 4.5 becomes \"4 et demi\" for speech and \"4 1/2\" for text Args: number (int or float): the float to format speech (bool): format for speech (True) or display (False) denominators (iter of ints): denominators to use, default [1 .. 20] Returns: (str): The formatted string.","title":"nice_number_fr"},{"location":"tnalagmes.lang.format_fr/#nice95time95fr","text":"def nice_time_fr(dt, speech=True, use_24hour=False, use_ampm=False) Format a time to a comfortable human format For example, generate 'cinq heures trente' for speech or '5:30' for text display. Args: dt (datetime): date to format (assumes already in local timezone) speech (bool): format for speech (default/True) or display (False)=Fal use_24hour (bool): output in 24-hour/military or 12-hour format use_ampm (bool): include the am/pm for 12-hour format Returns: (str): The formatted time string","title":"nice_time_fr"},{"location":"tnalagmes.lang.format_fr/#pronounce95number95fr","text":"def pronounce_number_fr(num, places=2) Convert a number to it's spoken equivalent For example, '5.2' would return 'cinq virgule deux' Args: num(float or int): the number to pronounce (under 100) places(int): maximum decimal places to speak Returns: (str): The pronounced number","title":"pronounce_number_fr"},{"location":"tnalagmes.lang.format_it/","text":"Module tnalagmes.lang.format_it nice_number_it def nice_number_it(number, speech, denominators) Italian helper for nice_number This function formats a float to human understandable functions. Like 4.5 becomes \"4 e un mezz\" for speech and \"4 1/2\" for text Args: number (int or float): the float to format speech (bool): format for speech (True) or display (False) denominators (iter of ints): denominators to use, default [1 .. 20] Returns: (str): The formatted string. nice_time_it def nice_time_it(dt, speech=True, use_24hour=False, use_ampm=False) Format a time to a comfortable human format adapted to italian fron en version For example, generate 'cinque e trenta' for speech or '5:30' for text display. Args: dt (datetime): date to format (assumes already in local timezone) speech (bool): format for speech (default/True) or display (False)=Fal use_24hour (bool): output in 24-hour/military or 12-hour format use_ampm (bool): include the am/pm for 12-hour format Returns: (str): The formatted time string pronounce_number_it def pronounce_number_it(num, places=2) Convert a number to it's spoken equivalent adapted to italian fron en version For example, '5.2' would return 'cinque virgola due' Args: num(float or int): the number to pronounce (under 100) places(int): maximum decimal places to speak Returns: (str): The pronounced number","title":"format_it"},{"location":"tnalagmes.lang.format_it/#module-tnalagmeslangformat_it","text":"","title":"Module tnalagmes.lang.format_it"},{"location":"tnalagmes.lang.format_it/#nice95number95it","text":"def nice_number_it(number, speech, denominators) Italian helper for nice_number This function formats a float to human understandable functions. Like 4.5 becomes \"4 e un mezz\" for speech and \"4 1/2\" for text Args: number (int or float): the float to format speech (bool): format for speech (True) or display (False) denominators (iter of ints): denominators to use, default [1 .. 20] Returns: (str): The formatted string.","title":"nice_number_it"},{"location":"tnalagmes.lang.format_it/#nice95time95it","text":"def nice_time_it(dt, speech=True, use_24hour=False, use_ampm=False) Format a time to a comfortable human format adapted to italian fron en version For example, generate 'cinque e trenta' for speech or '5:30' for text display. Args: dt (datetime): date to format (assumes already in local timezone) speech (bool): format for speech (default/True) or display (False)=Fal use_24hour (bool): output in 24-hour/military or 12-hour format use_ampm (bool): include the am/pm for 12-hour format Returns: (str): The formatted time string","title":"nice_time_it"},{"location":"tnalagmes.lang.format_it/#pronounce95number95it","text":"def pronounce_number_it(num, places=2) Convert a number to it's spoken equivalent adapted to italian fron en version For example, '5.2' would return 'cinque virgola due' Args: num(float or int): the number to pronounce (under 100) places(int): maximum decimal places to speak Returns: (str): The pronounced number","title":"pronounce_number_it"},{"location":"tnalagmes.lang.format_pt/","text":"Module tnalagmes.lang.format_pt nice_number_pt def nice_number_pt(number, speech, denominators) Portuguese helper for nice_number This function formats a float to human understandable functions. Like 4.5 becomes \"4 e meio\" for speech and \"4 1/2\" for text Args: number (int or float): the float to format speech (bool): format for speech (True) or display (False) denominators (iter of ints): denominators to use, default [1 .. 20] Returns: (str): The formatted string.","title":"format_pt"},{"location":"tnalagmes.lang.format_pt/#module-tnalagmeslangformat_pt","text":"","title":"Module tnalagmes.lang.format_pt"},{"location":"tnalagmes.lang.format_pt/#nice95number95pt","text":"def nice_number_pt(number, speech, denominators) Portuguese helper for nice_number This function formats a float to human understandable functions. Like 4.5 becomes \"4 e meio\" for speech and \"4 1/2\" for text Args: number (int or float): the float to format speech (bool): format for speech (True) or display (False) denominators (iter of ints): denominators to use, default [1 .. 20] Returns: (str): The formatted string.","title":"nice_number_pt"},{"location":"tnalagmes.lang.format_sv/","text":"Module tnalagmes.lang.format_sv nice_number_sv def nice_number_sv(number, speech, denominators) Swedish helper for nice_number This function formats a float to human understandable functions. Like 4.5 becomes \"4 och en halv\" for speech and \"4 1/2\" for text Args: number (int or float): the float to format speech (bool): format for speech (True) or display (False) denominators (iter of ints): denominators to use, default [1 .. 20] Returns: (str): The formatted string.","title":"format_sv"},{"location":"tnalagmes.lang.format_sv/#module-tnalagmeslangformat_sv","text":"","title":"Module tnalagmes.lang.format_sv"},{"location":"tnalagmes.lang.format_sv/#nice95number95sv","text":"def nice_number_sv(number, speech, denominators) Swedish helper for nice_number This function formats a float to human understandable functions. Like 4.5 becomes \"4 och en halv\" for speech and \"4 1/2\" for text Args: number (int or float): the float to format speech (bool): format for speech (True) or display (False) denominators (iter of ints): denominators to use, default [1 .. 20] Returns: (str): The formatted string.","title":"nice_number_sv"},{"location":"tnalagmes.lang/","text":"Module tnalagmes.lang Module tnalagmes.lang.format_common convert_to_mixed_fraction def convert_to_mixed_fraction(number, denominators) Convert floats to components of a mixed fraction representation Returns the closest fractional representation using the provided denominators. For example, 4.500002 would become the whole number 4, the numerator 1 and the denominator 2 Args: number (float): number for convert denominators (iter of ints): denominators to use, default [1 .. 20] Returns: whole, numerator, denominator (int): Integers of the mixed fraction Module tnalagmes.lang.format_de nice_number_de def nice_number_de(number, speech, denominators) German helper for nice_number This function formats a float to human understandable functions. Like 4.5 becomes \"4 einhalb\" for speech and \"4 1/2\" for text Args: number (int or float): the float to format speech (bool): format for speech (True) or display (False) denominators (iter of ints): denominators to use, default [1 .. 20] Returns: (str): The formatted string. nice_ordinal_de def nice_ordinal_de(text) nice_response_de def nice_response_de(text) nice_time_de def nice_time_de(dt, speech=True, use_24hour=False, use_ampm=False) Format a time to a comfortable human format For example, generate 'five thirty' for speech or '5:30' for text display. Args: dt (datetime): date to format (assumes already in local timezone) speech (bool): format for speech (default/True) or display (False)=Fal use_24hour (bool): output in 24-hour/military or 12-hour format use_ampm (bool): include the am/pm for 12-hour format Returns: (str): The formatted time string pronounce_number_de def pronounce_number_de(num, places=2) Convert a number to its spoken equivalent For example, '5.2' would return 'five point two' Args: num(float or int): the number to pronounce (set limit below) places(int): maximum decimal places to speak Returns: (str): The pronounced number pronounce_ordinal_de def pronounce_ordinal_de(num) Module tnalagmes.lang.format_en nice_number_en def nice_number_en(number, speech, denominators) English helper for nice_number This function formats a float to human understandable functions. Like 4.5 becomes \"4 and a half\" for speech and \"4 1/2\" for text Args: number (int or float): the float to format speech (bool): format for speech (True) or display (False) denominators (iter of ints): denominators to use, default [1 .. 20] Returns: (str): The formatted string. nice_time_delta_en def nice_time_delta_en(time_delta, anchor=None) Get a timedelta or datetime object or a int() Epoch timestamp and return a pretty string like 'an hour ago', 'Yesterday', '3 months ago', 'just now', etc nice_time_en def nice_time_en(dt, speech=True, use_24hour=False, use_ampm=False) Format a time to a comfortable human format For example, generate 'five thirty' for speech or '5:30' for text display. Args: dt (datetime): date to format (assumes already in local timezone) speech (bool): format for speech (default/True) or display (False)=Fal use_24hour (bool): output in 24-hour/military or 12-hour format use_ampm (bool): include the am/pm for 12-hour format Returns: (str): The formatted time string pronounce_number_en def pronounce_number_en(num, places=2, short_scale=True, scientific=False) Convert a number to it's spoken equivalent For example, '5.2' would return 'five point two' Args: num(float or int): the number to pronounce (under 100) places(int): maximum decimal places to speak short_scale (bool) : use short (True) or long scale (False) https://en.wikipedia.org/wiki/Names_of_large_numbers scientific (bool): pronounce in scientific notation Returns: (str): The pronounced number Module tnalagmes.lang.format_fr Format functions for french (fr) nice_number_fr def nice_number_fr(number, speech, denominators) French helper for nice_number This function formats a float to human understandable functions. Like 4.5 becomes \"4 et demi\" for speech and \"4 1/2\" for text Args: number (int or float): the float to format speech (bool): format for speech (True) or display (False) denominators (iter of ints): denominators to use, default [1 .. 20] Returns: (str): The formatted string. nice_time_fr def nice_time_fr(dt, speech=True, use_24hour=False, use_ampm=False) Format a time to a comfortable human format For example, generate 'cinq heures trente' for speech or '5:30' for text display. Args: dt (datetime): date to format (assumes already in local timezone) speech (bool): format for speech (default/True) or display (False)=Fal use_24hour (bool): output in 24-hour/military or 12-hour format use_ampm (bool): include the am/pm for 12-hour format Returns: (str): The formatted time string pronounce_number_fr def pronounce_number_fr(num, places=2) Convert a number to it's spoken equivalent For example, '5.2' would return 'cinq virgule deux' Args: num(float or int): the number to pronounce (under 100) places(int): maximum decimal places to speak Returns: (str): The pronounced number Module tnalagmes.lang.format_it nice_number_it def nice_number_it(number, speech, denominators) Italian helper for nice_number This function formats a float to human understandable functions. Like 4.5 becomes \"4 e un mezz\" for speech and \"4 1/2\" for text Args: number (int or float): the float to format speech (bool): format for speech (True) or display (False) denominators (iter of ints): denominators to use, default [1 .. 20] Returns: (str): The formatted string. nice_time_it def nice_time_it(dt, speech=True, use_24hour=False, use_ampm=False) Format a time to a comfortable human format adapted to italian fron en version For example, generate 'cinque e trenta' for speech or '5:30' for text display. Args: dt (datetime): date to format (assumes already in local timezone) speech (bool): format for speech (default/True) or display (False)=Fal use_24hour (bool): output in 24-hour/military or 12-hour format use_ampm (bool): include the am/pm for 12-hour format Returns: (str): The formatted time string pronounce_number_it def pronounce_number_it(num, places=2) Convert a number to it's spoken equivalent adapted to italian fron en version For example, '5.2' would return 'cinque virgola due' Args: num(float or int): the number to pronounce (under 100) places(int): maximum decimal places to speak Returns: (str): The pronounced number Module tnalagmes.lang.format_pt nice_number_pt def nice_number_pt(number, speech, denominators) Portuguese helper for nice_number This function formats a float to human understandable functions. Like 4.5 becomes \"4 e meio\" for speech and \"4 1/2\" for text Args: number (int or float): the float to format speech (bool): format for speech (True) or display (False) denominators (iter of ints): denominators to use, default [1 .. 20] Returns: (str): The formatted string. Module tnalagmes.lang.format_sv nice_number_sv def nice_number_sv(number, speech, denominators) Swedish helper for nice_number This function formats a float to human understandable functions. Like 4.5 becomes \"4 och en halv\" for speech and \"4 1/2\" for text Args: number (int or float): the float to format speech (bool): format for speech (True) or display (False) denominators (iter of ints): denominators to use, default [1 .. 20] Returns: (str): The formatted string. Module tnalagmes.lang.parse_common is_numeric def is_numeric(input_str) Takes in a string and tests to see if it is a number. Args: text (str): string to test if a number Returns: (bool): True if a number, else False look_for_fractions def look_for_fractions(split_list) \" This function takes a list made by fraction & determines if a fraction. Args: split_list (list): list created by splitting on '/' Returns: (bool): False if not a fraction, otherwise True Module tnalagmes.lang.parse_de extract_datetime_de def extract_datetime_de(string, currentDate) extractnumber_de def extractnumber_de(text) This function prepares the given text for parsing by making numbers consistent, getting rid of contractions, etc. Args: text (str): the string to normalize Returns: (int) or (float): The value of extracted number undefined articles cannot be suppressed in German: 'ein Pferd' means 'one horse' and 'a horse' isFractional_de def isFractional_de(input_str) This function takes the given text and checks if it is a fraction. Args: input_str (str): the string to check if fractional Returns: (bool) or (float): False if not a fraction, otherwise the fraction isOrdinal_de def isOrdinal_de(input_str) This function takes the given text and checks if it is an ordinal number. Args: input_str (str): the string to check if ordinal Returns: (bool) or (float): False if not an ordinal, otherwise the number corresponding to the ordinal ordinals for 1, 3, 7 and 8 are irregular only works for ordinals corresponding to the numbers in de_numbers normalize_de def normalize_de(text, remove_articles) German string normalization Module tnalagmes.lang.parse_en extract_datetime_en def extract_datetime_en(string, currentDate) Convert a human date reference into an exact datetime Convert things like \"today\" \"tomorrow afternoon\" \"next Tuesday at 4pm\" \"August 3rd\" into a datetime. If a reference date is not provided, the current local time is used. Also consumes the words used to define the date returning the remaining string. For example, the string \"what is Tuesday's weather forecast\" returns the date for the forthcoming Tuesday relative to the reference date and the remainder string \"what is weather forecast\". Args: string (str): string containing date words currentDate (datetime): A reference date/time for \"tommorrow\", etc Returns: [datetime, str]: An array containing the datetime and the remaining text not consumed in the parsing. extract_number_en def extract_number_en(text, short_scale=True, ordinals=False) This function extracts a number from a text string, handles pronunciations in long scale and short scale https://en.wikipedia.org/wiki/Names_of_large_numbers Args: text (str): the string to normalize short_scale (bool): use short scale if True, long scale if False ordinals (bool): consider ordinal numbers, third=3 instead of 1/3 Returns: (int) or (float) or False: The extracted number or False if no number was found is_fractional_en def is_fractional_en(input_str, short_scale=True) This function takes the given text and checks if it is a fraction. Args: input_str (str): the string to check if fractional short_scale (bool): use short scale if True, long scale if False Returns: (bool) or (float): False if not a fraction, otherwise the fraction normalize_en def normalize_en(text, remove_articles) English string normalization Module tnalagmes.lang.parse_es Parse functions for spanish (es) TODO: numbers greater than 999999 es_parse def es_parse(words, i) normalize_es def normalize_es(text, remove_articles) Spanish string normalization Module tnalagmes.lang.parse_fr Parse functions for french (fr) Todo: * extractnumber_fr: ordinal numbers (\"cinqui\u00e8me\") * extractnumber_fr: numbers greater than 999 999 (\"cinq millions\") * extract_datetime_fr: \"quatri\u00e8me lundi de janvier\" * get_gender_fr extract_datetime_fr def extract_datetime_fr(string, currentDate) extractnumber_fr def extractnumber_fr(text) Takes in a string and extracts a number. Args: text (str): the string to extract a number from Returns: (str): The number extracted or the original text. getOrdinal_fr def getOrdinal_fr(word) Get the ordinal number Takes in a word (string without whitespace) and extracts the ordinal number. Args: word (string): the word to extract the number from Returns: number (int) Returns None if no ordinal number was found. isFractional_fr def isFractional_fr(input_str) This function takes the given text and checks if it is a fraction. Args: input_str (str): the string to check if fractional Returns: (bool) or (float): False if not a fraction, otherwise the fraction normalize_fr def normalize_fr(text, remove_articles) French string normalization number_ordinal_fr def number_ordinal_fr(words, i) Find an ordinal number in a list of words Takes in a list of words (strings without whitespace) and extracts an ordinal number that starts at the given index. Args: words (array): the list to extract a number from i (int): the index in words where to look for the ordinal number Returns: tuple with ordinal number (str), index of next word after the number (int). Returns None if no ordinal number was found. number_parse_fr def number_parse_fr(words, i) Parses a list of words to find a number Takes in a list of words (strings without whitespace) and extracts a number that starts at the given index. Args: words (array): the list to extract a number from i (int): the index in words where to look for the number Returns: tuple with number, index of next word after the number. Returns None if no number was found. Module tnalagmes.lang.parse_it Parse functions for Italian (IT-IT) TODO: numbers greater than 999999 TODO: it_number_parse TODO: it_pruning extract_datetime_it def extract_datetime_it(string, currentDate) extractnumber_it def extractnumber_it(text) Questa funzione prepara il testo dato per l'analisi rendendo numeri testuali come interi o frazioni. In italiano non \u00e8 un modo abituale ma pu\u00f2 essere interessante per Mycroft E' la versione portoghese riadattata in italiano args: text (str): la stringa da normalizzare Ritorna: (int) o (float): il valore del numero estratto extractnumber_long_it def extractnumber_long_it(word) Questa funzione converte un numero testuale lungo es. ventisette -> 27 quarantuno -> 41 nell'equivalente valore intero args: text (str): la stringa da normalizzare Ritorna: (int) : il valore del numero estratto usando tutta la parola Falso : se la parola non \u00e8 un numero es.\"qualcuno\" get_gender_it def get_gender_it(word, raw_string='') Questa potrebbe non essere utile. In italiano per definire il genere \u00e8 necessario analizzare l'articolo che la precede e non la lettera con cui finisce la parola, ma sono presenti funzioni per la rimozione degli articoli dalla frase per semplificarne l'analisi TODO: verificare se utile isFractional_it def isFractional_it(input_str) This function takes the given text and checks if it is a fraction. E' la versione portoghese riadattata in italiano Args: text (str): the string to check if fractional Returns: (bool) or (float): False if not a fraction, otherwise the fraction TODO: verificare la corretta gestione dei plurali normalize_it def normalize_it(text, remove_articles) IT string normalization Module tnalagmes.lang.parse_pt Parse functions for Portuguese (PT-PT) TODO: numbers greater than 999999 TODO: date time pt extract_datetime_pt def extract_datetime_pt(input_str, currentDate) extractnumber_pt def extractnumber_pt(text) This function prepares the given text for parsing by making numbers consistent, getting rid of contractions, etc. Args: text (str): the string to normalize Returns: (int) or (float): The value of extracted number get_gender_pt def get_gender_pt(word, raw_string='') isFractional_pt def isFractional_pt(input_str) This function takes the given text and checks if it is a fraction. Args: text (str): the string to check if fractional Returns: (bool) or (float): False if not a fraction, otherwise the fraction normalize_pt def normalize_pt(text, remove_articles) PT string normalization pt_number_parse def pt_number_parse(words, i) pt_pruning def pt_pruning(text, symbols=True, accents=True, agressive=True) Module tnalagmes.lang.parse_sv extract_datetime_sv def extract_datetime_sv(string, currentDate) extractnumber_sv def extractnumber_sv(text) This function prepares the given text for parsing by making numbers consistent, getting rid of contractions, etc. Args: text (str): the string to normalize Returns: (int) or (float): The value of extracted number is_fractional_sv def is_fractional_sv(input_str) This function takes the given text and checks if it is a fraction. Args: input_str (str): the string to check if fractional Returns: (bool) or (float): False if not a fraction, otherwise the fraction normalize_sv def normalize_sv(text, remove_articles) English string normalization Module tnalagmes.lang.phonemes_en get_phonemes_en def get_phonemes_en(name) guess_phonemes_en def guess_phonemes_en(word) Module tnalagmes.lang.translate say_in_language def say_in_language(sentence, lang='en-us', wav_file='~/tnalagmes/translated') translate_text def translate_text(text, lang='en-us')","title":"lang"},{"location":"tnalagmes.lang/#module-tnalagmeslang","text":"","title":"Module tnalagmes.lang"},{"location":"tnalagmes.lang/#module-tnalagmeslangformat_common","text":"","title":"Module tnalagmes.lang.format_common"},{"location":"tnalagmes.lang/#convert95to95mixed95fraction","text":"def convert_to_mixed_fraction(number, denominators) Convert floats to components of a mixed fraction representation Returns the closest fractional representation using the provided denominators. For example, 4.500002 would become the whole number 4, the numerator 1 and the denominator 2 Args: number (float): number for convert denominators (iter of ints): denominators to use, default [1 .. 20] Returns: whole, numerator, denominator (int): Integers of the mixed fraction","title":"convert_to_mixed_fraction"},{"location":"tnalagmes.lang/#module-tnalagmeslangformat_de","text":"","title":"Module tnalagmes.lang.format_de"},{"location":"tnalagmes.lang/#nice95number95de","text":"def nice_number_de(number, speech, denominators) German helper for nice_number This function formats a float to human understandable functions. Like 4.5 becomes \"4 einhalb\" for speech and \"4 1/2\" for text Args: number (int or float): the float to format speech (bool): format for speech (True) or display (False) denominators (iter of ints): denominators to use, default [1 .. 20] Returns: (str): The formatted string.","title":"nice_number_de"},{"location":"tnalagmes.lang/#nice95ordinal95de","text":"def nice_ordinal_de(text)","title":"nice_ordinal_de"},{"location":"tnalagmes.lang/#nice95response95de","text":"def nice_response_de(text)","title":"nice_response_de"},{"location":"tnalagmes.lang/#nice95time95de","text":"def nice_time_de(dt, speech=True, use_24hour=False, use_ampm=False) Format a time to a comfortable human format For example, generate 'five thirty' for speech or '5:30' for text display. Args: dt (datetime): date to format (assumes already in local timezone) speech (bool): format for speech (default/True) or display (False)=Fal use_24hour (bool): output in 24-hour/military or 12-hour format use_ampm (bool): include the am/pm for 12-hour format Returns: (str): The formatted time string","title":"nice_time_de"},{"location":"tnalagmes.lang/#pronounce95number95de","text":"def pronounce_number_de(num, places=2) Convert a number to its spoken equivalent For example, '5.2' would return 'five point two' Args: num(float or int): the number to pronounce (set limit below) places(int): maximum decimal places to speak Returns: (str): The pronounced number","title":"pronounce_number_de"},{"location":"tnalagmes.lang/#pronounce95ordinal95de","text":"def pronounce_ordinal_de(num)","title":"pronounce_ordinal_de"},{"location":"tnalagmes.lang/#module-tnalagmeslangformat_en","text":"","title":"Module tnalagmes.lang.format_en"},{"location":"tnalagmes.lang/#nice95number95en","text":"def nice_number_en(number, speech, denominators) English helper for nice_number This function formats a float to human understandable functions. Like 4.5 becomes \"4 and a half\" for speech and \"4 1/2\" for text Args: number (int or float): the float to format speech (bool): format for speech (True) or display (False) denominators (iter of ints): denominators to use, default [1 .. 20] Returns: (str): The formatted string.","title":"nice_number_en"},{"location":"tnalagmes.lang/#nice95time95delta95en","text":"def nice_time_delta_en(time_delta, anchor=None) Get a timedelta or datetime object or a int() Epoch timestamp and return a pretty string like 'an hour ago', 'Yesterday', '3 months ago', 'just now', etc","title":"nice_time_delta_en"},{"location":"tnalagmes.lang/#nice95time95en","text":"def nice_time_en(dt, speech=True, use_24hour=False, use_ampm=False) Format a time to a comfortable human format For example, generate 'five thirty' for speech or '5:30' for text display. Args: dt (datetime): date to format (assumes already in local timezone) speech (bool): format for speech (default/True) or display (False)=Fal use_24hour (bool): output in 24-hour/military or 12-hour format use_ampm (bool): include the am/pm for 12-hour format Returns: (str): The formatted time string","title":"nice_time_en"},{"location":"tnalagmes.lang/#pronounce95number95en","text":"def pronounce_number_en(num, places=2, short_scale=True, scientific=False) Convert a number to it's spoken equivalent For example, '5.2' would return 'five point two' Args: num(float or int): the number to pronounce (under 100) places(int): maximum decimal places to speak short_scale (bool) : use short (True) or long scale (False) https://en.wikipedia.org/wiki/Names_of_large_numbers scientific (bool): pronounce in scientific notation Returns: (str): The pronounced number","title":"pronounce_number_en"},{"location":"tnalagmes.lang/#module-tnalagmeslangformat_fr","text":"Format functions for french (fr)","title":"Module tnalagmes.lang.format_fr"},{"location":"tnalagmes.lang/#nice95number95fr","text":"def nice_number_fr(number, speech, denominators) French helper for nice_number This function formats a float to human understandable functions. Like 4.5 becomes \"4 et demi\" for speech and \"4 1/2\" for text Args: number (int or float): the float to format speech (bool): format for speech (True) or display (False) denominators (iter of ints): denominators to use, default [1 .. 20] Returns: (str): The formatted string.","title":"nice_number_fr"},{"location":"tnalagmes.lang/#nice95time95fr","text":"def nice_time_fr(dt, speech=True, use_24hour=False, use_ampm=False) Format a time to a comfortable human format For example, generate 'cinq heures trente' for speech or '5:30' for text display. Args: dt (datetime): date to format (assumes already in local timezone) speech (bool): format for speech (default/True) or display (False)=Fal use_24hour (bool): output in 24-hour/military or 12-hour format use_ampm (bool): include the am/pm for 12-hour format Returns: (str): The formatted time string","title":"nice_time_fr"},{"location":"tnalagmes.lang/#pronounce95number95fr","text":"def pronounce_number_fr(num, places=2) Convert a number to it's spoken equivalent For example, '5.2' would return 'cinq virgule deux' Args: num(float or int): the number to pronounce (under 100) places(int): maximum decimal places to speak Returns: (str): The pronounced number","title":"pronounce_number_fr"},{"location":"tnalagmes.lang/#module-tnalagmeslangformat_it","text":"","title":"Module tnalagmes.lang.format_it"},{"location":"tnalagmes.lang/#nice95number95it","text":"def nice_number_it(number, speech, denominators) Italian helper for nice_number This function formats a float to human understandable functions. Like 4.5 becomes \"4 e un mezz\" for speech and \"4 1/2\" for text Args: number (int or float): the float to format speech (bool): format for speech (True) or display (False) denominators (iter of ints): denominators to use, default [1 .. 20] Returns: (str): The formatted string.","title":"nice_number_it"},{"location":"tnalagmes.lang/#nice95time95it","text":"def nice_time_it(dt, speech=True, use_24hour=False, use_ampm=False) Format a time to a comfortable human format adapted to italian fron en version For example, generate 'cinque e trenta' for speech or '5:30' for text display. Args: dt (datetime): date to format (assumes already in local timezone) speech (bool): format for speech (default/True) or display (False)=Fal use_24hour (bool): output in 24-hour/military or 12-hour format use_ampm (bool): include the am/pm for 12-hour format Returns: (str): The formatted time string","title":"nice_time_it"},{"location":"tnalagmes.lang/#pronounce95number95it","text":"def pronounce_number_it(num, places=2) Convert a number to it's spoken equivalent adapted to italian fron en version For example, '5.2' would return 'cinque virgola due' Args: num(float or int): the number to pronounce (under 100) places(int): maximum decimal places to speak Returns: (str): The pronounced number","title":"pronounce_number_it"},{"location":"tnalagmes.lang/#module-tnalagmeslangformat_pt","text":"","title":"Module tnalagmes.lang.format_pt"},{"location":"tnalagmes.lang/#nice95number95pt","text":"def nice_number_pt(number, speech, denominators) Portuguese helper for nice_number This function formats a float to human understandable functions. Like 4.5 becomes \"4 e meio\" for speech and \"4 1/2\" for text Args: number (int or float): the float to format speech (bool): format for speech (True) or display (False) denominators (iter of ints): denominators to use, default [1 .. 20] Returns: (str): The formatted string.","title":"nice_number_pt"},{"location":"tnalagmes.lang/#module-tnalagmeslangformat_sv","text":"","title":"Module tnalagmes.lang.format_sv"},{"location":"tnalagmes.lang/#nice95number95sv","text":"def nice_number_sv(number, speech, denominators) Swedish helper for nice_number This function formats a float to human understandable functions. Like 4.5 becomes \"4 och en halv\" for speech and \"4 1/2\" for text Args: number (int or float): the float to format speech (bool): format for speech (True) or display (False) denominators (iter of ints): denominators to use, default [1 .. 20] Returns: (str): The formatted string.","title":"nice_number_sv"},{"location":"tnalagmes.lang/#module-tnalagmeslangparse_common","text":"","title":"Module tnalagmes.lang.parse_common"},{"location":"tnalagmes.lang/#is95numeric","text":"def is_numeric(input_str) Takes in a string and tests to see if it is a number. Args: text (str): string to test if a number Returns: (bool): True if a number, else False","title":"is_numeric"},{"location":"tnalagmes.lang/#look95for95fractions","text":"def look_for_fractions(split_list) \" This function takes a list made by fraction & determines if a fraction. Args: split_list (list): list created by splitting on '/' Returns: (bool): False if not a fraction, otherwise True","title":"look_for_fractions"},{"location":"tnalagmes.lang/#module-tnalagmeslangparse_de","text":"","title":"Module tnalagmes.lang.parse_de"},{"location":"tnalagmes.lang/#extract95datetime95de","text":"def extract_datetime_de(string, currentDate)","title":"extract_datetime_de"},{"location":"tnalagmes.lang/#extractnumber95de","text":"def extractnumber_de(text) This function prepares the given text for parsing by making numbers consistent, getting rid of contractions, etc. Args: text (str): the string to normalize Returns: (int) or (float): The value of extracted number undefined articles cannot be suppressed in German: 'ein Pferd' means 'one horse' and 'a horse'","title":"extractnumber_de"},{"location":"tnalagmes.lang/#isfractional95de","text":"def isFractional_de(input_str) This function takes the given text and checks if it is a fraction. Args: input_str (str): the string to check if fractional Returns: (bool) or (float): False if not a fraction, otherwise the fraction","title":"isFractional_de"},{"location":"tnalagmes.lang/#isordinal95de","text":"def isOrdinal_de(input_str) This function takes the given text and checks if it is an ordinal number. Args: input_str (str): the string to check if ordinal Returns: (bool) or (float): False if not an ordinal, otherwise the number corresponding to the ordinal ordinals for 1, 3, 7 and 8 are irregular only works for ordinals corresponding to the numbers in de_numbers","title":"isOrdinal_de"},{"location":"tnalagmes.lang/#normalize95de","text":"def normalize_de(text, remove_articles) German string normalization","title":"normalize_de"},{"location":"tnalagmes.lang/#module-tnalagmeslangparse_en","text":"","title":"Module tnalagmes.lang.parse_en"},{"location":"tnalagmes.lang/#extract95datetime95en","text":"def extract_datetime_en(string, currentDate) Convert a human date reference into an exact datetime Convert things like \"today\" \"tomorrow afternoon\" \"next Tuesday at 4pm\" \"August 3rd\" into a datetime. If a reference date is not provided, the current local time is used. Also consumes the words used to define the date returning the remaining string. For example, the string \"what is Tuesday's weather forecast\" returns the date for the forthcoming Tuesday relative to the reference date and the remainder string \"what is weather forecast\". Args: string (str): string containing date words currentDate (datetime): A reference date/time for \"tommorrow\", etc Returns: [datetime, str]: An array containing the datetime and the remaining text not consumed in the parsing.","title":"extract_datetime_en"},{"location":"tnalagmes.lang/#extract95number95en","text":"def extract_number_en(text, short_scale=True, ordinals=False) This function extracts a number from a text string, handles pronunciations in long scale and short scale https://en.wikipedia.org/wiki/Names_of_large_numbers Args: text (str): the string to normalize short_scale (bool): use short scale if True, long scale if False ordinals (bool): consider ordinal numbers, third=3 instead of 1/3 Returns: (int) or (float) or False: The extracted number or False if no number was found","title":"extract_number_en"},{"location":"tnalagmes.lang/#is95fractional95en","text":"def is_fractional_en(input_str, short_scale=True) This function takes the given text and checks if it is a fraction. Args: input_str (str): the string to check if fractional short_scale (bool): use short scale if True, long scale if False Returns: (bool) or (float): False if not a fraction, otherwise the fraction","title":"is_fractional_en"},{"location":"tnalagmes.lang/#normalize95en","text":"def normalize_en(text, remove_articles) English string normalization","title":"normalize_en"},{"location":"tnalagmes.lang/#module-tnalagmeslangparse_es","text":"Parse functions for spanish (es) TODO: numbers greater than 999999","title":"Module tnalagmes.lang.parse_es"},{"location":"tnalagmes.lang/#es95parse","text":"def es_parse(words, i)","title":"es_parse"},{"location":"tnalagmes.lang/#normalize95es","text":"def normalize_es(text, remove_articles) Spanish string normalization","title":"normalize_es"},{"location":"tnalagmes.lang/#module-tnalagmeslangparse_fr","text":"Parse functions for french (fr) Todo: * extractnumber_fr: ordinal numbers (\"cinqui\u00e8me\") * extractnumber_fr: numbers greater than 999 999 (\"cinq millions\") * extract_datetime_fr: \"quatri\u00e8me lundi de janvier\" * get_gender_fr","title":"Module tnalagmes.lang.parse_fr"},{"location":"tnalagmes.lang/#extract95datetime95fr","text":"def extract_datetime_fr(string, currentDate)","title":"extract_datetime_fr"},{"location":"tnalagmes.lang/#extractnumber95fr","text":"def extractnumber_fr(text) Takes in a string and extracts a number. Args: text (str): the string to extract a number from Returns: (str): The number extracted or the original text.","title":"extractnumber_fr"},{"location":"tnalagmes.lang/#getordinal95fr","text":"def getOrdinal_fr(word) Get the ordinal number Takes in a word (string without whitespace) and extracts the ordinal number. Args: word (string): the word to extract the number from Returns: number (int) Returns None if no ordinal number was found.","title":"getOrdinal_fr"},{"location":"tnalagmes.lang/#isfractional95fr","text":"def isFractional_fr(input_str) This function takes the given text and checks if it is a fraction. Args: input_str (str): the string to check if fractional Returns: (bool) or (float): False if not a fraction, otherwise the fraction","title":"isFractional_fr"},{"location":"tnalagmes.lang/#normalize95fr","text":"def normalize_fr(text, remove_articles) French string normalization","title":"normalize_fr"},{"location":"tnalagmes.lang/#number95ordinal95fr","text":"def number_ordinal_fr(words, i) Find an ordinal number in a list of words Takes in a list of words (strings without whitespace) and extracts an ordinal number that starts at the given index. Args: words (array): the list to extract a number from i (int): the index in words where to look for the ordinal number Returns: tuple with ordinal number (str), index of next word after the number (int). Returns None if no ordinal number was found.","title":"number_ordinal_fr"},{"location":"tnalagmes.lang/#number95parse95fr","text":"def number_parse_fr(words, i) Parses a list of words to find a number Takes in a list of words (strings without whitespace) and extracts a number that starts at the given index. Args: words (array): the list to extract a number from i (int): the index in words where to look for the number Returns: tuple with number, index of next word after the number. Returns None if no number was found.","title":"number_parse_fr"},{"location":"tnalagmes.lang/#module-tnalagmeslangparse_it","text":"Parse functions for Italian (IT-IT) TODO: numbers greater than 999999 TODO: it_number_parse TODO: it_pruning","title":"Module tnalagmes.lang.parse_it"},{"location":"tnalagmes.lang/#extract95datetime95it","text":"def extract_datetime_it(string, currentDate)","title":"extract_datetime_it"},{"location":"tnalagmes.lang/#extractnumber95it","text":"def extractnumber_it(text) Questa funzione prepara il testo dato per l'analisi rendendo numeri testuali come interi o frazioni. In italiano non \u00e8 un modo abituale ma pu\u00f2 essere interessante per Mycroft E' la versione portoghese riadattata in italiano args: text (str): la stringa da normalizzare Ritorna: (int) o (float): il valore del numero estratto","title":"extractnumber_it"},{"location":"tnalagmes.lang/#extractnumber95long95it","text":"def extractnumber_long_it(word) Questa funzione converte un numero testuale lungo es. ventisette -> 27 quarantuno -> 41 nell'equivalente valore intero args: text (str): la stringa da normalizzare Ritorna: (int) : il valore del numero estratto usando tutta la parola Falso : se la parola non \u00e8 un numero es.\"qualcuno\"","title":"extractnumber_long_it"},{"location":"tnalagmes.lang/#get95gender95it","text":"def get_gender_it(word, raw_string='') Questa potrebbe non essere utile. In italiano per definire il genere \u00e8 necessario analizzare l'articolo che la precede e non la lettera con cui finisce la parola, ma sono presenti funzioni per la rimozione degli articoli dalla frase per semplificarne l'analisi TODO: verificare se utile","title":"get_gender_it"},{"location":"tnalagmes.lang/#isfractional95it","text":"def isFractional_it(input_str) This function takes the given text and checks if it is a fraction. E' la versione portoghese riadattata in italiano Args: text (str): the string to check if fractional Returns: (bool) or (float): False if not a fraction, otherwise the fraction TODO: verificare la corretta gestione dei plurali","title":"isFractional_it"},{"location":"tnalagmes.lang/#normalize95it","text":"def normalize_it(text, remove_articles) IT string normalization","title":"normalize_it"},{"location":"tnalagmes.lang/#module-tnalagmeslangparse_pt","text":"Parse functions for Portuguese (PT-PT) TODO: numbers greater than 999999 TODO: date time pt","title":"Module tnalagmes.lang.parse_pt"},{"location":"tnalagmes.lang/#extract95datetime95pt","text":"def extract_datetime_pt(input_str, currentDate)","title":"extract_datetime_pt"},{"location":"tnalagmes.lang/#extractnumber95pt","text":"def extractnumber_pt(text) This function prepares the given text for parsing by making numbers consistent, getting rid of contractions, etc. Args: text (str): the string to normalize Returns: (int) or (float): The value of extracted number","title":"extractnumber_pt"},{"location":"tnalagmes.lang/#get95gender95pt","text":"def get_gender_pt(word, raw_string='')","title":"get_gender_pt"},{"location":"tnalagmes.lang/#isfractional95pt","text":"def isFractional_pt(input_str) This function takes the given text and checks if it is a fraction. Args: text (str): the string to check if fractional Returns: (bool) or (float): False if not a fraction, otherwise the fraction","title":"isFractional_pt"},{"location":"tnalagmes.lang/#normalize95pt","text":"def normalize_pt(text, remove_articles) PT string normalization","title":"normalize_pt"},{"location":"tnalagmes.lang/#pt95number95parse","text":"def pt_number_parse(words, i)","title":"pt_number_parse"},{"location":"tnalagmes.lang/#pt95pruning","text":"def pt_pruning(text, symbols=True, accents=True, agressive=True)","title":"pt_pruning"},{"location":"tnalagmes.lang/#module-tnalagmeslangparse_sv","text":"","title":"Module tnalagmes.lang.parse_sv"},{"location":"tnalagmes.lang/#extract95datetime95sv","text":"def extract_datetime_sv(string, currentDate)","title":"extract_datetime_sv"},{"location":"tnalagmes.lang/#extractnumber95sv","text":"def extractnumber_sv(text) This function prepares the given text for parsing by making numbers consistent, getting rid of contractions, etc. Args: text (str): the string to normalize Returns: (int) or (float): The value of extracted number","title":"extractnumber_sv"},{"location":"tnalagmes.lang/#is95fractional95sv","text":"def is_fractional_sv(input_str) This function takes the given text and checks if it is a fraction. Args: input_str (str): the string to check if fractional Returns: (bool) or (float): False if not a fraction, otherwise the fraction","title":"is_fractional_sv"},{"location":"tnalagmes.lang/#normalize95sv","text":"def normalize_sv(text, remove_articles) English string normalization","title":"normalize_sv"},{"location":"tnalagmes.lang/#module-tnalagmeslangphonemes_en","text":"","title":"Module tnalagmes.lang.phonemes_en"},{"location":"tnalagmes.lang/#get95phonemes95en","text":"def get_phonemes_en(name)","title":"get_phonemes_en"},{"location":"tnalagmes.lang/#guess95phonemes95en","text":"def guess_phonemes_en(word)","title":"guess_phonemes_en"},{"location":"tnalagmes.lang/#module-tnalagmeslangtranslate","text":"","title":"Module tnalagmes.lang.translate"},{"location":"tnalagmes.lang/#say95in95language","text":"def say_in_language(sentence, lang='en-us', wav_file='~/tnalagmes/translated')","title":"say_in_language"},{"location":"tnalagmes.lang/#translate95text","text":"def translate_text(text, lang='en-us')","title":"translate_text"},{"location":"tnalagmes.lang.parse_common/","text":"Module tnalagmes.lang.parse_common is_numeric def is_numeric(input_str) Takes in a string and tests to see if it is a number. Args: text (str): string to test if a number Returns: (bool): True if a number, else False look_for_fractions def look_for_fractions(split_list) \" This function takes a list made by fraction & determines if a fraction. Args: split_list (list): list created by splitting on '/' Returns: (bool): False if not a fraction, otherwise True","title":"parse_common"},{"location":"tnalagmes.lang.parse_common/#module-tnalagmeslangparse_common","text":"","title":"Module tnalagmes.lang.parse_common"},{"location":"tnalagmes.lang.parse_common/#is95numeric","text":"def is_numeric(input_str) Takes in a string and tests to see if it is a number. Args: text (str): string to test if a number Returns: (bool): True if a number, else False","title":"is_numeric"},{"location":"tnalagmes.lang.parse_common/#look95for95fractions","text":"def look_for_fractions(split_list) \" This function takes a list made by fraction & determines if a fraction. Args: split_list (list): list created by splitting on '/' Returns: (bool): False if not a fraction, otherwise True","title":"look_for_fractions"},{"location":"tnalagmes.lang.parse_de/","text":"Module tnalagmes.lang.parse_de extract_datetime_de def extract_datetime_de(string, currentDate) extractnumber_de def extractnumber_de(text) This function prepares the given text for parsing by making numbers consistent, getting rid of contractions, etc. Args: text (str): the string to normalize Returns: (int) or (float): The value of extracted number undefined articles cannot be suppressed in German: 'ein Pferd' means 'one horse' and 'a horse' isFractional_de def isFractional_de(input_str) This function takes the given text and checks if it is a fraction. Args: input_str (str): the string to check if fractional Returns: (bool) or (float): False if not a fraction, otherwise the fraction isOrdinal_de def isOrdinal_de(input_str) This function takes the given text and checks if it is an ordinal number. Args: input_str (str): the string to check if ordinal Returns: (bool) or (float): False if not an ordinal, otherwise the number corresponding to the ordinal ordinals for 1, 3, 7 and 8 are irregular only works for ordinals corresponding to the numbers in de_numbers normalize_de def normalize_de(text, remove_articles) German string normalization","title":"parse_de"},{"location":"tnalagmes.lang.parse_de/#module-tnalagmeslangparse_de","text":"","title":"Module tnalagmes.lang.parse_de"},{"location":"tnalagmes.lang.parse_de/#extract95datetime95de","text":"def extract_datetime_de(string, currentDate)","title":"extract_datetime_de"},{"location":"tnalagmes.lang.parse_de/#extractnumber95de","text":"def extractnumber_de(text) This function prepares the given text for parsing by making numbers consistent, getting rid of contractions, etc. Args: text (str): the string to normalize Returns: (int) or (float): The value of extracted number undefined articles cannot be suppressed in German: 'ein Pferd' means 'one horse' and 'a horse'","title":"extractnumber_de"},{"location":"tnalagmes.lang.parse_de/#isfractional95de","text":"def isFractional_de(input_str) This function takes the given text and checks if it is a fraction. Args: input_str (str): the string to check if fractional Returns: (bool) or (float): False if not a fraction, otherwise the fraction","title":"isFractional_de"},{"location":"tnalagmes.lang.parse_de/#isordinal95de","text":"def isOrdinal_de(input_str) This function takes the given text and checks if it is an ordinal number. Args: input_str (str): the string to check if ordinal Returns: (bool) or (float): False if not an ordinal, otherwise the number corresponding to the ordinal ordinals for 1, 3, 7 and 8 are irregular only works for ordinals corresponding to the numbers in de_numbers","title":"isOrdinal_de"},{"location":"tnalagmes.lang.parse_de/#normalize95de","text":"def normalize_de(text, remove_articles) German string normalization","title":"normalize_de"},{"location":"tnalagmes.lang.parse_en/","text":"Module tnalagmes.lang.parse_en extract_datetime_en def extract_datetime_en(string, currentDate) Convert a human date reference into an exact datetime Convert things like \"today\" \"tomorrow afternoon\" \"next Tuesday at 4pm\" \"August 3rd\" into a datetime. If a reference date is not provided, the current local time is used. Also consumes the words used to define the date returning the remaining string. For example, the string \"what is Tuesday's weather forecast\" returns the date for the forthcoming Tuesday relative to the reference date and the remainder string \"what is weather forecast\". Args: string (str): string containing date words currentDate (datetime): A reference date/time for \"tommorrow\", etc Returns: [datetime, str]: An array containing the datetime and the remaining text not consumed in the parsing. extract_number_en def extract_number_en(text, short_scale=True, ordinals=False) This function extracts a number from a text string, handles pronunciations in long scale and short scale https://en.wikipedia.org/wiki/Names_of_large_numbers Args: text (str): the string to normalize short_scale (bool): use short scale if True, long scale if False ordinals (bool): consider ordinal numbers, third=3 instead of 1/3 Returns: (int) or (float) or False: The extracted number or False if no number was found is_fractional_en def is_fractional_en(input_str, short_scale=True) This function takes the given text and checks if it is a fraction. Args: input_str (str): the string to check if fractional short_scale (bool): use short scale if True, long scale if False Returns: (bool) or (float): False if not a fraction, otherwise the fraction normalize_en def normalize_en(text, remove_articles) English string normalization","title":"parse_en"},{"location":"tnalagmes.lang.parse_en/#module-tnalagmeslangparse_en","text":"","title":"Module tnalagmes.lang.parse_en"},{"location":"tnalagmes.lang.parse_en/#extract95datetime95en","text":"def extract_datetime_en(string, currentDate) Convert a human date reference into an exact datetime Convert things like \"today\" \"tomorrow afternoon\" \"next Tuesday at 4pm\" \"August 3rd\" into a datetime. If a reference date is not provided, the current local time is used. Also consumes the words used to define the date returning the remaining string. For example, the string \"what is Tuesday's weather forecast\" returns the date for the forthcoming Tuesday relative to the reference date and the remainder string \"what is weather forecast\". Args: string (str): string containing date words currentDate (datetime): A reference date/time for \"tommorrow\", etc Returns: [datetime, str]: An array containing the datetime and the remaining text not consumed in the parsing.","title":"extract_datetime_en"},{"location":"tnalagmes.lang.parse_en/#extract95number95en","text":"def extract_number_en(text, short_scale=True, ordinals=False) This function extracts a number from a text string, handles pronunciations in long scale and short scale https://en.wikipedia.org/wiki/Names_of_large_numbers Args: text (str): the string to normalize short_scale (bool): use short scale if True, long scale if False ordinals (bool): consider ordinal numbers, third=3 instead of 1/3 Returns: (int) or (float) or False: The extracted number or False if no number was found","title":"extract_number_en"},{"location":"tnalagmes.lang.parse_en/#is95fractional95en","text":"def is_fractional_en(input_str, short_scale=True) This function takes the given text and checks if it is a fraction. Args: input_str (str): the string to check if fractional short_scale (bool): use short scale if True, long scale if False Returns: (bool) or (float): False if not a fraction, otherwise the fraction","title":"is_fractional_en"},{"location":"tnalagmes.lang.parse_en/#normalize95en","text":"def normalize_en(text, remove_articles) English string normalization","title":"normalize_en"},{"location":"tnalagmes.lang.parse_es/","text":"Module tnalagmes.lang.parse_es Parse functions for spanish (es) TODO: numbers greater than 999999 es_parse def es_parse(words, i) normalize_es def normalize_es(text, remove_articles) Spanish string normalization","title":"parse_es"},{"location":"tnalagmes.lang.parse_es/#module-tnalagmeslangparse_es","text":"Parse functions for spanish (es) TODO: numbers greater than 999999","title":"Module tnalagmes.lang.parse_es"},{"location":"tnalagmes.lang.parse_es/#es95parse","text":"def es_parse(words, i)","title":"es_parse"},{"location":"tnalagmes.lang.parse_es/#normalize95es","text":"def normalize_es(text, remove_articles) Spanish string normalization","title":"normalize_es"},{"location":"tnalagmes.lang.parse_fr/","text":"Module tnalagmes.lang.parse_fr Parse functions for french (fr) Todo: * extractnumber_fr: ordinal numbers (\"cinqui\u00e8me\") * extractnumber_fr: numbers greater than 999 999 (\"cinq millions\") * extract_datetime_fr: \"quatri\u00e8me lundi de janvier\" * get_gender_fr extract_datetime_fr def extract_datetime_fr(string, currentDate) extractnumber_fr def extractnumber_fr(text) Takes in a string and extracts a number. Args: text (str): the string to extract a number from Returns: (str): The number extracted or the original text. getOrdinal_fr def getOrdinal_fr(word) Get the ordinal number Takes in a word (string without whitespace) and extracts the ordinal number. Args: word (string): the word to extract the number from Returns: number (int) Returns None if no ordinal number was found. isFractional_fr def isFractional_fr(input_str) This function takes the given text and checks if it is a fraction. Args: input_str (str): the string to check if fractional Returns: (bool) or (float): False if not a fraction, otherwise the fraction normalize_fr def normalize_fr(text, remove_articles) French string normalization number_ordinal_fr def number_ordinal_fr(words, i) Find an ordinal number in a list of words Takes in a list of words (strings without whitespace) and extracts an ordinal number that starts at the given index. Args: words (array): the list to extract a number from i (int): the index in words where to look for the ordinal number Returns: tuple with ordinal number (str), index of next word after the number (int). Returns None if no ordinal number was found. number_parse_fr def number_parse_fr(words, i) Parses a list of words to find a number Takes in a list of words (strings without whitespace) and extracts a number that starts at the given index. Args: words (array): the list to extract a number from i (int): the index in words where to look for the number Returns: tuple with number, index of next word after the number. Returns None if no number was found.","title":"parse_fr"},{"location":"tnalagmes.lang.parse_fr/#module-tnalagmeslangparse_fr","text":"Parse functions for french (fr) Todo: * extractnumber_fr: ordinal numbers (\"cinqui\u00e8me\") * extractnumber_fr: numbers greater than 999 999 (\"cinq millions\") * extract_datetime_fr: \"quatri\u00e8me lundi de janvier\" * get_gender_fr","title":"Module tnalagmes.lang.parse_fr"},{"location":"tnalagmes.lang.parse_fr/#extract95datetime95fr","text":"def extract_datetime_fr(string, currentDate)","title":"extract_datetime_fr"},{"location":"tnalagmes.lang.parse_fr/#extractnumber95fr","text":"def extractnumber_fr(text) Takes in a string and extracts a number. Args: text (str): the string to extract a number from Returns: (str): The number extracted or the original text.","title":"extractnumber_fr"},{"location":"tnalagmes.lang.parse_fr/#getordinal95fr","text":"def getOrdinal_fr(word) Get the ordinal number Takes in a word (string without whitespace) and extracts the ordinal number. Args: word (string): the word to extract the number from Returns: number (int) Returns None if no ordinal number was found.","title":"getOrdinal_fr"},{"location":"tnalagmes.lang.parse_fr/#isfractional95fr","text":"def isFractional_fr(input_str) This function takes the given text and checks if it is a fraction. Args: input_str (str): the string to check if fractional Returns: (bool) or (float): False if not a fraction, otherwise the fraction","title":"isFractional_fr"},{"location":"tnalagmes.lang.parse_fr/#normalize95fr","text":"def normalize_fr(text, remove_articles) French string normalization","title":"normalize_fr"},{"location":"tnalagmes.lang.parse_fr/#number95ordinal95fr","text":"def number_ordinal_fr(words, i) Find an ordinal number in a list of words Takes in a list of words (strings without whitespace) and extracts an ordinal number that starts at the given index. Args: words (array): the list to extract a number from i (int): the index in words where to look for the ordinal number Returns: tuple with ordinal number (str), index of next word after the number (int). Returns None if no ordinal number was found.","title":"number_ordinal_fr"},{"location":"tnalagmes.lang.parse_fr/#number95parse95fr","text":"def number_parse_fr(words, i) Parses a list of words to find a number Takes in a list of words (strings without whitespace) and extracts a number that starts at the given index. Args: words (array): the list to extract a number from i (int): the index in words where to look for the number Returns: tuple with number, index of next word after the number. Returns None if no number was found.","title":"number_parse_fr"},{"location":"tnalagmes.lang.parse_it/","text":"Module tnalagmes.lang.parse_it Parse functions for Italian (IT-IT) TODO: numbers greater than 999999 TODO: it_number_parse TODO: it_pruning extract_datetime_it def extract_datetime_it(string, currentDate) extractnumber_it def extractnumber_it(text) Questa funzione prepara il testo dato per l'analisi rendendo numeri testuali come interi o frazioni. In italiano non \u00e8 un modo abituale ma pu\u00f2 essere interessante per Mycroft E' la versione portoghese riadattata in italiano args: text (str): la stringa da normalizzare Ritorna: (int) o (float): il valore del numero estratto extractnumber_long_it def extractnumber_long_it(word) Questa funzione converte un numero testuale lungo es. ventisette -> 27 quarantuno -> 41 nell'equivalente valore intero args: text (str): la stringa da normalizzare Ritorna: (int) : il valore del numero estratto usando tutta la parola Falso : se la parola non \u00e8 un numero es.\"qualcuno\" get_gender_it def get_gender_it(word, raw_string='') Questa potrebbe non essere utile. In italiano per definire il genere \u00e8 necessario analizzare l'articolo che la precede e non la lettera con cui finisce la parola, ma sono presenti funzioni per la rimozione degli articoli dalla frase per semplificarne l'analisi TODO: verificare se utile isFractional_it def isFractional_it(input_str) This function takes the given text and checks if it is a fraction. E' la versione portoghese riadattata in italiano Args: text (str): the string to check if fractional Returns: (bool) or (float): False if not a fraction, otherwise the fraction TODO: verificare la corretta gestione dei plurali normalize_it def normalize_it(text, remove_articles) IT string normalization","title":"parse_it"},{"location":"tnalagmes.lang.parse_it/#module-tnalagmeslangparse_it","text":"Parse functions for Italian (IT-IT) TODO: numbers greater than 999999 TODO: it_number_parse TODO: it_pruning","title":"Module tnalagmes.lang.parse_it"},{"location":"tnalagmes.lang.parse_it/#extract95datetime95it","text":"def extract_datetime_it(string, currentDate)","title":"extract_datetime_it"},{"location":"tnalagmes.lang.parse_it/#extractnumber95it","text":"def extractnumber_it(text) Questa funzione prepara il testo dato per l'analisi rendendo numeri testuali come interi o frazioni. In italiano non \u00e8 un modo abituale ma pu\u00f2 essere interessante per Mycroft E' la versione portoghese riadattata in italiano args: text (str): la stringa da normalizzare Ritorna: (int) o (float): il valore del numero estratto","title":"extractnumber_it"},{"location":"tnalagmes.lang.parse_it/#extractnumber95long95it","text":"def extractnumber_long_it(word) Questa funzione converte un numero testuale lungo es. ventisette -> 27 quarantuno -> 41 nell'equivalente valore intero args: text (str): la stringa da normalizzare Ritorna: (int) : il valore del numero estratto usando tutta la parola Falso : se la parola non \u00e8 un numero es.\"qualcuno\"","title":"extractnumber_long_it"},{"location":"tnalagmes.lang.parse_it/#get95gender95it","text":"def get_gender_it(word, raw_string='') Questa potrebbe non essere utile. In italiano per definire il genere \u00e8 necessario analizzare l'articolo che la precede e non la lettera con cui finisce la parola, ma sono presenti funzioni per la rimozione degli articoli dalla frase per semplificarne l'analisi TODO: verificare se utile","title":"get_gender_it"},{"location":"tnalagmes.lang.parse_it/#isfractional95it","text":"def isFractional_it(input_str) This function takes the given text and checks if it is a fraction. E' la versione portoghese riadattata in italiano Args: text (str): the string to check if fractional Returns: (bool) or (float): False if not a fraction, otherwise the fraction TODO: verificare la corretta gestione dei plurali","title":"isFractional_it"},{"location":"tnalagmes.lang.parse_it/#normalize95it","text":"def normalize_it(text, remove_articles) IT string normalization","title":"normalize_it"},{"location":"tnalagmes.lang.parse_pt/","text":"Module tnalagmes.lang.parse_pt Parse functions for Portuguese (PT-PT) TODO: numbers greater than 999999 TODO: date time pt extract_datetime_pt def extract_datetime_pt(input_str, currentDate) extractnumber_pt def extractnumber_pt(text) This function prepares the given text for parsing by making numbers consistent, getting rid of contractions, etc. Args: text (str): the string to normalize Returns: (int) or (float): The value of extracted number get_gender_pt def get_gender_pt(word, raw_string='') isFractional_pt def isFractional_pt(input_str) This function takes the given text and checks if it is a fraction. Args: text (str): the string to check if fractional Returns: (bool) or (float): False if not a fraction, otherwise the fraction normalize_pt def normalize_pt(text, remove_articles) PT string normalization pt_number_parse def pt_number_parse(words, i) pt_pruning def pt_pruning(text, symbols=True, accents=True, agressive=True)","title":"parse_pt"},{"location":"tnalagmes.lang.parse_pt/#module-tnalagmeslangparse_pt","text":"Parse functions for Portuguese (PT-PT) TODO: numbers greater than 999999 TODO: date time pt","title":"Module tnalagmes.lang.parse_pt"},{"location":"tnalagmes.lang.parse_pt/#extract95datetime95pt","text":"def extract_datetime_pt(input_str, currentDate)","title":"extract_datetime_pt"},{"location":"tnalagmes.lang.parse_pt/#extractnumber95pt","text":"def extractnumber_pt(text) This function prepares the given text for parsing by making numbers consistent, getting rid of contractions, etc. Args: text (str): the string to normalize Returns: (int) or (float): The value of extracted number","title":"extractnumber_pt"},{"location":"tnalagmes.lang.parse_pt/#get95gender95pt","text":"def get_gender_pt(word, raw_string='')","title":"get_gender_pt"},{"location":"tnalagmes.lang.parse_pt/#isfractional95pt","text":"def isFractional_pt(input_str) This function takes the given text and checks if it is a fraction. Args: text (str): the string to check if fractional Returns: (bool) or (float): False if not a fraction, otherwise the fraction","title":"isFractional_pt"},{"location":"tnalagmes.lang.parse_pt/#normalize95pt","text":"def normalize_pt(text, remove_articles) PT string normalization","title":"normalize_pt"},{"location":"tnalagmes.lang.parse_pt/#pt95number95parse","text":"def pt_number_parse(words, i)","title":"pt_number_parse"},{"location":"tnalagmes.lang.parse_pt/#pt95pruning","text":"def pt_pruning(text, symbols=True, accents=True, agressive=True)","title":"pt_pruning"},{"location":"tnalagmes.lang.parse_sv/","text":"Module tnalagmes.lang.parse_sv extract_datetime_sv def extract_datetime_sv(string, currentDate) extractnumber_sv def extractnumber_sv(text) This function prepares the given text for parsing by making numbers consistent, getting rid of contractions, etc. Args: text (str): the string to normalize Returns: (int) or (float): The value of extracted number is_fractional_sv def is_fractional_sv(input_str) This function takes the given text and checks if it is a fraction. Args: input_str (str): the string to check if fractional Returns: (bool) or (float): False if not a fraction, otherwise the fraction normalize_sv def normalize_sv(text, remove_articles) English string normalization","title":"parse_sv"},{"location":"tnalagmes.lang.parse_sv/#module-tnalagmeslangparse_sv","text":"","title":"Module tnalagmes.lang.parse_sv"},{"location":"tnalagmes.lang.parse_sv/#extract95datetime95sv","text":"def extract_datetime_sv(string, currentDate)","title":"extract_datetime_sv"},{"location":"tnalagmes.lang.parse_sv/#extractnumber95sv","text":"def extractnumber_sv(text) This function prepares the given text for parsing by making numbers consistent, getting rid of contractions, etc. Args: text (str): the string to normalize Returns: (int) or (float): The value of extracted number","title":"extractnumber_sv"},{"location":"tnalagmes.lang.parse_sv/#is95fractional95sv","text":"def is_fractional_sv(input_str) This function takes the given text and checks if it is a fraction. Args: input_str (str): the string to check if fractional Returns: (bool) or (float): False if not a fraction, otherwise the fraction","title":"is_fractional_sv"},{"location":"tnalagmes.lang.parse_sv/#normalize95sv","text":"def normalize_sv(text, remove_articles) English string normalization","title":"normalize_sv"},{"location":"tnalagmes.lang.phonemes_en/","text":"Module tnalagmes.lang.phonemes_en get_phonemes_en def get_phonemes_en(name) guess_phonemes_en def guess_phonemes_en(word)","title":"phonemes_en"},{"location":"tnalagmes.lang.phonemes_en/#module-tnalagmeslangphonemes_en","text":"","title":"Module tnalagmes.lang.phonemes_en"},{"location":"tnalagmes.lang.phonemes_en/#get95phonemes95en","text":"def get_phonemes_en(name)","title":"get_phonemes_en"},{"location":"tnalagmes.lang.phonemes_en/#guess95phonemes95en","text":"def guess_phonemes_en(word)","title":"guess_phonemes_en"},{"location":"tnalagmes.lang.translate/","text":"Module tnalagmes.lang.translate say_in_language def say_in_language(sentence, lang='en-us', wav_file='~/tnalagmes/translated') translate_text def translate_text(text, lang='en-us')","title":"translate"},{"location":"tnalagmes.lang.translate/#module-tnalagmeslangtranslate","text":"","title":"Module tnalagmes.lang.translate"},{"location":"tnalagmes.lang.translate/#say95in95language","text":"def say_in_language(sentence, lang='en-us', wav_file='~/tnalagmes/translated')","title":"say_in_language"},{"location":"tnalagmes.lang.translate/#translate95text","text":"def translate_text(text, lang='en-us')","title":"translate_text"},{"location":"tnalagmes.locale.en-us/","text":"Module tnalagmes.locale.en-us","title":"en-us"},{"location":"tnalagmes.locale.en-us/#module-tnalagmeslocaleen-us","text":"","title":"Module tnalagmes.locale.en-us"},{"location":"tnalagmes.locale/","text":"Module tnalagmes.locale Module tnalagmes.locale.en-us","title":"locale"},{"location":"tnalagmes.locale/#module-tnalagmeslocale","text":"","title":"Module tnalagmes.locale"},{"location":"tnalagmes.locale/#module-tnalagmeslocaleen-us","text":"","title":"Module tnalagmes.locale.en-us"},{"location":"tnalagmes.models.agents/","text":"Module tnalagmes.models.agents Agent None handle_hello def handle_hello(self, intent) interact_with def interact_with(self, construct) look_to def look_to(self, direction) on_start def on_start(self) on_turn def on_turn(self) register_default_intents def register_default_intents(self) take_damage def take_damage(self, dmg) ChatAgent None create_chatbot def create_chatbot(name=None) handle_hello def handle_hello(self, intent) interact_with def interact_with(self, construct) look_to def look_to(self, direction) on_start def on_start(self) on_turn def on_turn(self) register_default_intents def register_default_intents(self) take_damage def take_damage(self, dmg) NPC hello world what is your name attack take damage heal spend mana cast spell attack def attack(self) cast_spell def cast_spell(self) heal def heal(self, dmg) register_core_intents def register_core_intents(self) hello world take damage spend mana register_default_intents def register_default_intents(self) spend_mana def spend_mana(self, cost) take_damage def take_damage(self, dmg)","title":"agents"},{"location":"tnalagmes.models.agents/#module-tnalagmesmodelsagents","text":"","title":"Module tnalagmes.models.agents"},{"location":"tnalagmes.models.agents/#agent","text":"None","title":"Agent"},{"location":"tnalagmes.models.agents/#handle95hello","text":"def handle_hello(self, intent)","title":"handle_hello"},{"location":"tnalagmes.models.agents/#interact95with","text":"def interact_with(self, construct)","title":"interact_with"},{"location":"tnalagmes.models.agents/#look95to","text":"def look_to(self, direction)","title":"look_to"},{"location":"tnalagmes.models.agents/#on95start","text":"def on_start(self)","title":"on_start"},{"location":"tnalagmes.models.agents/#on95turn","text":"def on_turn(self)","title":"on_turn"},{"location":"tnalagmes.models.agents/#register95default95intents","text":"def register_default_intents(self)","title":"register_default_intents"},{"location":"tnalagmes.models.agents/#take95damage","text":"def take_damage(self, dmg)","title":"take_damage"},{"location":"tnalagmes.models.agents/#chatagent","text":"None","title":"ChatAgent"},{"location":"tnalagmes.models.agents/#create95chatbot","text":"def create_chatbot(name=None)","title":"create_chatbot"},{"location":"tnalagmes.models.agents/#handle95hello_1","text":"def handle_hello(self, intent)","title":"handle_hello"},{"location":"tnalagmes.models.agents/#interact95with_1","text":"def interact_with(self, construct)","title":"interact_with"},{"location":"tnalagmes.models.agents/#look95to_1","text":"def look_to(self, direction)","title":"look_to"},{"location":"tnalagmes.models.agents/#on95start_1","text":"def on_start(self)","title":"on_start"},{"location":"tnalagmes.models.agents/#on95turn_1","text":"def on_turn(self)","title":"on_turn"},{"location":"tnalagmes.models.agents/#register95default95intents_1","text":"def register_default_intents(self)","title":"register_default_intents"},{"location":"tnalagmes.models.agents/#take95damage_1","text":"def take_damage(self, dmg)","title":"take_damage"},{"location":"tnalagmes.models.agents/#npc","text":"hello world what is your name attack take damage heal spend mana cast spell","title":"NPC"},{"location":"tnalagmes.models.agents/#attack","text":"def attack(self)","title":"attack"},{"location":"tnalagmes.models.agents/#cast95spell","text":"def cast_spell(self)","title":"cast_spell"},{"location":"tnalagmes.models.agents/#heal","text":"def heal(self, dmg)","title":"heal"},{"location":"tnalagmes.models.agents/#register95core95intents","text":"def register_core_intents(self) hello world take damage spend mana","title":"register_core_intents"},{"location":"tnalagmes.models.agents/#register95default95intents_2","text":"def register_default_intents(self)","title":"register_default_intents"},{"location":"tnalagmes.models.agents/#spend95mana","text":"def spend_mana(self, cost)","title":"spend_mana"},{"location":"tnalagmes.models.agents/#take95damage_2","text":"def take_damage(self, dmg)","title":"take_damage"},{"location":"tnalagmes.models.battle/","text":"Module tnalagmes.models.battle Ability what is your _name what is your cost what is your damage what are you generate some damage generate_damage def generate_damage(self) register_core_intents def register_core_intents(self) what is your _name what is your cost what is your damage generate some damage","title":"battle"},{"location":"tnalagmes.models.battle/#module-tnalagmesmodelsbattle","text":"","title":"Module tnalagmes.models.battle"},{"location":"tnalagmes.models.battle/#ability","text":"what is your _name what is your cost what is your damage what are you generate some damage","title":"Ability"},{"location":"tnalagmes.models.battle/#generate95damage","text":"def generate_damage(self)","title":"generate_damage"},{"location":"tnalagmes.models.battle/#register95core95intents","text":"def register_core_intents(self) what is your _name what is your cost what is your damage generate some damage","title":"register_core_intents"},{"location":"tnalagmes.models/","text":"Module tnalagmes.models Module tnalagmes.models.agents Agent None handle_hello def handle_hello(self, intent) interact_with def interact_with(self, construct) look_to def look_to(self, direction) on_start def on_start(self) on_turn def on_turn(self) register_default_intents def register_default_intents(self) take_damage def take_damage(self, dmg) ChatAgent None create_chatbot def create_chatbot(name=None) handle_hello def handle_hello(self, intent) interact_with def interact_with(self, construct) look_to def look_to(self, direction) on_start def on_start(self) on_turn def on_turn(self) register_default_intents def register_default_intents(self) take_damage def take_damage(self, dmg) NPC hello world what is your name attack take damage heal spend mana cast spell attack def attack(self) cast_spell def cast_spell(self) heal def heal(self, dmg) register_core_intents def register_core_intents(self) hello world take damage spend mana register_default_intents def register_default_intents(self) spend_mana def spend_mana(self, cost) take_damage def take_damage(self, dmg) Module tnalagmes.models.battle Ability what is your _name what is your cost what is your damage what are you generate some damage generate_damage def generate_damage(self) register_core_intents def register_core_intents(self) what is your _name what is your cost what is your damage generate some damage Module tnalagmes.models.objects Calendar Calendar Object \"What day/date/week/weekday/month/year is it?\" \"next turn\" \"how many turns left\" \"how many turns passed\" \"how many days per turn\" \"maximum number of turns\" \"increase speed\" \"decrease speed\" \"rollback X days/months/weeks/years\" \"advance X days/months/weeks/years\" advance_date def advance_date(self) change_speed def change_speed(self, days_per_turn=0) handle_advance def handle_advance(self, intent) handle_date def handle_date(self, intent) NOTES: handlers for each natural language questions handle_day def handle_day(self, intent) handle_days_per_turn def handle_days_per_turn(self, intent) handle_month def handle_month(self, intent) handle_next_turn def handle_next_turn(self, intent) handle_rollback def handle_rollback(self, intent) handle_speed_decrease def handle_speed_decrease(self, intent) handle_speed_increase def handle_speed_increase(self, intent) handle_turns_current def handle_turns_current(self, intent) handle_turns_left def handle_turns_left(self, intent) handle_turns_max def handle_turns_max(self, intent) handle_turns_past def handle_turns_past(self, intent) handle_week def handle_week(self, intent) handle_weekday def handle_weekday(self, intent) handle_year def handle_year(self, intent) register_core_intents def register_core_intents(self) NOTES: in here register the word triggers im only using keyword rules instead of sample phrases literal strings are used as keywords if available on locale folder vocabulary is expanded rollback_date def rollback_date(self, rollback_days=None) Inventory what do you have how much money do you have how much are you worth print_inventory def print_inventory(self) print_warnings def print_warnings(self) register_core_intents def register_core_intents(self) what do you have how much money do you have how much are you worth spend def spend(self, cost) InventoryItem what are you what can you do how much are you worth add def add(self, value) register_core_intents def register_core_intents(self) what are you what can you do how much are you worth subtract def subtract(self, value) ProgressTracker \"total distance\" \"current mileage\" \"add mileage\" \"subtract mileage\" \"are you completed?\" \"current difficulty add_mileage def add_mileage(self, gained_ground) NOTES: this function should only be used for increases in mileage during a turn difficulty_triggered def difficulty_triggered(self) handle_add_mileage def handle_add_mileage(self, intent=None) handle_completed def handle_completed(self, intent=None) handle_mileage def handle_mileage(self, intent=None) handle_sub_mileage def handle_sub_mileage(self, intent=None) handle_total_distance def handle_total_distance(self, intent=None) print_mileage def print_mileage(self) random_advance def random_advance(self, seed=150) register_core_intents def register_core_intents(self) \"total distance\" \"current mileage\" \"add mileage\" \"subtract mileage\" \"are you completed?\" \"yes\" \"no\" subtract_mileage def subtract_mileage(self, lost_ground) Module tnalagmes.models.world PhysicsEngine None add_connection def add_connection(self, room, direction='front', message=None) NOTES: TODO add object / npc to scene get_item def get_item(self, item) handle_back def handle_back(self, intent) handle_describe def handle_describe(self, intent) :param intent: :return: handle_down def handle_down(self, intent) handle_east def handle_east(self, intent) handle_front def handle_front(self, intent) handle_get def handle_get(self, intent) handle_left def handle_left(self, intent) handle_look def handle_look(self, intent) handle_north def handle_north(self, intent) handle_northeast def handle_northeast(self, intent) handle_northwest def handle_northwest(self, intent) handle_right def handle_right(self, intent) handle_south def handle_south(self, intent) handle_southeast def handle_southeast(self, intent) handle_southweast def handle_southweast(self, intent) handle_talk def handle_talk(self, intent) handle_up def handle_up(self, intent) handle_west def handle_west(self, intent) place_player def place_player(self, scene_name=None) register_default_intents def register_default_intents(self) talk_to_npc def talk_to_npc(self, npc, utterance='hello') Scene None add_connection def add_connection(self, room, direction='front', message=None) NOTES: TODO add object / npc to scene get_item def get_item(self, item) handle_get def handle_get(self, intent) handle_look def handle_look(self, intent) handle_talk def handle_talk(self, intent) register_default_intents def register_default_intents(self) talk_to_npc def talk_to_npc(self, npc, utterance='hello') World None add_connection def add_connection(self, room, direction='front', message=None) NOTES: TODO add object / npc to scene get_item def get_item(self, item) handle_back def handle_back(self, intent) handle_describe def handle_describe(self, intent) :param intent: :return: handle_down def handle_down(self, intent) handle_east def handle_east(self, intent) handle_front def handle_front(self, intent) handle_get def handle_get(self, intent) handle_left def handle_left(self, intent) handle_look def handle_look(self, intent) handle_north def handle_north(self, intent) handle_northeast def handle_northeast(self, intent) handle_northwest def handle_northwest(self, intent) handle_right def handle_right(self, intent) handle_south def handle_south(self, intent) handle_southeast def handle_southeast(self, intent) handle_southweast def handle_southweast(self, intent) handle_talk def handle_talk(self, intent) handle_up def handle_up(self, intent) handle_west def handle_west(self, intent) place_player def place_player(self, scene_name=None) register_default_intents def register_default_intents(self) talk_to_npc def talk_to_npc(self, npc, utterance='hello')","title":"models"},{"location":"tnalagmes.models/#module-tnalagmesmodels","text":"","title":"Module tnalagmes.models"},{"location":"tnalagmes.models/#module-tnalagmesmodelsagents","text":"","title":"Module tnalagmes.models.agents"},{"location":"tnalagmes.models/#agent","text":"None","title":"Agent"},{"location":"tnalagmes.models/#handle95hello","text":"def handle_hello(self, intent)","title":"handle_hello"},{"location":"tnalagmes.models/#interact95with","text":"def interact_with(self, construct)","title":"interact_with"},{"location":"tnalagmes.models/#look95to","text":"def look_to(self, direction)","title":"look_to"},{"location":"tnalagmes.models/#on95start","text":"def on_start(self)","title":"on_start"},{"location":"tnalagmes.models/#on95turn","text":"def on_turn(self)","title":"on_turn"},{"location":"tnalagmes.models/#register95default95intents","text":"def register_default_intents(self)","title":"register_default_intents"},{"location":"tnalagmes.models/#take95damage","text":"def take_damage(self, dmg)","title":"take_damage"},{"location":"tnalagmes.models/#chatagent","text":"None","title":"ChatAgent"},{"location":"tnalagmes.models/#create95chatbot","text":"def create_chatbot(name=None)","title":"create_chatbot"},{"location":"tnalagmes.models/#handle95hello_1","text":"def handle_hello(self, intent)","title":"handle_hello"},{"location":"tnalagmes.models/#interact95with_1","text":"def interact_with(self, construct)","title":"interact_with"},{"location":"tnalagmes.models/#look95to_1","text":"def look_to(self, direction)","title":"look_to"},{"location":"tnalagmes.models/#on95start_1","text":"def on_start(self)","title":"on_start"},{"location":"tnalagmes.models/#on95turn_1","text":"def on_turn(self)","title":"on_turn"},{"location":"tnalagmes.models/#register95default95intents_1","text":"def register_default_intents(self)","title":"register_default_intents"},{"location":"tnalagmes.models/#take95damage_1","text":"def take_damage(self, dmg)","title":"take_damage"},{"location":"tnalagmes.models/#npc","text":"hello world what is your name attack take damage heal spend mana cast spell","title":"NPC"},{"location":"tnalagmes.models/#attack","text":"def attack(self)","title":"attack"},{"location":"tnalagmes.models/#cast95spell","text":"def cast_spell(self)","title":"cast_spell"},{"location":"tnalagmes.models/#heal","text":"def heal(self, dmg)","title":"heal"},{"location":"tnalagmes.models/#register95core95intents","text":"def register_core_intents(self) hello world take damage spend mana","title":"register_core_intents"},{"location":"tnalagmes.models/#register95default95intents_2","text":"def register_default_intents(self)","title":"register_default_intents"},{"location":"tnalagmes.models/#spend95mana","text":"def spend_mana(self, cost)","title":"spend_mana"},{"location":"tnalagmes.models/#take95damage_2","text":"def take_damage(self, dmg)","title":"take_damage"},{"location":"tnalagmes.models/#module-tnalagmesmodelsbattle","text":"","title":"Module tnalagmes.models.battle"},{"location":"tnalagmes.models/#ability","text":"what is your _name what is your cost what is your damage what are you generate some damage","title":"Ability"},{"location":"tnalagmes.models/#generate95damage","text":"def generate_damage(self)","title":"generate_damage"},{"location":"tnalagmes.models/#register95core95intents_1","text":"def register_core_intents(self) what is your _name what is your cost what is your damage generate some damage","title":"register_core_intents"},{"location":"tnalagmes.models/#module-tnalagmesmodelsobjects","text":"","title":"Module tnalagmes.models.objects"},{"location":"tnalagmes.models/#calendar","text":"Calendar Object \"What day/date/week/weekday/month/year is it?\" \"next turn\" \"how many turns left\" \"how many turns passed\" \"how many days per turn\" \"maximum number of turns\" \"increase speed\" \"decrease speed\" \"rollback X days/months/weeks/years\" \"advance X days/months/weeks/years\"","title":"Calendar"},{"location":"tnalagmes.models/#advance95date","text":"def advance_date(self)","title":"advance_date"},{"location":"tnalagmes.models/#change95speed","text":"def change_speed(self, days_per_turn=0)","title":"change_speed"},{"location":"tnalagmes.models/#handle95advance","text":"def handle_advance(self, intent)","title":"handle_advance"},{"location":"tnalagmes.models/#handle95date","text":"def handle_date(self, intent) NOTES: handlers for each natural language questions","title":"handle_date"},{"location":"tnalagmes.models/#handle95day","text":"def handle_day(self, intent)","title":"handle_day"},{"location":"tnalagmes.models/#handle95days95per95turn","text":"def handle_days_per_turn(self, intent)","title":"handle_days_per_turn"},{"location":"tnalagmes.models/#handle95month","text":"def handle_month(self, intent)","title":"handle_month"},{"location":"tnalagmes.models/#handle95next95turn","text":"def handle_next_turn(self, intent)","title":"handle_next_turn"},{"location":"tnalagmes.models/#handle95rollback","text":"def handle_rollback(self, intent)","title":"handle_rollback"},{"location":"tnalagmes.models/#handle95speed95decrease","text":"def handle_speed_decrease(self, intent)","title":"handle_speed_decrease"},{"location":"tnalagmes.models/#handle95speed95increase","text":"def handle_speed_increase(self, intent)","title":"handle_speed_increase"},{"location":"tnalagmes.models/#handle95turns95current","text":"def handle_turns_current(self, intent)","title":"handle_turns_current"},{"location":"tnalagmes.models/#handle95turns95left","text":"def handle_turns_left(self, intent)","title":"handle_turns_left"},{"location":"tnalagmes.models/#handle95turns95max","text":"def handle_turns_max(self, intent)","title":"handle_turns_max"},{"location":"tnalagmes.models/#handle95turns95past","text":"def handle_turns_past(self, intent)","title":"handle_turns_past"},{"location":"tnalagmes.models/#handle95week","text":"def handle_week(self, intent)","title":"handle_week"},{"location":"tnalagmes.models/#handle95weekday","text":"def handle_weekday(self, intent)","title":"handle_weekday"},{"location":"tnalagmes.models/#handle95year","text":"def handle_year(self, intent)","title":"handle_year"},{"location":"tnalagmes.models/#register95core95intents_2","text":"def register_core_intents(self) NOTES: in here register the word triggers im only using keyword rules instead of sample phrases literal strings are used as keywords if available on locale folder vocabulary is expanded","title":"register_core_intents"},{"location":"tnalagmes.models/#rollback95date","text":"def rollback_date(self, rollback_days=None)","title":"rollback_date"},{"location":"tnalagmes.models/#inventory","text":"what do you have how much money do you have how much are you worth","title":"Inventory"},{"location":"tnalagmes.models/#print95inventory","text":"def print_inventory(self)","title":"print_inventory"},{"location":"tnalagmes.models/#print95warnings","text":"def print_warnings(self)","title":"print_warnings"},{"location":"tnalagmes.models/#register95core95intents_3","text":"def register_core_intents(self) what do you have how much money do you have how much are you worth","title":"register_core_intents"},{"location":"tnalagmes.models/#spend","text":"def spend(self, cost)","title":"spend"},{"location":"tnalagmes.models/#inventoryitem","text":"what are you what can you do how much are you worth","title":"InventoryItem"},{"location":"tnalagmes.models/#add","text":"def add(self, value)","title":"add"},{"location":"tnalagmes.models/#register95core95intents_4","text":"def register_core_intents(self) what are you what can you do how much are you worth","title":"register_core_intents"},{"location":"tnalagmes.models/#subtract","text":"def subtract(self, value)","title":"subtract"},{"location":"tnalagmes.models/#progresstracker","text":"\"total distance\" \"current mileage\" \"add mileage\" \"subtract mileage\" \"are you completed?\" \"current difficulty","title":"ProgressTracker"},{"location":"tnalagmes.models/#add95mileage","text":"def add_mileage(self, gained_ground) NOTES: this function should only be used for increases in mileage during a turn","title":"add_mileage"},{"location":"tnalagmes.models/#difficulty95triggered","text":"def difficulty_triggered(self)","title":"difficulty_triggered"},{"location":"tnalagmes.models/#handle95add95mileage","text":"def handle_add_mileage(self, intent=None)","title":"handle_add_mileage"},{"location":"tnalagmes.models/#handle95completed","text":"def handle_completed(self, intent=None)","title":"handle_completed"},{"location":"tnalagmes.models/#handle95mileage","text":"def handle_mileage(self, intent=None)","title":"handle_mileage"},{"location":"tnalagmes.models/#handle95sub95mileage","text":"def handle_sub_mileage(self, intent=None)","title":"handle_sub_mileage"},{"location":"tnalagmes.models/#handle95total95distance","text":"def handle_total_distance(self, intent=None)","title":"handle_total_distance"},{"location":"tnalagmes.models/#print95mileage","text":"def print_mileage(self)","title":"print_mileage"},{"location":"tnalagmes.models/#random95advance","text":"def random_advance(self, seed=150)","title":"random_advance"},{"location":"tnalagmes.models/#register95core95intents_5","text":"def register_core_intents(self) \"total distance\" \"current mileage\" \"add mileage\" \"subtract mileage\" \"are you completed?\" \"yes\" \"no\"","title":"register_core_intents"},{"location":"tnalagmes.models/#subtract95mileage","text":"def subtract_mileage(self, lost_ground)","title":"subtract_mileage"},{"location":"tnalagmes.models/#module-tnalagmesmodelsworld","text":"","title":"Module tnalagmes.models.world"},{"location":"tnalagmes.models/#physicsengine","text":"None","title":"PhysicsEngine"},{"location":"tnalagmes.models/#add95connection","text":"def add_connection(self, room, direction='front', message=None) NOTES: TODO add object / npc to scene","title":"add_connection"},{"location":"tnalagmes.models/#get95item","text":"def get_item(self, item)","title":"get_item"},{"location":"tnalagmes.models/#handle95back","text":"def handle_back(self, intent)","title":"handle_back"},{"location":"tnalagmes.models/#handle95describe","text":"def handle_describe(self, intent) :param intent: :return:","title":"handle_describe"},{"location":"tnalagmes.models/#handle95down","text":"def handle_down(self, intent)","title":"handle_down"},{"location":"tnalagmes.models/#handle95east","text":"def handle_east(self, intent)","title":"handle_east"},{"location":"tnalagmes.models/#handle95front","text":"def handle_front(self, intent)","title":"handle_front"},{"location":"tnalagmes.models/#handle95get","text":"def handle_get(self, intent)","title":"handle_get"},{"location":"tnalagmes.models/#handle95left","text":"def handle_left(self, intent)","title":"handle_left"},{"location":"tnalagmes.models/#handle95look","text":"def handle_look(self, intent)","title":"handle_look"},{"location":"tnalagmes.models/#handle95north","text":"def handle_north(self, intent)","title":"handle_north"},{"location":"tnalagmes.models/#handle95northeast","text":"def handle_northeast(self, intent)","title":"handle_northeast"},{"location":"tnalagmes.models/#handle95northwest","text":"def handle_northwest(self, intent)","title":"handle_northwest"},{"location":"tnalagmes.models/#handle95right","text":"def handle_right(self, intent)","title":"handle_right"},{"location":"tnalagmes.models/#handle95south","text":"def handle_south(self, intent)","title":"handle_south"},{"location":"tnalagmes.models/#handle95southeast","text":"def handle_southeast(self, intent)","title":"handle_southeast"},{"location":"tnalagmes.models/#handle95southweast","text":"def handle_southweast(self, intent)","title":"handle_southweast"},{"location":"tnalagmes.models/#handle95talk","text":"def handle_talk(self, intent)","title":"handle_talk"},{"location":"tnalagmes.models/#handle95up","text":"def handle_up(self, intent)","title":"handle_up"},{"location":"tnalagmes.models/#handle95west","text":"def handle_west(self, intent)","title":"handle_west"},{"location":"tnalagmes.models/#place95player","text":"def place_player(self, scene_name=None)","title":"place_player"},{"location":"tnalagmes.models/#register95default95intents_3","text":"def register_default_intents(self)","title":"register_default_intents"},{"location":"tnalagmes.models/#talk95to95npc","text":"def talk_to_npc(self, npc, utterance='hello')","title":"talk_to_npc"},{"location":"tnalagmes.models/#scene","text":"None","title":"Scene"},{"location":"tnalagmes.models/#add95connection_1","text":"def add_connection(self, room, direction='front', message=None) NOTES: TODO add object / npc to scene","title":"add_connection"},{"location":"tnalagmes.models/#get95item_1","text":"def get_item(self, item)","title":"get_item"},{"location":"tnalagmes.models/#handle95get_1","text":"def handle_get(self, intent)","title":"handle_get"},{"location":"tnalagmes.models/#handle95look_1","text":"def handle_look(self, intent)","title":"handle_look"},{"location":"tnalagmes.models/#handle95talk_1","text":"def handle_talk(self, intent)","title":"handle_talk"},{"location":"tnalagmes.models/#register95default95intents_4","text":"def register_default_intents(self)","title":"register_default_intents"},{"location":"tnalagmes.models/#talk95to95npc_1","text":"def talk_to_npc(self, npc, utterance='hello')","title":"talk_to_npc"},{"location":"tnalagmes.models/#world","text":"None","title":"World"},{"location":"tnalagmes.models/#add95connection_2","text":"def add_connection(self, room, direction='front', message=None) NOTES: TODO add object / npc to scene","title":"add_connection"},{"location":"tnalagmes.models/#get95item_2","text":"def get_item(self, item)","title":"get_item"},{"location":"tnalagmes.models/#handle95back_1","text":"def handle_back(self, intent)","title":"handle_back"},{"location":"tnalagmes.models/#handle95describe_1","text":"def handle_describe(self, intent) :param intent: :return:","title":"handle_describe"},{"location":"tnalagmes.models/#handle95down_1","text":"def handle_down(self, intent)","title":"handle_down"},{"location":"tnalagmes.models/#handle95east_1","text":"def handle_east(self, intent)","title":"handle_east"},{"location":"tnalagmes.models/#handle95front_1","text":"def handle_front(self, intent)","title":"handle_front"},{"location":"tnalagmes.models/#handle95get_2","text":"def handle_get(self, intent)","title":"handle_get"},{"location":"tnalagmes.models/#handle95left_1","text":"def handle_left(self, intent)","title":"handle_left"},{"location":"tnalagmes.models/#handle95look_2","text":"def handle_look(self, intent)","title":"handle_look"},{"location":"tnalagmes.models/#handle95north_1","text":"def handle_north(self, intent)","title":"handle_north"},{"location":"tnalagmes.models/#handle95northeast_1","text":"def handle_northeast(self, intent)","title":"handle_northeast"},{"location":"tnalagmes.models/#handle95northwest_1","text":"def handle_northwest(self, intent)","title":"handle_northwest"},{"location":"tnalagmes.models/#handle95right_1","text":"def handle_right(self, intent)","title":"handle_right"},{"location":"tnalagmes.models/#handle95south_1","text":"def handle_south(self, intent)","title":"handle_south"},{"location":"tnalagmes.models/#handle95southeast_1","text":"def handle_southeast(self, intent)","title":"handle_southeast"},{"location":"tnalagmes.models/#handle95southweast_1","text":"def handle_southweast(self, intent)","title":"handle_southweast"},{"location":"tnalagmes.models/#handle95talk_2","text":"def handle_talk(self, intent)","title":"handle_talk"},{"location":"tnalagmes.models/#handle95up_1","text":"def handle_up(self, intent)","title":"handle_up"},{"location":"tnalagmes.models/#handle95west_1","text":"def handle_west(self, intent)","title":"handle_west"},{"location":"tnalagmes.models/#place95player_1","text":"def place_player(self, scene_name=None)","title":"place_player"},{"location":"tnalagmes.models/#register95default95intents_5","text":"def register_default_intents(self)","title":"register_default_intents"},{"location":"tnalagmes.models/#talk95to95npc_2","text":"def talk_to_npc(self, npc, utterance='hello')","title":"talk_to_npc"},{"location":"tnalagmes.models.objects/","text":"Module tnalagmes.models.objects Calendar Calendar Object \"What day/date/week/weekday/month/year is it?\" \"next turn\" \"how many turns left\" \"how many turns passed\" \"how many days per turn\" \"maximum number of turns\" \"increase speed\" \"decrease speed\" \"rollback X days/months/weeks/years\" \"advance X days/months/weeks/years\" advance_date def advance_date(self) change_speed def change_speed(self, days_per_turn=0) handle_advance def handle_advance(self, intent) handle_date def handle_date(self, intent) NOTES: handlers for each natural language questions handle_day def handle_day(self, intent) handle_days_per_turn def handle_days_per_turn(self, intent) handle_month def handle_month(self, intent) handle_next_turn def handle_next_turn(self, intent) handle_rollback def handle_rollback(self, intent) handle_speed_decrease def handle_speed_decrease(self, intent) handle_speed_increase def handle_speed_increase(self, intent) handle_turns_current def handle_turns_current(self, intent) handle_turns_left def handle_turns_left(self, intent) handle_turns_max def handle_turns_max(self, intent) handle_turns_past def handle_turns_past(self, intent) handle_week def handle_week(self, intent) handle_weekday def handle_weekday(self, intent) handle_year def handle_year(self, intent) register_core_intents def register_core_intents(self) NOTES: in here register the word triggers im only using keyword rules instead of sample phrases literal strings are used as keywords if available on locale folder vocabulary is expanded rollback_date def rollback_date(self, rollback_days=None) Inventory what do you have how much money do you have how much are you worth print_inventory def print_inventory(self) print_warnings def print_warnings(self) register_core_intents def register_core_intents(self) what do you have how much money do you have how much are you worth spend def spend(self, cost) InventoryItem what are you what can you do how much are you worth add def add(self, value) register_core_intents def register_core_intents(self) what are you what can you do how much are you worth subtract def subtract(self, value) ProgressTracker \"total distance\" \"current mileage\" \"add mileage\" \"subtract mileage\" \"are you completed?\" \"current difficulty add_mileage def add_mileage(self, gained_ground) NOTES: this function should only be used for increases in mileage during a turn difficulty_triggered def difficulty_triggered(self) handle_add_mileage def handle_add_mileage(self, intent=None) handle_completed def handle_completed(self, intent=None) handle_mileage def handle_mileage(self, intent=None) handle_sub_mileage def handle_sub_mileage(self, intent=None) handle_total_distance def handle_total_distance(self, intent=None) print_mileage def print_mileage(self) random_advance def random_advance(self, seed=150) register_core_intents def register_core_intents(self) \"total distance\" \"current mileage\" \"add mileage\" \"subtract mileage\" \"are you completed?\" \"yes\" \"no\" subtract_mileage def subtract_mileage(self, lost_ground)","title":"objects"},{"location":"tnalagmes.models.objects/#module-tnalagmesmodelsobjects","text":"","title":"Module tnalagmes.models.objects"},{"location":"tnalagmes.models.objects/#calendar","text":"Calendar Object \"What day/date/week/weekday/month/year is it?\" \"next turn\" \"how many turns left\" \"how many turns passed\" \"how many days per turn\" \"maximum number of turns\" \"increase speed\" \"decrease speed\" \"rollback X days/months/weeks/years\" \"advance X days/months/weeks/years\"","title":"Calendar"},{"location":"tnalagmes.models.objects/#advance95date","text":"def advance_date(self)","title":"advance_date"},{"location":"tnalagmes.models.objects/#change95speed","text":"def change_speed(self, days_per_turn=0)","title":"change_speed"},{"location":"tnalagmes.models.objects/#handle95advance","text":"def handle_advance(self, intent)","title":"handle_advance"},{"location":"tnalagmes.models.objects/#handle95date","text":"def handle_date(self, intent) NOTES: handlers for each natural language questions","title":"handle_date"},{"location":"tnalagmes.models.objects/#handle95day","text":"def handle_day(self, intent)","title":"handle_day"},{"location":"tnalagmes.models.objects/#handle95days95per95turn","text":"def handle_days_per_turn(self, intent)","title":"handle_days_per_turn"},{"location":"tnalagmes.models.objects/#handle95month","text":"def handle_month(self, intent)","title":"handle_month"},{"location":"tnalagmes.models.objects/#handle95next95turn","text":"def handle_next_turn(self, intent)","title":"handle_next_turn"},{"location":"tnalagmes.models.objects/#handle95rollback","text":"def handle_rollback(self, intent)","title":"handle_rollback"},{"location":"tnalagmes.models.objects/#handle95speed95decrease","text":"def handle_speed_decrease(self, intent)","title":"handle_speed_decrease"},{"location":"tnalagmes.models.objects/#handle95speed95increase","text":"def handle_speed_increase(self, intent)","title":"handle_speed_increase"},{"location":"tnalagmes.models.objects/#handle95turns95current","text":"def handle_turns_current(self, intent)","title":"handle_turns_current"},{"location":"tnalagmes.models.objects/#handle95turns95left","text":"def handle_turns_left(self, intent)","title":"handle_turns_left"},{"location":"tnalagmes.models.objects/#handle95turns95max","text":"def handle_turns_max(self, intent)","title":"handle_turns_max"},{"location":"tnalagmes.models.objects/#handle95turns95past","text":"def handle_turns_past(self, intent)","title":"handle_turns_past"},{"location":"tnalagmes.models.objects/#handle95week","text":"def handle_week(self, intent)","title":"handle_week"},{"location":"tnalagmes.models.objects/#handle95weekday","text":"def handle_weekday(self, intent)","title":"handle_weekday"},{"location":"tnalagmes.models.objects/#handle95year","text":"def handle_year(self, intent)","title":"handle_year"},{"location":"tnalagmes.models.objects/#register95core95intents","text":"def register_core_intents(self) NOTES: in here register the word triggers im only using keyword rules instead of sample phrases literal strings are used as keywords if available on locale folder vocabulary is expanded","title":"register_core_intents"},{"location":"tnalagmes.models.objects/#rollback95date","text":"def rollback_date(self, rollback_days=None)","title":"rollback_date"},{"location":"tnalagmes.models.objects/#inventory","text":"what do you have how much money do you have how much are you worth","title":"Inventory"},{"location":"tnalagmes.models.objects/#print95inventory","text":"def print_inventory(self)","title":"print_inventory"},{"location":"tnalagmes.models.objects/#print95warnings","text":"def print_warnings(self)","title":"print_warnings"},{"location":"tnalagmes.models.objects/#register95core95intents_1","text":"def register_core_intents(self) what do you have how much money do you have how much are you worth","title":"register_core_intents"},{"location":"tnalagmes.models.objects/#spend","text":"def spend(self, cost)","title":"spend"},{"location":"tnalagmes.models.objects/#inventoryitem","text":"what are you what can you do how much are you worth","title":"InventoryItem"},{"location":"tnalagmes.models.objects/#add","text":"def add(self, value)","title":"add"},{"location":"tnalagmes.models.objects/#register95core95intents_2","text":"def register_core_intents(self) what are you what can you do how much are you worth","title":"register_core_intents"},{"location":"tnalagmes.models.objects/#subtract","text":"def subtract(self, value)","title":"subtract"},{"location":"tnalagmes.models.objects/#progresstracker","text":"\"total distance\" \"current mileage\" \"add mileage\" \"subtract mileage\" \"are you completed?\" \"current difficulty","title":"ProgressTracker"},{"location":"tnalagmes.models.objects/#add95mileage","text":"def add_mileage(self, gained_ground) NOTES: this function should only be used for increases in mileage during a turn","title":"add_mileage"},{"location":"tnalagmes.models.objects/#difficulty95triggered","text":"def difficulty_triggered(self)","title":"difficulty_triggered"},{"location":"tnalagmes.models.objects/#handle95add95mileage","text":"def handle_add_mileage(self, intent=None)","title":"handle_add_mileage"},{"location":"tnalagmes.models.objects/#handle95completed","text":"def handle_completed(self, intent=None)","title":"handle_completed"},{"location":"tnalagmes.models.objects/#handle95mileage","text":"def handle_mileage(self, intent=None)","title":"handle_mileage"},{"location":"tnalagmes.models.objects/#handle95sub95mileage","text":"def handle_sub_mileage(self, intent=None)","title":"handle_sub_mileage"},{"location":"tnalagmes.models.objects/#handle95total95distance","text":"def handle_total_distance(self, intent=None)","title":"handle_total_distance"},{"location":"tnalagmes.models.objects/#print95mileage","text":"def print_mileage(self)","title":"print_mileage"},{"location":"tnalagmes.models.objects/#random95advance","text":"def random_advance(self, seed=150)","title":"random_advance"},{"location":"tnalagmes.models.objects/#register95core95intents_3","text":"def register_core_intents(self) \"total distance\" \"current mileage\" \"add mileage\" \"subtract mileage\" \"are you completed?\" \"yes\" \"no\"","title":"register_core_intents"},{"location":"tnalagmes.models.objects/#subtract95mileage","text":"def subtract_mileage(self, lost_ground)","title":"subtract_mileage"},{"location":"tnalagmes.models.world/","text":"Module tnalagmes.models.world PhysicsEngine None add_connection def add_connection(self, room, direction='front', message=None) NOTES: TODO add object / npc to scene get_item def get_item(self, item) handle_back def handle_back(self, intent) handle_describe def handle_describe(self, intent) :param intent: :return: handle_down def handle_down(self, intent) handle_east def handle_east(self, intent) handle_front def handle_front(self, intent) handle_get def handle_get(self, intent) handle_left def handle_left(self, intent) handle_look def handle_look(self, intent) handle_north def handle_north(self, intent) handle_northeast def handle_northeast(self, intent) handle_northwest def handle_northwest(self, intent) handle_right def handle_right(self, intent) handle_south def handle_south(self, intent) handle_southeast def handle_southeast(self, intent) handle_southweast def handle_southweast(self, intent) handle_talk def handle_talk(self, intent) handle_up def handle_up(self, intent) handle_west def handle_west(self, intent) place_player def place_player(self, scene_name=None) register_default_intents def register_default_intents(self) talk_to_npc def talk_to_npc(self, npc, utterance='hello') Scene None add_connection def add_connection(self, room, direction='front', message=None) NOTES: TODO add object / npc to scene get_item def get_item(self, item) handle_get def handle_get(self, intent) handle_look def handle_look(self, intent) handle_talk def handle_talk(self, intent) register_default_intents def register_default_intents(self) talk_to_npc def talk_to_npc(self, npc, utterance='hello') World None add_connection def add_connection(self, room, direction='front', message=None) NOTES: TODO add object / npc to scene get_item def get_item(self, item) handle_back def handle_back(self, intent) handle_describe def handle_describe(self, intent) :param intent: :return: handle_down def handle_down(self, intent) handle_east def handle_east(self, intent) handle_front def handle_front(self, intent) handle_get def handle_get(self, intent) handle_left def handle_left(self, intent) handle_look def handle_look(self, intent) handle_north def handle_north(self, intent) handle_northeast def handle_northeast(self, intent) handle_northwest def handle_northwest(self, intent) handle_right def handle_right(self, intent) handle_south def handle_south(self, intent) handle_southeast def handle_southeast(self, intent) handle_southweast def handle_southweast(self, intent) handle_talk def handle_talk(self, intent) handle_up def handle_up(self, intent) handle_west def handle_west(self, intent) place_player def place_player(self, scene_name=None) register_default_intents def register_default_intents(self) talk_to_npc def talk_to_npc(self, npc, utterance='hello')","title":"world"},{"location":"tnalagmes.models.world/#module-tnalagmesmodelsworld","text":"","title":"Module tnalagmes.models.world"},{"location":"tnalagmes.models.world/#physicsengine","text":"None","title":"PhysicsEngine"},{"location":"tnalagmes.models.world/#add95connection","text":"def add_connection(self, room, direction='front', message=None) NOTES: TODO add object / npc to scene","title":"add_connection"},{"location":"tnalagmes.models.world/#get95item","text":"def get_item(self, item)","title":"get_item"},{"location":"tnalagmes.models.world/#handle95back","text":"def handle_back(self, intent)","title":"handle_back"},{"location":"tnalagmes.models.world/#handle95describe","text":"def handle_describe(self, intent) :param intent: :return:","title":"handle_describe"},{"location":"tnalagmes.models.world/#handle95down","text":"def handle_down(self, intent)","title":"handle_down"},{"location":"tnalagmes.models.world/#handle95east","text":"def handle_east(self, intent)","title":"handle_east"},{"location":"tnalagmes.models.world/#handle95front","text":"def handle_front(self, intent)","title":"handle_front"},{"location":"tnalagmes.models.world/#handle95get","text":"def handle_get(self, intent)","title":"handle_get"},{"location":"tnalagmes.models.world/#handle95left","text":"def handle_left(self, intent)","title":"handle_left"},{"location":"tnalagmes.models.world/#handle95look","text":"def handle_look(self, intent)","title":"handle_look"},{"location":"tnalagmes.models.world/#handle95north","text":"def handle_north(self, intent)","title":"handle_north"},{"location":"tnalagmes.models.world/#handle95northeast","text":"def handle_northeast(self, intent)","title":"handle_northeast"},{"location":"tnalagmes.models.world/#handle95northwest","text":"def handle_northwest(self, intent)","title":"handle_northwest"},{"location":"tnalagmes.models.world/#handle95right","text":"def handle_right(self, intent)","title":"handle_right"},{"location":"tnalagmes.models.world/#handle95south","text":"def handle_south(self, intent)","title":"handle_south"},{"location":"tnalagmes.models.world/#handle95southeast","text":"def handle_southeast(self, intent)","title":"handle_southeast"},{"location":"tnalagmes.models.world/#handle95southweast","text":"def handle_southweast(self, intent)","title":"handle_southweast"},{"location":"tnalagmes.models.world/#handle95talk","text":"def handle_talk(self, intent)","title":"handle_talk"},{"location":"tnalagmes.models.world/#handle95up","text":"def handle_up(self, intent)","title":"handle_up"},{"location":"tnalagmes.models.world/#handle95west","text":"def handle_west(self, intent)","title":"handle_west"},{"location":"tnalagmes.models.world/#place95player","text":"def place_player(self, scene_name=None)","title":"place_player"},{"location":"tnalagmes.models.world/#register95default95intents","text":"def register_default_intents(self)","title":"register_default_intents"},{"location":"tnalagmes.models.world/#talk95to95npc","text":"def talk_to_npc(self, npc, utterance='hello')","title":"talk_to_npc"},{"location":"tnalagmes.models.world/#scene","text":"None","title":"Scene"},{"location":"tnalagmes.models.world/#add95connection_1","text":"def add_connection(self, room, direction='front', message=None) NOTES: TODO add object / npc to scene","title":"add_connection"},{"location":"tnalagmes.models.world/#get95item_1","text":"def get_item(self, item)","title":"get_item"},{"location":"tnalagmes.models.world/#handle95get_1","text":"def handle_get(self, intent)","title":"handle_get"},{"location":"tnalagmes.models.world/#handle95look_1","text":"def handle_look(self, intent)","title":"handle_look"},{"location":"tnalagmes.models.world/#handle95talk_1","text":"def handle_talk(self, intent)","title":"handle_talk"},{"location":"tnalagmes.models.world/#register95default95intents_1","text":"def register_default_intents(self)","title":"register_default_intents"},{"location":"tnalagmes.models.world/#talk95to95npc_1","text":"def talk_to_npc(self, npc, utterance='hello')","title":"talk_to_npc"},{"location":"tnalagmes.models.world/#world","text":"None","title":"World"},{"location":"tnalagmes.models.world/#add95connection_2","text":"def add_connection(self, room, direction='front', message=None) NOTES: TODO add object / npc to scene","title":"add_connection"},{"location":"tnalagmes.models.world/#get95item_2","text":"def get_item(self, item)","title":"get_item"},{"location":"tnalagmes.models.world/#handle95back_1","text":"def handle_back(self, intent)","title":"handle_back"},{"location":"tnalagmes.models.world/#handle95describe_1","text":"def handle_describe(self, intent) :param intent: :return:","title":"handle_describe"},{"location":"tnalagmes.models.world/#handle95down_1","text":"def handle_down(self, intent)","title":"handle_down"},{"location":"tnalagmes.models.world/#handle95east_1","text":"def handle_east(self, intent)","title":"handle_east"},{"location":"tnalagmes.models.world/#handle95front_1","text":"def handle_front(self, intent)","title":"handle_front"},{"location":"tnalagmes.models.world/#handle95get_2","text":"def handle_get(self, intent)","title":"handle_get"},{"location":"tnalagmes.models.world/#handle95left_1","text":"def handle_left(self, intent)","title":"handle_left"},{"location":"tnalagmes.models.world/#handle95look_2","text":"def handle_look(self, intent)","title":"handle_look"},{"location":"tnalagmes.models.world/#handle95north_1","text":"def handle_north(self, intent)","title":"handle_north"},{"location":"tnalagmes.models.world/#handle95northeast_1","text":"def handle_northeast(self, intent)","title":"handle_northeast"},{"location":"tnalagmes.models.world/#handle95northwest_1","text":"def handle_northwest(self, intent)","title":"handle_northwest"},{"location":"tnalagmes.models.world/#handle95right_1","text":"def handle_right(self, intent)","title":"handle_right"},{"location":"tnalagmes.models.world/#handle95south_1","text":"def handle_south(self, intent)","title":"handle_south"},{"location":"tnalagmes.models.world/#handle95southeast_1","text":"def handle_southeast(self, intent)","title":"handle_southeast"},{"location":"tnalagmes.models.world/#handle95southweast_1","text":"def handle_southweast(self, intent)","title":"handle_southweast"},{"location":"tnalagmes.models.world/#handle95talk_2","text":"def handle_talk(self, intent)","title":"handle_talk"},{"location":"tnalagmes.models.world/#handle95up_1","text":"def handle_up(self, intent)","title":"handle_up"},{"location":"tnalagmes.models.world/#handle95west_1","text":"def handle_west(self, intent)","title":"handle_west"},{"location":"tnalagmes.models.world/#place95player_1","text":"def place_player(self, scene_name=None)","title":"place_player"},{"location":"tnalagmes.models.world/#register95default95intents_2","text":"def register_default_intents(self)","title":"register_default_intents"},{"location":"tnalagmes.models.world/#talk95to95npc_2","text":"def talk_to_npc(self, npc, utterance='hello')","title":"talk_to_npc"},{"location":"tnalagmes.util.log/","text":"Module tnalagmes.util.log LOG Custom logger class that acts like logging.Logger The logger name is automatically generated by the module of the caller Usage: >>> LOG.debug('My message: %s', debug_str) 13:12:43.673 - : :1 - DEBUG - My message: hi >>> LOG('custom_name').debug('Another message') 13:13:10.462 - custom_name - DEBUG - Another message create_logger def create_logger(name) debug def debug(*args, **kwargs) Log 'msg % args' with severity 'DEBUG'. To pass exception information, use the keyword argument exc_info with a true value, e.g. logger.debug(\"Houston, we have a %s\", \"thorny problem\", exc_info=1) error def error(*args, **kwargs) Log 'msg % args' with severity 'ERROR'. To pass exception information, use the keyword argument exc_info with a true value, e.g. logger.error(\"Houston, we have a %s\", \"major problem\", exc_info=1) exception def exception(*args, **kwargs) Convenience method for logging an ERROR with exception information. info def info(*args, **kwargs) Log 'msg % args' with severity 'INFO'. To pass exception information, use the keyword argument exc_info with a true value, e.g. logger.info(\"Houston, we have a %s\", \"interesting problem\", exc_info=1) init def init() warning def warning(*args, **kwargs) Log 'msg % args' with severity 'WARNING'. To pass exception information, use the keyword argument exc_info with a true value, e.g. logger.warning(\"Houston, we have a %s\", \"bit of a problem\", exc_info=1)","title":"log"},{"location":"tnalagmes.util.log/#module-tnalagmesutillog","text":"","title":"Module tnalagmes.util.log"},{"location":"tnalagmes.util.log/#log","text":"Custom logger class that acts like logging.Logger The logger name is automatically generated by the module of the caller Usage: >>> LOG.debug('My message: %s', debug_str) 13:12:43.673 - : :1 - DEBUG - My message: hi >>> LOG('custom_name').debug('Another message') 13:13:10.462 - custom_name - DEBUG - Another message","title":"LOG"},{"location":"tnalagmes.util.log/#create95logger","text":"def create_logger(name)","title":"create_logger"},{"location":"tnalagmes.util.log/#debug","text":"def debug(*args, **kwargs) Log 'msg % args' with severity 'DEBUG'. To pass exception information, use the keyword argument exc_info with a true value, e.g. logger.debug(\"Houston, we have a %s\", \"thorny problem\", exc_info=1)","title":"debug"},{"location":"tnalagmes.util.log/#error","text":"def error(*args, **kwargs) Log 'msg % args' with severity 'ERROR'. To pass exception information, use the keyword argument exc_info with a true value, e.g. logger.error(\"Houston, we have a %s\", \"major problem\", exc_info=1)","title":"error"},{"location":"tnalagmes.util.log/#exception","text":"def exception(*args, **kwargs) Convenience method for logging an ERROR with exception information.","title":"exception"},{"location":"tnalagmes.util.log/#info","text":"def info(*args, **kwargs) Log 'msg % args' with severity 'INFO'. To pass exception information, use the keyword argument exc_info with a true value, e.g. logger.info(\"Houston, we have a %s\", \"interesting problem\", exc_info=1)","title":"info"},{"location":"tnalagmes.util.log/#init","text":"def init()","title":"init"},{"location":"tnalagmes.util.log/#warning","text":"def warning(*args, **kwargs) Log 'msg % args' with severity 'WARNING'. To pass exception information, use the keyword argument exc_info with a true value, e.g. logger.warning(\"Houston, we have a %s\", \"bit of a problem\", exc_info=1)","title":"warning"},{"location":"tnalagmes.util/","text":"Module tnalagmes.util camel_case_split def camel_case_split(identifier:str) -> str Split camel case string create_daemon def create_daemon(target, args=(), kwargs=None) Helper to quickly create and start a thread with daemon = True curate_cache def curate_cache(directory, min_free_percent=5.0, min_free_disk=50) Clear out the directory if needed This assumes all the files in the directory can be deleted as freely Args: directory (str): directory path that holds cached files min_free_percent (float): percentage (0.0-100.0) of drive to keep free, default is 5% if not specified. min_free_disk (float): minimum allowed disk space in MB, default value is 50 MB if not specified. get_arch def get_arch() Get architecture string of system. get_cache_directory def get_cache_directory(dir=None, domain=None) Get a directory for caching data This directory can be used to hold temporary caches of data to speed up performance. This directory will likely be part of a small RAM disk and may be cleared at any time. So code that uses these cached files must be able to fallback and regenerate the file. Args: domain (str): The cache domain. Basically just a subdirectory. Return: str: a path to the directory where you can cache data get_http def get_http(uri) play_mp3 def play_mp3(uri) play_ogg def play_ogg(uri) play_wav def play_wav(uri) read_dict def read_dict(filename, div='=') read_stripped_lines def read_stripped_lines(filename) record def record(file_path, duration, rate, channels) remove_last_slash def remove_last_slash(url) reset_sigint_handler def reset_sigint_handler() Reset the sigint handler to the default. This fixes KeyboardInterrupt not getting raised when started via start-mycroft.sh resolve_resource_file def resolve_resource_file(res_name, lang='en-us') Convert a resource into an absolute filename. Resource names are in the form: 'filename.ext' or 'path/filename.ext' or 'file name' Args: res_name (str): a resource path/name wait_for_exit_signal def wait_for_exit_signal() Blocks until KeyboardInterrupt is received Module tnalagmes.util.log LOG Custom logger class that acts like logging.Logger The logger name is automatically generated by the module of the caller Usage: >>> LOG.debug('My message: %s', debug_str) 13:12:43.673 - : :1 - DEBUG - My message: hi >>> LOG('custom_name').debug('Another message') 13:13:10.462 - custom_name - DEBUG - Another message create_logger def create_logger(name) debug def debug(*args, **kwargs) Log 'msg % args' with severity 'DEBUG'. To pass exception information, use the keyword argument exc_info with a true value, e.g. logger.debug(\"Houston, we have a %s\", \"thorny problem\", exc_info=1) error def error(*args, **kwargs) Log 'msg % args' with severity 'ERROR'. To pass exception information, use the keyword argument exc_info with a true value, e.g. logger.error(\"Houston, we have a %s\", \"major problem\", exc_info=1) exception def exception(*args, **kwargs) Convenience method for logging an ERROR with exception information. info def info(*args, **kwargs) Log 'msg % args' with severity 'INFO'. To pass exception information, use the keyword argument exc_info with a true value, e.g. logger.info(\"Houston, we have a %s\", \"interesting problem\", exc_info=1) init def init() warning def warning(*args, **kwargs) Log 'msg % args' with severity 'WARNING'. To pass exception information, use the keyword argument exc_info with a true value, e.g. logger.warning(\"Houston, we have a %s\", \"bit of a problem\", exc_info=1) Module tnalagmes.util.nlp NER def NER(text) replace_coreferences def replace_coreferences(text) textual_entailment def textual_entailment(premise, hypothesis) Textual Entailment (TE) takes a pair of sentences and predicts whether the facts in the first necessarily imply the facts in the second one. The AllenNLP toolkit provides the following TE visualization, which can be run for any TE model you develop. This page demonstrates a reimplementation of the decomposable attention model (Parikh et al, 2017) , which was state of the art for the SNLI benchmark (short sentences about visual scenes) in 2016. Rather than pre-trained Glove vectors, this model uses ELMo embeddings, which are completely character based and improve performance by 2% :param premise: :param hypotheses: :return: Module tnalagmes.util.phonemes get_phonemes def get_phonemes(name, lang='en-us') guess_phonemes def guess_phonemes(word, lang='en-us') NOTES: guessing phonemes rule-based Module tnalagmes.util.signal check_for_signal def check_for_signal(signal_name, sec_lifetime=0) See if a named signal exists Args: signal_name (str): The signal's name. Must only contain characters valid in filenames. sec_lifetime (int, optional): How many seconds the signal should remain valid. If 0 or not specified, it is a single-use signal. If -1, it never expires. Returns: bool: True if the signal is defined, False otherwise create_file def create_file(filename) Create the file filename and create any directories needed Args: filename: Path to the file to be created create_signal def create_signal(signal_name) Create a named signal Args: signal_name (str): The signal's name. Must only contain characters valid in filenames. ensure_directory_exists def ensure_directory_exists(directory, domain=None) Create a directory and give access rights to all Args: domain (str): The IPC domain. Basically a subdirectory to prevent overlapping signal filenames. Returns: str: a path to the directory get_ipc_directory def get_ipc_directory(domain=None, dir=None) Get the directory used for Inter Process Communication Files in this folder can be accessed by different processes on the machine. Useful for communication. This is often a small RAM disk. Args: domain (str): The IPC domain. Basically a subdirectory to prevent overlapping signal filenames. Returns: str: a path to the IPC directory Module tnalagmes.util.time default_timezone def default_timezone() Get the default timezone Returns: (datetime.tzinfo): Definition of the default timezone get_timedelta def get_timedelta(dt, anchor=None) Get a datetime object or a int() Epoch timestamp and return a timedelta now_local def now_local(tz=None) Retrieve the current time Args: tz (datetime.tzinfo, optional): Timezone, default to user's settings Returns: (datetime): The current time now_utc def now_utc() Retrieve the current time in UTC Returns: (datetime): The current time in Universal Time, aka GMT to_local def to_local(dt) Convert a datetime to the user's local timezone Args: dt (datetime): A datetime (if no timezone, defaults to UTC) Returns: (datetime): time converted to the local timezone to_utc def to_utc(dt) Convert a datetime with timezone info to a UTC datetime Args: dt (datetime): A datetime (presumably in some local zone) Returns: (datetime): time converted to UTC","title":"util"},{"location":"tnalagmes.util/#module-tnalagmesutil","text":"","title":"Module tnalagmes.util"},{"location":"tnalagmes.util/#camel95case95split","text":"def camel_case_split(identifier:str) -> str Split camel case string","title":"camel_case_split"},{"location":"tnalagmes.util/#create95daemon","text":"def create_daemon(target, args=(), kwargs=None) Helper to quickly create and start a thread with daemon = True","title":"create_daemon"},{"location":"tnalagmes.util/#curate95cache","text":"def curate_cache(directory, min_free_percent=5.0, min_free_disk=50) Clear out the directory if needed This assumes all the files in the directory can be deleted as freely Args: directory (str): directory path that holds cached files min_free_percent (float): percentage (0.0-100.0) of drive to keep free, default is 5% if not specified. min_free_disk (float): minimum allowed disk space in MB, default value is 50 MB if not specified.","title":"curate_cache"},{"location":"tnalagmes.util/#get95arch","text":"def get_arch() Get architecture string of system.","title":"get_arch"},{"location":"tnalagmes.util/#get95cache95directory","text":"def get_cache_directory(dir=None, domain=None) Get a directory for caching data This directory can be used to hold temporary caches of data to speed up performance. This directory will likely be part of a small RAM disk and may be cleared at any time. So code that uses these cached files must be able to fallback and regenerate the file. Args: domain (str): The cache domain. Basically just a subdirectory. Return: str: a path to the directory where you can cache data","title":"get_cache_directory"},{"location":"tnalagmes.util/#get95http","text":"def get_http(uri)","title":"get_http"},{"location":"tnalagmes.util/#play95mp3","text":"def play_mp3(uri)","title":"play_mp3"},{"location":"tnalagmes.util/#play95ogg","text":"def play_ogg(uri)","title":"play_ogg"},{"location":"tnalagmes.util/#play95wav","text":"def play_wav(uri)","title":"play_wav"},{"location":"tnalagmes.util/#read95dict","text":"def read_dict(filename, div='=')","title":"read_dict"},{"location":"tnalagmes.util/#read95stripped95lines","text":"def read_stripped_lines(filename)","title":"read_stripped_lines"},{"location":"tnalagmes.util/#record","text":"def record(file_path, duration, rate, channels)","title":"record"},{"location":"tnalagmes.util/#remove95last95slash","text":"def remove_last_slash(url)","title":"remove_last_slash"},{"location":"tnalagmes.util/#reset95sigint95handler","text":"def reset_sigint_handler() Reset the sigint handler to the default. This fixes KeyboardInterrupt not getting raised when started via start-mycroft.sh","title":"reset_sigint_handler"},{"location":"tnalagmes.util/#resolve95resource95file","text":"def resolve_resource_file(res_name, lang='en-us') Convert a resource into an absolute filename. Resource names are in the form: 'filename.ext' or 'path/filename.ext' or 'file name' Args: res_name (str): a resource path/name","title":"resolve_resource_file"},{"location":"tnalagmes.util/#wait95for95exit95signal","text":"def wait_for_exit_signal() Blocks until KeyboardInterrupt is received","title":"wait_for_exit_signal"},{"location":"tnalagmes.util/#module-tnalagmesutillog","text":"","title":"Module tnalagmes.util.log"},{"location":"tnalagmes.util/#log","text":"Custom logger class that acts like logging.Logger The logger name is automatically generated by the module of the caller Usage: >>> LOG.debug('My message: %s', debug_str) 13:12:43.673 - : :1 - DEBUG - My message: hi >>> LOG('custom_name').debug('Another message') 13:13:10.462 - custom_name - DEBUG - Another message","title":"LOG"},{"location":"tnalagmes.util/#create95logger","text":"def create_logger(name)","title":"create_logger"},{"location":"tnalagmes.util/#debug","text":"def debug(*args, **kwargs) Log 'msg % args' with severity 'DEBUG'. To pass exception information, use the keyword argument exc_info with a true value, e.g. logger.debug(\"Houston, we have a %s\", \"thorny problem\", exc_info=1)","title":"debug"},{"location":"tnalagmes.util/#error","text":"def error(*args, **kwargs) Log 'msg % args' with severity 'ERROR'. To pass exception information, use the keyword argument exc_info with a true value, e.g. logger.error(\"Houston, we have a %s\", \"major problem\", exc_info=1)","title":"error"},{"location":"tnalagmes.util/#exception","text":"def exception(*args, **kwargs) Convenience method for logging an ERROR with exception information.","title":"exception"},{"location":"tnalagmes.util/#info","text":"def info(*args, **kwargs) Log 'msg % args' with severity 'INFO'. To pass exception information, use the keyword argument exc_info with a true value, e.g. logger.info(\"Houston, we have a %s\", \"interesting problem\", exc_info=1)","title":"info"},{"location":"tnalagmes.util/#init","text":"def init()","title":"init"},{"location":"tnalagmes.util/#warning","text":"def warning(*args, **kwargs) Log 'msg % args' with severity 'WARNING'. To pass exception information, use the keyword argument exc_info with a true value, e.g. logger.warning(\"Houston, we have a %s\", \"bit of a problem\", exc_info=1)","title":"warning"},{"location":"tnalagmes.util/#module-tnalagmesutilnlp","text":"","title":"Module tnalagmes.util.nlp"},{"location":"tnalagmes.util/#ner","text":"def NER(text)","title":"NER"},{"location":"tnalagmes.util/#replace95coreferences","text":"def replace_coreferences(text)","title":"replace_coreferences"},{"location":"tnalagmes.util/#textual95entailment","text":"def textual_entailment(premise, hypothesis) Textual Entailment (TE) takes a pair of sentences and predicts whether the facts in the first necessarily imply the facts in the second one. The AllenNLP toolkit provides the following TE visualization, which can be run for any TE model you develop. This page demonstrates a reimplementation of the decomposable attention model (Parikh et al, 2017) , which was state of the art for the SNLI benchmark (short sentences about visual scenes) in 2016. Rather than pre-trained Glove vectors, this model uses ELMo embeddings, which are completely character based and improve performance by 2% :param premise: :param hypotheses: :return:","title":"textual_entailment"},{"location":"tnalagmes.util/#module-tnalagmesutilphonemes","text":"","title":"Module tnalagmes.util.phonemes"},{"location":"tnalagmes.util/#get95phonemes","text":"def get_phonemes(name, lang='en-us')","title":"get_phonemes"},{"location":"tnalagmes.util/#guess95phonemes","text":"def guess_phonemes(word, lang='en-us') NOTES: guessing phonemes rule-based","title":"guess_phonemes"},{"location":"tnalagmes.util/#module-tnalagmesutilsignal","text":"","title":"Module tnalagmes.util.signal"},{"location":"tnalagmes.util/#check95for95signal","text":"def check_for_signal(signal_name, sec_lifetime=0) See if a named signal exists Args: signal_name (str): The signal's name. Must only contain characters valid in filenames. sec_lifetime (int, optional): How many seconds the signal should remain valid. If 0 or not specified, it is a single-use signal. If -1, it never expires. Returns: bool: True if the signal is defined, False otherwise","title":"check_for_signal"},{"location":"tnalagmes.util/#create95file","text":"def create_file(filename) Create the file filename and create any directories needed Args: filename: Path to the file to be created","title":"create_file"},{"location":"tnalagmes.util/#create95signal","text":"def create_signal(signal_name) Create a named signal Args: signal_name (str): The signal's name. Must only contain characters valid in filenames.","title":"create_signal"},{"location":"tnalagmes.util/#ensure95directory95exists","text":"def ensure_directory_exists(directory, domain=None) Create a directory and give access rights to all Args: domain (str): The IPC domain. Basically a subdirectory to prevent overlapping signal filenames. Returns: str: a path to the directory","title":"ensure_directory_exists"},{"location":"tnalagmes.util/#get95ipc95directory","text":"def get_ipc_directory(domain=None, dir=None) Get the directory used for Inter Process Communication Files in this folder can be accessed by different processes on the machine. Useful for communication. This is often a small RAM disk. Args: domain (str): The IPC domain. Basically a subdirectory to prevent overlapping signal filenames. Returns: str: a path to the IPC directory","title":"get_ipc_directory"},{"location":"tnalagmes.util/#module-tnalagmesutiltime","text":"","title":"Module tnalagmes.util.time"},{"location":"tnalagmes.util/#default95timezone","text":"def default_timezone() Get the default timezone Returns: (datetime.tzinfo): Definition of the default timezone","title":"default_timezone"},{"location":"tnalagmes.util/#get95timedelta","text":"def get_timedelta(dt, anchor=None) Get a datetime object or a int() Epoch timestamp and return a timedelta","title":"get_timedelta"},{"location":"tnalagmes.util/#now95local","text":"def now_local(tz=None) Retrieve the current time Args: tz (datetime.tzinfo, optional): Timezone, default to user's settings Returns: (datetime): The current time","title":"now_local"},{"location":"tnalagmes.util/#now95utc","text":"def now_utc() Retrieve the current time in UTC Returns: (datetime): The current time in Universal Time, aka GMT","title":"now_utc"},{"location":"tnalagmes.util/#to95local","text":"def to_local(dt) Convert a datetime to the user's local timezone Args: dt (datetime): A datetime (if no timezone, defaults to UTC) Returns: (datetime): time converted to the local timezone","title":"to_local"},{"location":"tnalagmes.util/#to95utc","text":"def to_utc(dt) Convert a datetime with timezone info to a UTC datetime Args: dt (datetime): A datetime (presumably in some local zone) Returns: (datetime): time converted to UTC","title":"to_utc"},{"location":"tnalagmes.util.nlp/","text":"Module tnalagmes.util.nlp NER def NER(text) replace_coreferences def replace_coreferences(text) textual_entailment def textual_entailment(premise, hypothesis) Textual Entailment (TE) takes a pair of sentences and predicts whether the facts in the first necessarily imply the facts in the second one. The AllenNLP toolkit provides the following TE visualization, which can be run for any TE model you develop. This page demonstrates a reimplementation of the decomposable attention model (Parikh et al, 2017) , which was state of the art for the SNLI benchmark (short sentences about visual scenes) in 2016. Rather than pre-trained Glove vectors, this model uses ELMo embeddings, which are completely character based and improve performance by 2% :param premise: :param hypotheses: :return:","title":"nlp"},{"location":"tnalagmes.util.nlp/#module-tnalagmesutilnlp","text":"","title":"Module tnalagmes.util.nlp"},{"location":"tnalagmes.util.nlp/#ner","text":"def NER(text)","title":"NER"},{"location":"tnalagmes.util.nlp/#replace95coreferences","text":"def replace_coreferences(text)","title":"replace_coreferences"},{"location":"tnalagmes.util.nlp/#textual95entailment","text":"def textual_entailment(premise, hypothesis) Textual Entailment (TE) takes a pair of sentences and predicts whether the facts in the first necessarily imply the facts in the second one. The AllenNLP toolkit provides the following TE visualization, which can be run for any TE model you develop. This page demonstrates a reimplementation of the decomposable attention model (Parikh et al, 2017) , which was state of the art for the SNLI benchmark (short sentences about visual scenes) in 2016. Rather than pre-trained Glove vectors, this model uses ELMo embeddings, which are completely character based and improve performance by 2% :param premise: :param hypotheses: :return:","title":"textual_entailment"},{"location":"tnalagmes.util.phonemes/","text":"Module tnalagmes.util.phonemes get_phonemes def get_phonemes(name, lang='en-us') guess_phonemes def guess_phonemes(word, lang='en-us') NOTES: guessing phonemes rule-based","title":"phonemes"},{"location":"tnalagmes.util.phonemes/#module-tnalagmesutilphonemes","text":"","title":"Module tnalagmes.util.phonemes"},{"location":"tnalagmes.util.phonemes/#get95phonemes","text":"def get_phonemes(name, lang='en-us')","title":"get_phonemes"},{"location":"tnalagmes.util.phonemes/#guess95phonemes","text":"def guess_phonemes(word, lang='en-us') NOTES: guessing phonemes rule-based","title":"guess_phonemes"},{"location":"tnalagmes.util.signal/","text":"Module tnalagmes.util.signal check_for_signal def check_for_signal(signal_name, sec_lifetime=0) See if a named signal exists Args: signal_name (str): The signal's name. Must only contain characters valid in filenames. sec_lifetime (int, optional): How many seconds the signal should remain valid. If 0 or not specified, it is a single-use signal. If -1, it never expires. Returns: bool: True if the signal is defined, False otherwise create_file def create_file(filename) Create the file filename and create any directories needed Args: filename: Path to the file to be created create_signal def create_signal(signal_name) Create a named signal Args: signal_name (str): The signal's name. Must only contain characters valid in filenames. ensure_directory_exists def ensure_directory_exists(directory, domain=None) Create a directory and give access rights to all Args: domain (str): The IPC domain. Basically a subdirectory to prevent overlapping signal filenames. Returns: str: a path to the directory get_ipc_directory def get_ipc_directory(domain=None, dir=None) Get the directory used for Inter Process Communication Files in this folder can be accessed by different processes on the machine. Useful for communication. This is often a small RAM disk. Args: domain (str): The IPC domain. Basically a subdirectory to prevent overlapping signal filenames. Returns: str: a path to the IPC directory","title":"signal"},{"location":"tnalagmes.util.signal/#module-tnalagmesutilsignal","text":"","title":"Module tnalagmes.util.signal"},{"location":"tnalagmes.util.signal/#check95for95signal","text":"def check_for_signal(signal_name, sec_lifetime=0) See if a named signal exists Args: signal_name (str): The signal's name. Must only contain characters valid in filenames. sec_lifetime (int, optional): How many seconds the signal should remain valid. If 0 or not specified, it is a single-use signal. If -1, it never expires. Returns: bool: True if the signal is defined, False otherwise","title":"check_for_signal"},{"location":"tnalagmes.util.signal/#create95file","text":"def create_file(filename) Create the file filename and create any directories needed Args: filename: Path to the file to be created","title":"create_file"},{"location":"tnalagmes.util.signal/#create95signal","text":"def create_signal(signal_name) Create a named signal Args: signal_name (str): The signal's name. Must only contain characters valid in filenames.","title":"create_signal"},{"location":"tnalagmes.util.signal/#ensure95directory95exists","text":"def ensure_directory_exists(directory, domain=None) Create a directory and give access rights to all Args: domain (str): The IPC domain. Basically a subdirectory to prevent overlapping signal filenames. Returns: str: a path to the directory","title":"ensure_directory_exists"},{"location":"tnalagmes.util.signal/#get95ipc95directory","text":"def get_ipc_directory(domain=None, dir=None) Get the directory used for Inter Process Communication Files in this folder can be accessed by different processes on the machine. Useful for communication. This is often a small RAM disk. Args: domain (str): The IPC domain. Basically a subdirectory to prevent overlapping signal filenames. Returns: str: a path to the IPC directory","title":"get_ipc_directory"},{"location":"tnalagmes.util.time/","text":"Module tnalagmes.util.time default_timezone def default_timezone() Get the default timezone Returns: (datetime.tzinfo): Definition of the default timezone get_timedelta def get_timedelta(dt, anchor=None) Get a datetime object or a int() Epoch timestamp and return a timedelta now_local def now_local(tz=None) Retrieve the current time Args: tz (datetime.tzinfo, optional): Timezone, default to user's settings Returns: (datetime): The current time now_utc def now_utc() Retrieve the current time in UTC Returns: (datetime): The current time in Universal Time, aka GMT to_local def to_local(dt) Convert a datetime to the user's local timezone Args: dt (datetime): A datetime (if no timezone, defaults to UTC) Returns: (datetime): time converted to the local timezone to_utc def to_utc(dt) Convert a datetime with timezone info to a UTC datetime Args: dt (datetime): A datetime (presumably in some local zone) Returns: (datetime): time converted to UTC","title":"time"},{"location":"tnalagmes.util.time/#module-tnalagmesutiltime","text":"","title":"Module tnalagmes.util.time"},{"location":"tnalagmes.util.time/#default95timezone","text":"def default_timezone() Get the default timezone Returns: (datetime.tzinfo): Definition of the default timezone","title":"default_timezone"},{"location":"tnalagmes.util.time/#get95timedelta","text":"def get_timedelta(dt, anchor=None) Get a datetime object or a int() Epoch timestamp and return a timedelta","title":"get_timedelta"},{"location":"tnalagmes.util.time/#now95local","text":"def now_local(tz=None) Retrieve the current time Args: tz (datetime.tzinfo, optional): Timezone, default to user's settings Returns: (datetime): The current time","title":"now_local"},{"location":"tnalagmes.util.time/#now95utc","text":"def now_utc() Retrieve the current time in UTC Returns: (datetime): The current time in Universal Time, aka GMT","title":"now_utc"},{"location":"tnalagmes.util.time/#to95local","text":"def to_local(dt) Convert a datetime to the user's local timezone Args: dt (datetime): A datetime (if no timezone, defaults to UTC) Returns: (datetime): time converted to the local timezone","title":"to_local"},{"location":"tnalagmes.util.time/#to95utc","text":"def to_utc(dt) Convert a datetime with timezone info to a UTC datetime Args: dt (datetime): A datetime (presumably in some local zone) Returns: (datetime): time converted to UTC","title":"to_utc"}]}