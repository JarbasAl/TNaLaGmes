{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"TNaLaGmes TNaLaGmes is a Toolbox for Natural Language Games I asked myself, what if random python objects could talk to you using only natural language? TNaLaGmes is a library that provides tools and default models for a variety of constructs, it was made thinking about games, but it really is about text enabling random code constructs! Read the Wiki early alpha version on pip install pip install TNaLaGmes Usage to play the original oregon trail from tnalagmes.games import OregonTrail game = OregonTrail() game.run() or maybe you prefer a zombie survival game from tnalagmes.games.zombie import ZVirus game = ZVirus() game.run() Chatbot agents are provided via all_the_chatbots , you need internet for this from tnalagmes.models.agents import Mitsuku # notable chat agents can be imported directly from tnalagmes.models.agents import ChatAgent # you can create your own and override on_turn hitler = ChatAgent.create_agent(\"hitler\") # get an agent from all_the_chatbots Mitsuku.run() # output bellow > My name is Mitsuku. hello > Hi there. How are you? tell me a joke > My mates been drinking brake fluid for 6 years but he says he's not addicted. He reckons he can stop anytime he wants. > Thanks for the information. do you believe in god? > <image>http://www.square-bear.co.uk/mitsuku/gallery/god.jpg</image> > I believe there is probably something out there but I doubt it is a man with a long beard sat on a throne. to do something useful as part of a project look how i made a Calendar class Calendar(TNaLaGmesConstruct): \"\"\" Calendar Object \"What day/date/week/weekday/month/year is it?\" \"next turn\" \"how many turns left\" \"how many turns passed\" \"how many days per turn\" \"maximum number of turns\" \"increase speed\" \"decrease speed\" \"rollback X days/months/weeks/years\" \"advance X days/months/weeks/years\" \"\"\" # standard python functionality, implementing date and turn tracking for our calendar def __init__(self, total_turns=20, start_date=None, turn_delta=0): TNaLaGmesConstruct.__init__(self, \"calendar\") # pass a string with object_type if desired self._date = start_date or datetime.now() self.days_per_turn = turn_delta self._turn_delta = timedelta(days=self.days_per_turn) if self.days_per_turn else None self._turn_count = 1 self._max_turns = total_turns def change_speed(self, days_per_turn=0): if isinstance(days_per_turn, str): if days_per_turn.strip().lower().startswith(\"easy\"): days_per_turn = 1 elif days_per_turn.strip().lower().startswith(\"hard\"): days_per_turn = 14 days_per_turn = self.extract_number(days_per_turn) self._turn_delta = timedelta(days_per_turn) def advance_date(self): if self._turn_delta is None: self._date = datetime.now() return self._date += self._turn_delta self._turn_count += 1 def rollback_date(self, rollback_days=None): rollback_days = rollback_days or self.days_per_turn self._date -= timedelta(days=rollback_days) @property def weekday(self): day = self._date.weekday() if day == 0: return \"Monday\" elif day == 1: return \"Tuesday\" elif day == 2: return \"Wednesday\" elif day == 3: return \"Thursday\" elif day == 4: return \"Friday\" elif day == 5: return \"Saturday\" elif day == 6: return \"Sunday\" return \"What kind of calendar is this? \" @property def pretty_date(self): return self.weekday + \" \" + self._date.strftime('%d, %b %Y') @property def is_final_turn(self): if not self._turn_delta: return False if self._turn_count >= self._max_turns: return True else: return False @property def turns(self): return self._turn_count @property def date(self): return self._date @property def max_turns(self): return self._max_turns @property def week_of_month(self): # https://en.wikipedia.org/wiki/ISO_week_date#Weeks_per_month first_day = self.date.replace(day=1) day_of_month = self.date.day # adjust for sundays if (first_day.weekday() == 6): adjusted_dom = (1 + first_day.weekday()) / 7 else: adjusted_dom = day_of_month + first_day.weekday() # days may belong to a month but their week may belong to another one # weeks belong to a month if its thursday falls on it if (first_day.weekday() > 3): return int(ceil(adjusted_dom / 7.0)) - 1 else: return int(ceil(adjusted_dom / 7.0)) # in here register the word triggers # im only using keyword rules instead of sample phrases # literal strings are used as keywords # if available on locale folder vocabulary is expanded def register_core_intents(self): self.register_keyword_intent(\"advance\", required=[\"date\", \"advance\"], optionals=[], handler=self.handle_advance) self.register_keyword_intent(\"rollback\", required=[\"rollback\", \"date\"], optionals=[], handler=self.handle_rollback) self.register_keyword_intent(\"speed_decrease\", required=[\"decrease\", \"speed\"], optionals=[], handler=self.handle_speed_decrease) self.register_keyword_intent(\"speed_increase\", required=[\"increase\", \"speed\"], optionals=[], handler=self.handle_speed_increase) self.register_keyword_intent(\"days_per_turn\", required=[\"turns\", \"day\"], optionals=[\"question\"], handler=self.handle_days_per_turn) self.register_keyword_intent(\"turns_max\", required=[\"turns\", \"total\"], optionals=[\"question\"], handler=self.handle_turns_max) self.register_keyword_intent(\"turns_past\", required=[\"turns\", \"past\"], optionals=[\"question\"], handler=self.handle_turns_past) self.register_keyword_intent(\"turns_current\", required=[\"turns\", \"current\"], optionals=[\"question\"], handler=self.handle_turns_current) self.register_keyword_intent(\"turns_left\", required=[\"turns\", \"remaining\"], optionals=[\"question\"], handler=self.handle_turns_left) self.register_keyword_intent(\"next_turn\", required=[\"next\", \"turn\"], optionals=[], handler=self.handle_next_turn) self.register_keyword_intent(\"ask_day\", required=[\"day\"], optionals=[\"question\"], handler=self.handle_day) self.register_keyword_intent(\"ask_week\", required=[\"week\"], optionals=[\"question\"], handler=self.handle_week) self.register_keyword_intent(\"ask_weekday\", required=[\"weekday\"], optionals=[\"question\"], handler=self.handle_weekday) self.register_keyword_intent(\"ask_month\", required=[\"month\"], optionals=[\"question\"], handler=self.handle_month) self.register_keyword_intent(\"ask_year\", required=[\"year\"], optionals=[\"question\"], handler=self.handle_year) self.register_keyword_intent(\"ask_date\", required=[\"date\"], optionals=[\"question\"], handler=self.handle_date) # handlers for each natural language questions def handle_date(self, intent): return self.pretty_date def handle_week(self, intent): # TODO util to pronounce cardinals return \"it is the \" + str(self.week_of_month) + \" week of the month\" def handle_weekday(self, intent): return self.weekday def handle_month(self, intent): return str(self.date.month) def handle_day(self, intent): return str(self.date.day) def handle_year(self, intent): return \"it is the year \" + str(self.date.year) def handle_days_per_turn(self, intent): return str(self._turn_delta) + \" days per turn\" def handle_turns_left(self, intent): return \"you have \" + str(self.max_turns - self.turns) + \" left\" def handle_turns_max(self, intent): return \"maximum number of turns is \" + str(self.max_turns) def handle_turns_current(self, intent): return \"currently in turn\" + str(self.turns) def handle_turns_past(self, intent): return str(self.turns - 1) + \" passed\" def handle_next_turn(self, intent): self.advance_date() return \"now in turn\" + str(self.turns) def handle_advance(self, intent): self.advance_date() return \"advanced date by \" + str(self._turn_delta) + \" days\" def handle_rollback(self, intent): number = self.extract_number(intent[\"utterance\"]) self.rollback_date(number) return \"rolled back date by \" + str(number) + \" days\" def handle_speed_decrease(self, intent): number = self.extract_number(intent[\"utterance\"]) number = number or 1 self.change_speed(self._turn_delta - number) return \"decreased speed by \" + str(number) + \" days\" def handle_speed_increase(self, intent): number = self.extract_number(intent[\"utterance\"]) number = number or 1 self.change_speed(self._turn_delta - number) return \"increased speed by \" + str(number) + \" days\" you can interact with it now if __name__ == \"__main__\": construct = Calendar() print(construct.parse_command(\"current date\")) print(construct.parse_command(\"what day\")) print(construct.parse_command(\"what month\")) print(construct.parse_command(\"what weekday\")) print(construct.parse_command(\"total turns\")) # Saturday 13, Oct 2018 # 13 # 10 # Saturday # maximum number of turns is 20","title":"Home"},{"location":"#tnalagmes","text":"TNaLaGmes is a Toolbox for Natural Language Games I asked myself, what if random python objects could talk to you using only natural language? TNaLaGmes is a library that provides tools and default models for a variety of constructs, it was made thinking about games, but it really is about text enabling random code constructs! Read the Wiki early alpha version on pip","title":"TNaLaGmes"},{"location":"#install","text":"pip install TNaLaGmes","title":"install"},{"location":"#usage","text":"to play the original oregon trail from tnalagmes.games import OregonTrail game = OregonTrail() game.run() or maybe you prefer a zombie survival game from tnalagmes.games.zombie import ZVirus game = ZVirus() game.run() Chatbot agents are provided via all_the_chatbots , you need internet for this from tnalagmes.models.agents import Mitsuku # notable chat agents can be imported directly from tnalagmes.models.agents import ChatAgent # you can create your own and override on_turn hitler = ChatAgent.create_agent(\"hitler\") # get an agent from all_the_chatbots Mitsuku.run() # output bellow > My name is Mitsuku. hello > Hi there. How are you? tell me a joke > My mates been drinking brake fluid for 6 years but he says he's not addicted. He reckons he can stop anytime he wants. > Thanks for the information. do you believe in god? > <image>http://www.square-bear.co.uk/mitsuku/gallery/god.jpg</image> > I believe there is probably something out there but I doubt it is a man with a long beard sat on a throne. to do something useful as part of a project look how i made a Calendar class Calendar(TNaLaGmesConstruct): \"\"\" Calendar Object \"What day/date/week/weekday/month/year is it?\" \"next turn\" \"how many turns left\" \"how many turns passed\" \"how many days per turn\" \"maximum number of turns\" \"increase speed\" \"decrease speed\" \"rollback X days/months/weeks/years\" \"advance X days/months/weeks/years\" \"\"\" # standard python functionality, implementing date and turn tracking for our calendar def __init__(self, total_turns=20, start_date=None, turn_delta=0): TNaLaGmesConstruct.__init__(self, \"calendar\") # pass a string with object_type if desired self._date = start_date or datetime.now() self.days_per_turn = turn_delta self._turn_delta = timedelta(days=self.days_per_turn) if self.days_per_turn else None self._turn_count = 1 self._max_turns = total_turns def change_speed(self, days_per_turn=0): if isinstance(days_per_turn, str): if days_per_turn.strip().lower().startswith(\"easy\"): days_per_turn = 1 elif days_per_turn.strip().lower().startswith(\"hard\"): days_per_turn = 14 days_per_turn = self.extract_number(days_per_turn) self._turn_delta = timedelta(days_per_turn) def advance_date(self): if self._turn_delta is None: self._date = datetime.now() return self._date += self._turn_delta self._turn_count += 1 def rollback_date(self, rollback_days=None): rollback_days = rollback_days or self.days_per_turn self._date -= timedelta(days=rollback_days) @property def weekday(self): day = self._date.weekday() if day == 0: return \"Monday\" elif day == 1: return \"Tuesday\" elif day == 2: return \"Wednesday\" elif day == 3: return \"Thursday\" elif day == 4: return \"Friday\" elif day == 5: return \"Saturday\" elif day == 6: return \"Sunday\" return \"What kind of calendar is this? \" @property def pretty_date(self): return self.weekday + \" \" + self._date.strftime('%d, %b %Y') @property def is_final_turn(self): if not self._turn_delta: return False if self._turn_count >= self._max_turns: return True else: return False @property def turns(self): return self._turn_count @property def date(self): return self._date @property def max_turns(self): return self._max_turns @property def week_of_month(self): # https://en.wikipedia.org/wiki/ISO_week_date#Weeks_per_month first_day = self.date.replace(day=1) day_of_month = self.date.day # adjust for sundays if (first_day.weekday() == 6): adjusted_dom = (1 + first_day.weekday()) / 7 else: adjusted_dom = day_of_month + first_day.weekday() # days may belong to a month but their week may belong to another one # weeks belong to a month if its thursday falls on it if (first_day.weekday() > 3): return int(ceil(adjusted_dom / 7.0)) - 1 else: return int(ceil(adjusted_dom / 7.0)) # in here register the word triggers # im only using keyword rules instead of sample phrases # literal strings are used as keywords # if available on locale folder vocabulary is expanded def register_core_intents(self): self.register_keyword_intent(\"advance\", required=[\"date\", \"advance\"], optionals=[], handler=self.handle_advance) self.register_keyword_intent(\"rollback\", required=[\"rollback\", \"date\"], optionals=[], handler=self.handle_rollback) self.register_keyword_intent(\"speed_decrease\", required=[\"decrease\", \"speed\"], optionals=[], handler=self.handle_speed_decrease) self.register_keyword_intent(\"speed_increase\", required=[\"increase\", \"speed\"], optionals=[], handler=self.handle_speed_increase) self.register_keyword_intent(\"days_per_turn\", required=[\"turns\", \"day\"], optionals=[\"question\"], handler=self.handle_days_per_turn) self.register_keyword_intent(\"turns_max\", required=[\"turns\", \"total\"], optionals=[\"question\"], handler=self.handle_turns_max) self.register_keyword_intent(\"turns_past\", required=[\"turns\", \"past\"], optionals=[\"question\"], handler=self.handle_turns_past) self.register_keyword_intent(\"turns_current\", required=[\"turns\", \"current\"], optionals=[\"question\"], handler=self.handle_turns_current) self.register_keyword_intent(\"turns_left\", required=[\"turns\", \"remaining\"], optionals=[\"question\"], handler=self.handle_turns_left) self.register_keyword_intent(\"next_turn\", required=[\"next\", \"turn\"], optionals=[], handler=self.handle_next_turn) self.register_keyword_intent(\"ask_day\", required=[\"day\"], optionals=[\"question\"], handler=self.handle_day) self.register_keyword_intent(\"ask_week\", required=[\"week\"], optionals=[\"question\"], handler=self.handle_week) self.register_keyword_intent(\"ask_weekday\", required=[\"weekday\"], optionals=[\"question\"], handler=self.handle_weekday) self.register_keyword_intent(\"ask_month\", required=[\"month\"], optionals=[\"question\"], handler=self.handle_month) self.register_keyword_intent(\"ask_year\", required=[\"year\"], optionals=[\"question\"], handler=self.handle_year) self.register_keyword_intent(\"ask_date\", required=[\"date\"], optionals=[\"question\"], handler=self.handle_date) # handlers for each natural language questions def handle_date(self, intent): return self.pretty_date def handle_week(self, intent): # TODO util to pronounce cardinals return \"it is the \" + str(self.week_of_month) + \" week of the month\" def handle_weekday(self, intent): return self.weekday def handle_month(self, intent): return str(self.date.month) def handle_day(self, intent): return str(self.date.day) def handle_year(self, intent): return \"it is the year \" + str(self.date.year) def handle_days_per_turn(self, intent): return str(self._turn_delta) + \" days per turn\" def handle_turns_left(self, intent): return \"you have \" + str(self.max_turns - self.turns) + \" left\" def handle_turns_max(self, intent): return \"maximum number of turns is \" + str(self.max_turns) def handle_turns_current(self, intent): return \"currently in turn\" + str(self.turns) def handle_turns_past(self, intent): return str(self.turns - 1) + \" passed\" def handle_next_turn(self, intent): self.advance_date() return \"now in turn\" + str(self.turns) def handle_advance(self, intent): self.advance_date() return \"advanced date by \" + str(self._turn_delta) + \" days\" def handle_rollback(self, intent): number = self.extract_number(intent[\"utterance\"]) self.rollback_date(number) return \"rolled back date by \" + str(number) + \" days\" def handle_speed_decrease(self, intent): number = self.extract_number(intent[\"utterance\"]) number = number or 1 self.change_speed(self._turn_delta - number) return \"decreased speed by \" + str(number) + \" days\" def handle_speed_increase(self, intent): number = self.extract_number(intent[\"utterance\"]) number = number or 1 self.change_speed(self._turn_delta - number) return \"increased speed by \" + str(number) + \" days\" you can interact with it now if __name__ == \"__main__\": construct = Calendar() print(construct.parse_command(\"current date\")) print(construct.parse_command(\"what day\")) print(construct.parse_command(\"what month\")) print(construct.parse_command(\"what weekday\")) print(construct.parse_command(\"total turns\")) # Saturday 13, Oct 2018 # 13 # 10 # Saturday # maximum number of turns is 20","title":"Usage"},{"location":"tnalagmes.constructs/","text":"Module tnalagmes.constructs Class TNaLaGmesConstruct None","title":"tnalagmes constructs"},{"location":"tnalagmes.constructs/#module-tnalagmesconstructs","text":"","title":"Module tnalagmes.constructs"},{"location":"tnalagmes.constructs/#class-tnalagmesconstruct","text":"None","title":"Class TNaLaGmesConstruct"},{"location":"tnalagmes.data.oregon_trail_data/","text":"Module tnalagmes.data.oregon_trail_data","title":"tnalagmes data oregon_trail_data"},{"location":"tnalagmes.data.oregon_trail_data/#module-tnalagmesdataoregon_trail_data","text":"","title":"Module tnalagmes.data.oregon_trail_data"},{"location":"tnalagmes.data.template_data/","text":"Module tnalagmes.data.template_data","title":"tnalagmes data template_data"},{"location":"tnalagmes.data.template_data/#module-tnalagmesdatatemplate_data","text":"","title":"Module tnalagmes.data.template_data"},{"location":"tnalagmes.data.zombie_survival_data/","text":"Module tnalagmes.data.zombie_survival_data","title":"tnalagmes data zombie_survival_data"},{"location":"tnalagmes.data.zombie_survival_data/#module-tnalagmesdatazombie_survival_data","text":"","title":"Module tnalagmes.data.zombie_survival_data"},{"location":"tnalagmes.engines.intentworld/","text":"Module tnalagmes.engines.intentworld","title":"tnalagmes engines intentworld"},{"location":"tnalagmes.engines.intentworld/#module-tnalagmesenginesintentworld","text":"","title":"Module tnalagmes.engines.intentworld"},{"location":"tnalagmes.engines.oregon/","text":"Module tnalagmes.engines.oregon Class OregonEngine so called because logic is based on oregon trail Class SimpleInventory what do you have how much money do you have how much are you worth Method get_entity def get_entity(text) Class TurnState am i injured am i eating/poorly/moderately/well suffering illness","title":"tnalagmes engines oregon"},{"location":"tnalagmes.engines.oregon/#module-tnalagmesenginesoregon","text":"","title":"Module tnalagmes.engines.oregon"},{"location":"tnalagmes.engines.oregon/#class-oregonengine","text":"so called because logic is based on oregon trail","title":"Class OregonEngine"},{"location":"tnalagmes.engines.oregon/#class-simpleinventory","text":"what do you have how much money do you have how much are you worth","title":"Class SimpleInventory"},{"location":"tnalagmes.engines.oregon/#method-get95entity","text":"def get_entity(text)","title":"Method get_entity"},{"location":"tnalagmes.engines.oregon/#class-turnstate","text":"am i injured am i eating/poorly/moderately/well suffering illness","title":"Class TurnState"},{"location":"tnalagmes.engines.oregon75/","text":"Module tnalagmes.engines.oregon75 Class Oregon75Engine so called because logic is ported from 1975 basic version of oregon trail","title":"tnalagmes engines oregon75"},{"location":"tnalagmes.engines.oregon75/#module-tnalagmesenginesoregon75","text":"","title":"Module tnalagmes.engines.oregon75"},{"location":"tnalagmes.engines.oregon75/#class-oregon75engine","text":"so called because logic is ported from 1975 basic version of oregon trail","title":"Class Oregon75Engine"},{"location":"tnalagmes.engines.oregon78/","text":"Module tnalagmes.engines.oregon78 Class Oregon78Engine so called because logic is ported from 1978 basic version of oregon trail","title":"tnalagmes engines oregon78"},{"location":"tnalagmes.engines.oregon78/#module-tnalagmesenginesoregon78","text":"","title":"Module tnalagmes.engines.oregon78"},{"location":"tnalagmes.engines.oregon78/#class-oregon78engine","text":"so called because logic is ported from 1978 basic version of oregon trail","title":"Class Oregon78Engine"},{"location":"tnalagmes.engines.textadventurer/","text":"Module tnalagmes.engines.textadventurer","title":"tnalagmes engines textadventurer"},{"location":"tnalagmes.engines.textadventurer/#module-tnalagmesenginestextadventurer","text":"","title":"Module tnalagmes.engines.textadventurer"},{"location":"tnalagmes.engines.textwarrior/","text":"Module tnalagmes.engines.textwarrior","title":"tnalagmes engines textwarrior"},{"location":"tnalagmes.engines.textwarrior/#module-tnalagmesenginestextwarrior","text":"","title":"Module tnalagmes.engines.textwarrior"},{"location":"tnalagmes.games.dummy/","text":"Module tnalagmes.games.dummy Class TemplateGame so called because logic is ported from 1975 basic version of oregon trail","title":"tnalagmes games dummy"},{"location":"tnalagmes.games.dummy/#module-tnalagmesgamesdummy","text":"","title":"Module tnalagmes.games.dummy"},{"location":"tnalagmes.games.dummy/#class-templategame","text":"so called because logic is ported from 1975 basic version of oregon trail","title":"Class TemplateGame"},{"location":"tnalagmes.games.oregon_trail/","text":"Module tnalagmes.games.oregon_trail Class OregonTrail so called because logic is ported from 1975 basic version of oregon trail","title":"tnalagmes games oregon_trail"},{"location":"tnalagmes.games.oregon_trail/#module-tnalagmesgamesoregon_trail","text":"","title":"Module tnalagmes.games.oregon_trail"},{"location":"tnalagmes.games.oregon_trail/#class-oregontrail","text":"so called because logic is ported from 1975 basic version of oregon trail","title":"Class OregonTrail"},{"location":"tnalagmes.games.zombie/","text":"Module tnalagmes.games.zombie Class ZVirus so called because logic is ported from 1975 basic version of oregon trail","title":"tnalagmes games zombie"},{"location":"tnalagmes.games.zombie/#module-tnalagmesgameszombie","text":"","title":"Module tnalagmes.games.zombie"},{"location":"tnalagmes.games.zombie/#class-zvirus","text":"so called because logic is ported from 1975 basic version of oregon trail","title":"Class ZVirus"},{"location":"tnalagmes.lang.format_common/","text":"Module tnalagmes.lang.format_common Routine convert_to_mixed_fraction def convert_to_mixed_fraction(number, denominators) Convert floats to components of a mixed fraction representation Returns the closest fractional representation using the provided denominators. For example, 4.500002 would become the whole number 4, the numerator 1 and the denominator 2 Args: number (float): number for convert denominators (iter of ints): denominators to use, default [1 .. 20] Returns: whole, numerator, denominator (int): Integers of the mixed fraction","title":"tnalagmes lang format_common"},{"location":"tnalagmes.lang.format_common/#module-tnalagmeslangformat_common","text":"","title":"Module tnalagmes.lang.format_common"},{"location":"tnalagmes.lang.format_common/#routine-convert95to95mixed95fraction","text":"def convert_to_mixed_fraction(number, denominators) Convert floats to components of a mixed fraction representation Returns the closest fractional representation using the provided denominators. For example, 4.500002 would become the whole number 4, the numerator 1 and the denominator 2 Args: number (float): number for convert denominators (iter of ints): denominators to use, default [1 .. 20] Returns: whole, numerator, denominator (int): Integers of the mixed fraction","title":"Routine convert_to_mixed_fraction"},{"location":"tnalagmes.lang.format_de/","text":"Module tnalagmes.lang.format_de Routine nice_number_de def nice_number_de(number, speech, denominators) German helper for nice_number This function formats a float to human understandable functions. Like 4.5 becomes \"4 einhalb\" for speech and \"4 1/2\" for text Args: number (int or float): the float to format speech (bool): format for speech (True) or display (False) denominators (iter of ints): denominators to use, default [1 .. 20] Returns: (str): The formatted string. Routine nice_ordinal_de def nice_ordinal_de(text) Routine nice_response_de def nice_response_de(text) Routine nice_time_de def nice_time_de(dt, speech=True, use_24hour=False, use_ampm=False) Format a time to a comfortable human format For example, generate 'five thirty' for speech or '5:30' for text display. Args: dt (datetime): date to format (assumes already in local timezone) speech (bool): format for speech (default/True) or display (False)=Fal use_24hour (bool): output in 24-hour/military or 12-hour format use_ampm (bool): include the am/pm for 12-hour format Returns: (str): The formatted time string Routine pronounce_number_de def pronounce_number_de(num, places=2) Convert a number to its spoken equivalent For example, '5.2' would return 'five point two' Args: num(float or int): the number to pronounce (set limit below) places(int): maximum decimal places to speak Returns: (str): The pronounced number Routine pronounce_ordinal_de def pronounce_ordinal_de(num)","title":"tnalagmes lang format_de"},{"location":"tnalagmes.lang.format_de/#module-tnalagmeslangformat_de","text":"","title":"Module tnalagmes.lang.format_de"},{"location":"tnalagmes.lang.format_de/#routine-nice95number95de","text":"def nice_number_de(number, speech, denominators) German helper for nice_number This function formats a float to human understandable functions. Like 4.5 becomes \"4 einhalb\" for speech and \"4 1/2\" for text Args: number (int or float): the float to format speech (bool): format for speech (True) or display (False) denominators (iter of ints): denominators to use, default [1 .. 20] Returns: (str): The formatted string.","title":"Routine nice_number_de"},{"location":"tnalagmes.lang.format_de/#routine-nice95ordinal95de","text":"def nice_ordinal_de(text)","title":"Routine nice_ordinal_de"},{"location":"tnalagmes.lang.format_de/#routine-nice95response95de","text":"def nice_response_de(text)","title":"Routine nice_response_de"},{"location":"tnalagmes.lang.format_de/#routine-nice95time95de","text":"def nice_time_de(dt, speech=True, use_24hour=False, use_ampm=False) Format a time to a comfortable human format For example, generate 'five thirty' for speech or '5:30' for text display. Args: dt (datetime): date to format (assumes already in local timezone) speech (bool): format for speech (default/True) or display (False)=Fal use_24hour (bool): output in 24-hour/military or 12-hour format use_ampm (bool): include the am/pm for 12-hour format Returns: (str): The formatted time string","title":"Routine nice_time_de"},{"location":"tnalagmes.lang.format_de/#routine-pronounce95number95de","text":"def pronounce_number_de(num, places=2) Convert a number to its spoken equivalent For example, '5.2' would return 'five point two' Args: num(float or int): the number to pronounce (set limit below) places(int): maximum decimal places to speak Returns: (str): The pronounced number","title":"Routine pronounce_number_de"},{"location":"tnalagmes.lang.format_de/#routine-pronounce95ordinal95de","text":"def pronounce_ordinal_de(num)","title":"Routine pronounce_ordinal_de"},{"location":"tnalagmes.lang.format_en/","text":"Module tnalagmes.lang.format_en Routine nice_number_en def nice_number_en(number, speech, denominators) English helper for nice_number This function formats a float to human understandable functions. Like 4.5 becomes \"4 and a half\" for speech and \"4 1/2\" for text Args: number (int or float): the float to format speech (bool): format for speech (True) or display (False) denominators (iter of ints): denominators to use, default [1 .. 20] Returns: (str): The formatted string. Routine nice_time_delta_en def nice_time_delta_en(time_delta, anchor=None) Get a timedelta or datetime object or a int() Epoch timestamp and return a pretty string like 'an hour ago', 'Yesterday', '3 months ago', 'just now', etc Routine nice_time_en def nice_time_en(dt, speech=True, use_24hour=False, use_ampm=False) Format a time to a comfortable human format For example, generate 'five thirty' for speech or '5:30' for text display. Args: dt (datetime): date to format (assumes already in local timezone) speech (bool): format for speech (default/True) or display (False)=Fal use_24hour (bool): output in 24-hour/military or 12-hour format use_ampm (bool): include the am/pm for 12-hour format Returns: (str): The formatted time string Routine pronounce_number_en def pronounce_number_en(num, places=2, short_scale=True, scientific=False) Convert a number to it's spoken equivalent For example, '5.2' would return 'five point two' Args: num(float or int): the number to pronounce (under 100) places(int): maximum decimal places to speak short_scale (bool) : use short (True) or long scale (False) https://en.wikipedia.org/wiki/Names_of_large_numbers scientific (bool): pronounce in scientific notation Returns: (str): The pronounced number","title":"tnalagmes lang format_en"},{"location":"tnalagmes.lang.format_en/#module-tnalagmeslangformat_en","text":"","title":"Module tnalagmes.lang.format_en"},{"location":"tnalagmes.lang.format_en/#routine-nice95number95en","text":"def nice_number_en(number, speech, denominators) English helper for nice_number This function formats a float to human understandable functions. Like 4.5 becomes \"4 and a half\" for speech and \"4 1/2\" for text Args: number (int or float): the float to format speech (bool): format for speech (True) or display (False) denominators (iter of ints): denominators to use, default [1 .. 20] Returns: (str): The formatted string.","title":"Routine nice_number_en"},{"location":"tnalagmes.lang.format_en/#routine-nice95time95delta95en","text":"def nice_time_delta_en(time_delta, anchor=None) Get a timedelta or datetime object or a int() Epoch timestamp and return a pretty string like 'an hour ago', 'Yesterday', '3 months ago', 'just now', etc","title":"Routine nice_time_delta_en"},{"location":"tnalagmes.lang.format_en/#routine-nice95time95en","text":"def nice_time_en(dt, speech=True, use_24hour=False, use_ampm=False) Format a time to a comfortable human format For example, generate 'five thirty' for speech or '5:30' for text display. Args: dt (datetime): date to format (assumes already in local timezone) speech (bool): format for speech (default/True) or display (False)=Fal use_24hour (bool): output in 24-hour/military or 12-hour format use_ampm (bool): include the am/pm for 12-hour format Returns: (str): The formatted time string","title":"Routine nice_time_en"},{"location":"tnalagmes.lang.format_en/#routine-pronounce95number95en","text":"def pronounce_number_en(num, places=2, short_scale=True, scientific=False) Convert a number to it's spoken equivalent For example, '5.2' would return 'five point two' Args: num(float or int): the number to pronounce (under 100) places(int): maximum decimal places to speak short_scale (bool) : use short (True) or long scale (False) https://en.wikipedia.org/wiki/Names_of_large_numbers scientific (bool): pronounce in scientific notation Returns: (str): The pronounced number","title":"Routine pronounce_number_en"},{"location":"tnalagmes.lang.format_fr/","text":"Module tnalagmes.lang.format_fr Format functions for french (fr) Routine nice_number_fr def nice_number_fr(number, speech, denominators) French helper for nice_number This function formats a float to human understandable functions. Like 4.5 becomes \"4 et demi\" for speech and \"4 1/2\" for text Args: number (int or float): the float to format speech (bool): format for speech (True) or display (False) denominators (iter of ints): denominators to use, default [1 .. 20] Returns: (str): The formatted string. Routine nice_time_fr def nice_time_fr(dt, speech=True, use_24hour=False, use_ampm=False) Format a time to a comfortable human format For example, generate 'cinq heures trente' for speech or '5:30' for text display. Args: dt (datetime): date to format (assumes already in local timezone) speech (bool): format for speech (default/True) or display (False)=Fal use_24hour (bool): output in 24-hour/military or 12-hour format use_ampm (bool): include the am/pm for 12-hour format Returns: (str): The formatted time string Routine pronounce_number_fr def pronounce_number_fr(num, places=2) Convert a number to it's spoken equivalent For example, '5.2' would return 'cinq virgule deux' Args: num(float or int): the number to pronounce (under 100) places(int): maximum decimal places to speak Returns: (str): The pronounced number","title":"tnalagmes lang format_fr"},{"location":"tnalagmes.lang.format_fr/#module-tnalagmeslangformat_fr","text":"Format functions for french (fr)","title":"Module tnalagmes.lang.format_fr"},{"location":"tnalagmes.lang.format_fr/#routine-nice95number95fr","text":"def nice_number_fr(number, speech, denominators) French helper for nice_number This function formats a float to human understandable functions. Like 4.5 becomes \"4 et demi\" for speech and \"4 1/2\" for text Args: number (int or float): the float to format speech (bool): format for speech (True) or display (False) denominators (iter of ints): denominators to use, default [1 .. 20] Returns: (str): The formatted string.","title":"Routine nice_number_fr"},{"location":"tnalagmes.lang.format_fr/#routine-nice95time95fr","text":"def nice_time_fr(dt, speech=True, use_24hour=False, use_ampm=False) Format a time to a comfortable human format For example, generate 'cinq heures trente' for speech or '5:30' for text display. Args: dt (datetime): date to format (assumes already in local timezone) speech (bool): format for speech (default/True) or display (False)=Fal use_24hour (bool): output in 24-hour/military or 12-hour format use_ampm (bool): include the am/pm for 12-hour format Returns: (str): The formatted time string","title":"Routine nice_time_fr"},{"location":"tnalagmes.lang.format_fr/#routine-pronounce95number95fr","text":"def pronounce_number_fr(num, places=2) Convert a number to it's spoken equivalent For example, '5.2' would return 'cinq virgule deux' Args: num(float or int): the number to pronounce (under 100) places(int): maximum decimal places to speak Returns: (str): The pronounced number","title":"Routine pronounce_number_fr"},{"location":"tnalagmes.lang.format_it/","text":"Module tnalagmes.lang.format_it Routine nice_number_it def nice_number_it(number, speech, denominators) Italian helper for nice_number This function formats a float to human understandable functions. Like 4.5 becomes \"4 e un mezz\" for speech and \"4 1/2\" for text Args: number (int or float): the float to format speech (bool): format for speech (True) or display (False) denominators (iter of ints): denominators to use, default [1 .. 20] Returns: (str): The formatted string. Routine nice_time_it def nice_time_it(dt, speech=True, use_24hour=False, use_ampm=False) Format a time to a comfortable human format adapted to italian fron en version For example, generate 'cinque e trenta' for speech or '5:30' for text display. Args: dt (datetime): date to format (assumes already in local timezone) speech (bool): format for speech (default/True) or display (False)=Fal use_24hour (bool): output in 24-hour/military or 12-hour format use_ampm (bool): include the am/pm for 12-hour format Returns: (str): The formatted time string Routine pronounce_number_it def pronounce_number_it(num, places=2) Convert a number to it's spoken equivalent adapted to italian fron en version For example, '5.2' would return 'cinque virgola due' Args: num(float or int): the number to pronounce (under 100) places(int): maximum decimal places to speak Returns: (str): The pronounced number","title":"tnalagmes lang format_it"},{"location":"tnalagmes.lang.format_it/#module-tnalagmeslangformat_it","text":"","title":"Module tnalagmes.lang.format_it"},{"location":"tnalagmes.lang.format_it/#routine-nice95number95it","text":"def nice_number_it(number, speech, denominators) Italian helper for nice_number This function formats a float to human understandable functions. Like 4.5 becomes \"4 e un mezz\" for speech and \"4 1/2\" for text Args: number (int or float): the float to format speech (bool): format for speech (True) or display (False) denominators (iter of ints): denominators to use, default [1 .. 20] Returns: (str): The formatted string.","title":"Routine nice_number_it"},{"location":"tnalagmes.lang.format_it/#routine-nice95time95it","text":"def nice_time_it(dt, speech=True, use_24hour=False, use_ampm=False) Format a time to a comfortable human format adapted to italian fron en version For example, generate 'cinque e trenta' for speech or '5:30' for text display. Args: dt (datetime): date to format (assumes already in local timezone) speech (bool): format for speech (default/True) or display (False)=Fal use_24hour (bool): output in 24-hour/military or 12-hour format use_ampm (bool): include the am/pm for 12-hour format Returns: (str): The formatted time string","title":"Routine nice_time_it"},{"location":"tnalagmes.lang.format_it/#routine-pronounce95number95it","text":"def pronounce_number_it(num, places=2) Convert a number to it's spoken equivalent adapted to italian fron en version For example, '5.2' would return 'cinque virgola due' Args: num(float or int): the number to pronounce (under 100) places(int): maximum decimal places to speak Returns: (str): The pronounced number","title":"Routine pronounce_number_it"},{"location":"tnalagmes.lang.format_pt/","text":"Module tnalagmes.lang.format_pt Routine nice_number_pt def nice_number_pt(number, speech, denominators) Portuguese helper for nice_number This function formats a float to human understandable functions. Like 4.5 becomes \"4 e meio\" for speech and \"4 1/2\" for text Args: number (int or float): the float to format speech (bool): format for speech (True) or display (False) denominators (iter of ints): denominators to use, default [1 .. 20] Returns: (str): The formatted string.","title":"tnalagmes lang format_pt"},{"location":"tnalagmes.lang.format_pt/#module-tnalagmeslangformat_pt","text":"","title":"Module tnalagmes.lang.format_pt"},{"location":"tnalagmes.lang.format_pt/#routine-nice95number95pt","text":"def nice_number_pt(number, speech, denominators) Portuguese helper for nice_number This function formats a float to human understandable functions. Like 4.5 becomes \"4 e meio\" for speech and \"4 1/2\" for text Args: number (int or float): the float to format speech (bool): format for speech (True) or display (False) denominators (iter of ints): denominators to use, default [1 .. 20] Returns: (str): The formatted string.","title":"Routine nice_number_pt"},{"location":"tnalagmes.lang.format_sv/","text":"Module tnalagmes.lang.format_sv Routine nice_number_sv def nice_number_sv(number, speech, denominators) Swedish helper for nice_number This function formats a float to human understandable functions. Like 4.5 becomes \"4 och en halv\" for speech and \"4 1/2\" for text Args: number (int or float): the float to format speech (bool): format for speech (True) or display (False) denominators (iter of ints): denominators to use, default [1 .. 20] Returns: (str): The formatted string.","title":"tnalagmes lang format_sv"},{"location":"tnalagmes.lang.format_sv/#module-tnalagmeslangformat_sv","text":"","title":"Module tnalagmes.lang.format_sv"},{"location":"tnalagmes.lang.format_sv/#routine-nice95number95sv","text":"def nice_number_sv(number, speech, denominators) Swedish helper for nice_number This function formats a float to human understandable functions. Like 4.5 becomes \"4 och en halv\" for speech and \"4 1/2\" for text Args: number (int or float): the float to format speech (bool): format for speech (True) or display (False) denominators (iter of ints): denominators to use, default [1 .. 20] Returns: (str): The formatted string.","title":"Routine nice_number_sv"},{"location":"tnalagmes.lang.parse_common/","text":"Module tnalagmes.lang.parse_common Routine is_numeric def is_numeric(input_str) Takes in a string and tests to see if it is a number. Args: text (str): string to test if a number Returns: (bool): True if a number, else False Routine look_for_fractions def look_for_fractions(split_list) \" This function takes a list made by fraction & determines if a fraction. Args: split_list (list): list created by splitting on '/' Returns: (bool): False if not a fraction, otherwise True","title":"tnalagmes lang parse_common"},{"location":"tnalagmes.lang.parse_common/#module-tnalagmeslangparse_common","text":"","title":"Module tnalagmes.lang.parse_common"},{"location":"tnalagmes.lang.parse_common/#routine-is95numeric","text":"def is_numeric(input_str) Takes in a string and tests to see if it is a number. Args: text (str): string to test if a number Returns: (bool): True if a number, else False","title":"Routine is_numeric"},{"location":"tnalagmes.lang.parse_common/#routine-look95for95fractions","text":"def look_for_fractions(split_list) \" This function takes a list made by fraction & determines if a fraction. Args: split_list (list): list created by splitting on '/' Returns: (bool): False if not a fraction, otherwise True","title":"Routine look_for_fractions"},{"location":"tnalagmes.lang.parse_de/","text":"Module tnalagmes.lang.parse_de Routine extract_datetime_de def extract_datetime_de(string, currentDate) Routine extractnumber_de def extractnumber_de(text) This function prepares the given text for parsing by making numbers consistent, getting rid of contractions, etc. Args: text (str): the string to normalize Returns: (int) or (float): The value of extracted number undefined articles cannot be suppressed in German: 'ein Pferd' means 'one horse' and 'a horse' Routine isFractional_de def isFractional_de(input_str) This function takes the given text and checks if it is a fraction. Args: input_str (str): the string to check if fractional Returns: (bool) or (float): False if not a fraction, otherwise the fraction Routine isOrdinal_de def isOrdinal_de(input_str) This function takes the given text and checks if it is an ordinal number. Args: input_str (str): the string to check if ordinal Returns: (bool) or (float): False if not an ordinal, otherwise the number corresponding to the ordinal ordinals for 1, 3, 7 and 8 are irregular only works for ordinals corresponding to the numbers in de_numbers Routine normalize_de def normalize_de(text, remove_articles) German string normalization","title":"tnalagmes lang parse_de"},{"location":"tnalagmes.lang.parse_de/#module-tnalagmeslangparse_de","text":"","title":"Module tnalagmes.lang.parse_de"},{"location":"tnalagmes.lang.parse_de/#routine-extract95datetime95de","text":"def extract_datetime_de(string, currentDate)","title":"Routine extract_datetime_de"},{"location":"tnalagmes.lang.parse_de/#routine-extractnumber95de","text":"def extractnumber_de(text) This function prepares the given text for parsing by making numbers consistent, getting rid of contractions, etc. Args: text (str): the string to normalize Returns: (int) or (float): The value of extracted number undefined articles cannot be suppressed in German: 'ein Pferd' means 'one horse' and 'a horse'","title":"Routine extractnumber_de"},{"location":"tnalagmes.lang.parse_de/#routine-isfractional95de","text":"def isFractional_de(input_str) This function takes the given text and checks if it is a fraction. Args: input_str (str): the string to check if fractional Returns: (bool) or (float): False if not a fraction, otherwise the fraction","title":"Routine isFractional_de"},{"location":"tnalagmes.lang.parse_de/#routine-isordinal95de","text":"def isOrdinal_de(input_str) This function takes the given text and checks if it is an ordinal number. Args: input_str (str): the string to check if ordinal Returns: (bool) or (float): False if not an ordinal, otherwise the number corresponding to the ordinal ordinals for 1, 3, 7 and 8 are irregular only works for ordinals corresponding to the numbers in de_numbers","title":"Routine isOrdinal_de"},{"location":"tnalagmes.lang.parse_de/#routine-normalize95de","text":"def normalize_de(text, remove_articles) German string normalization","title":"Routine normalize_de"},{"location":"tnalagmes.lang.parse_en/","text":"Module tnalagmes.lang.parse_en Routine extract_datetime_en def extract_datetime_en(string, currentDate) Convert a human date reference into an exact datetime Convert things like \"today\" \"tomorrow afternoon\" \"next Tuesday at 4pm\" \"August 3rd\" into a datetime. If a reference date is not provided, the current local time is used. Also consumes the words used to define the date returning the remaining string. For example, the string \"what is Tuesday's weather forecast\" returns the date for the forthcoming Tuesday relative to the reference date and the remainder string \"what is weather forecast\". Args: string (str): string containing date words currentDate (datetime): A reference date/time for \"tommorrow\", etc Returns: [datetime, str]: An array containing the datetime and the remaining text not consumed in the parsing. Routine extract_number_en def extract_number_en(text, short_scale=True, ordinals=False) This function extracts a number from a text string, handles pronunciations in long scale and short scale https://en.wikipedia.org/wiki/Names_of_large_numbers Args: text (str): the string to normalize short_scale (bool): use short scale if True, long scale if False ordinals (bool): consider ordinal numbers, third=3 instead of 1/3 Returns: (int) or (float) or False: The extracted number or False if no number was found Routine is_fractional_en def is_fractional_en(input_str, short_scale=True) This function takes the given text and checks if it is a fraction. Args: input_str (str): the string to check if fractional short_scale (bool): use short scale if True, long scale if False Returns: (bool) or (float): False if not a fraction, otherwise the fraction Routine normalize_en def normalize_en(text, remove_articles) English string normalization","title":"tnalagmes lang parse_en"},{"location":"tnalagmes.lang.parse_en/#module-tnalagmeslangparse_en","text":"","title":"Module tnalagmes.lang.parse_en"},{"location":"tnalagmes.lang.parse_en/#routine-extract95datetime95en","text":"def extract_datetime_en(string, currentDate) Convert a human date reference into an exact datetime Convert things like \"today\" \"tomorrow afternoon\" \"next Tuesday at 4pm\" \"August 3rd\" into a datetime. If a reference date is not provided, the current local time is used. Also consumes the words used to define the date returning the remaining string. For example, the string \"what is Tuesday's weather forecast\" returns the date for the forthcoming Tuesday relative to the reference date and the remainder string \"what is weather forecast\". Args: string (str): string containing date words currentDate (datetime): A reference date/time for \"tommorrow\", etc Returns: [datetime, str]: An array containing the datetime and the remaining text not consumed in the parsing.","title":"Routine extract_datetime_en"},{"location":"tnalagmes.lang.parse_en/#routine-extract95number95en","text":"def extract_number_en(text, short_scale=True, ordinals=False) This function extracts a number from a text string, handles pronunciations in long scale and short scale https://en.wikipedia.org/wiki/Names_of_large_numbers Args: text (str): the string to normalize short_scale (bool): use short scale if True, long scale if False ordinals (bool): consider ordinal numbers, third=3 instead of 1/3 Returns: (int) or (float) or False: The extracted number or False if no number was found","title":"Routine extract_number_en"},{"location":"tnalagmes.lang.parse_en/#routine-is95fractional95en","text":"def is_fractional_en(input_str, short_scale=True) This function takes the given text and checks if it is a fraction. Args: input_str (str): the string to check if fractional short_scale (bool): use short scale if True, long scale if False Returns: (bool) or (float): False if not a fraction, otherwise the fraction","title":"Routine is_fractional_en"},{"location":"tnalagmes.lang.parse_en/#routine-normalize95en","text":"def normalize_en(text, remove_articles) English string normalization","title":"Routine normalize_en"},{"location":"tnalagmes.lang.parse_es/","text":"Module tnalagmes.lang.parse_es Parse functions for spanish (es) TODO: numbers greater than 999999 Routine es_parse def es_parse(words, i) Routine normalize_es def normalize_es(text, remove_articles) Spanish string normalization","title":"tnalagmes lang parse_es"},{"location":"tnalagmes.lang.parse_es/#module-tnalagmeslangparse_es","text":"Parse functions for spanish (es) TODO: numbers greater than 999999","title":"Module tnalagmes.lang.parse_es"},{"location":"tnalagmes.lang.parse_es/#routine-es95parse","text":"def es_parse(words, i)","title":"Routine es_parse"},{"location":"tnalagmes.lang.parse_es/#routine-normalize95es","text":"def normalize_es(text, remove_articles) Spanish string normalization","title":"Routine normalize_es"},{"location":"tnalagmes.lang.parse_fr/","text":"Module tnalagmes.lang.parse_fr Parse functions for french (fr) Todo: * extractnumber_fr: ordinal numbers (\"cinqui\u00e8me\") * extractnumber_fr: numbers greater than 999 999 (\"cinq millions\") * extract_datetime_fr: \"quatri\u00e8me lundi de janvier\" * get_gender_fr Routine extract_datetime_fr def extract_datetime_fr(string, currentDate) Routine extractnumber_fr def extractnumber_fr(text) Takes in a string and extracts a number. Args: text (str): the string to extract a number from Returns: (str): The number extracted or the original text. Routine getOrdinal_fr def getOrdinal_fr(word) Get the ordinal number Takes in a word (string without whitespace) and extracts the ordinal number. Args: word (string): the word to extract the number from Returns: number (int) Returns None if no ordinal number was found. Routine isFractional_fr def isFractional_fr(input_str) This function takes the given text and checks if it is a fraction. Args: input_str (str): the string to check if fractional Returns: (bool) or (float): False if not a fraction, otherwise the fraction Routine normalize_fr def normalize_fr(text, remove_articles) French string normalization Routine number_ordinal_fr def number_ordinal_fr(words, i) Find an ordinal number in a list of words Takes in a list of words (strings without whitespace) and extracts an ordinal number that starts at the given index. Args: words (array): the list to extract a number from i (int): the index in words where to look for the ordinal number Returns: tuple with ordinal number (str), index of next word after the number (int). Returns None if no ordinal number was found. Routine number_parse_fr def number_parse_fr(words, i) Parses a list of words to find a number Takes in a list of words (strings without whitespace) and extracts a number that starts at the given index. Args: words (array): the list to extract a number from i (int): the index in words where to look for the number Returns: tuple with number, index of next word after the number. Returns None if no number was found.","title":"tnalagmes lang parse_fr"},{"location":"tnalagmes.lang.parse_fr/#module-tnalagmeslangparse_fr","text":"Parse functions for french (fr) Todo: * extractnumber_fr: ordinal numbers (\"cinqui\u00e8me\") * extractnumber_fr: numbers greater than 999 999 (\"cinq millions\") * extract_datetime_fr: \"quatri\u00e8me lundi de janvier\" * get_gender_fr","title":"Module tnalagmes.lang.parse_fr"},{"location":"tnalagmes.lang.parse_fr/#routine-extract95datetime95fr","text":"def extract_datetime_fr(string, currentDate)","title":"Routine extract_datetime_fr"},{"location":"tnalagmes.lang.parse_fr/#routine-extractnumber95fr","text":"def extractnumber_fr(text) Takes in a string and extracts a number. Args: text (str): the string to extract a number from Returns: (str): The number extracted or the original text.","title":"Routine extractnumber_fr"},{"location":"tnalagmes.lang.parse_fr/#routine-getordinal95fr","text":"def getOrdinal_fr(word) Get the ordinal number Takes in a word (string without whitespace) and extracts the ordinal number. Args: word (string): the word to extract the number from Returns: number (int) Returns None if no ordinal number was found.","title":"Routine getOrdinal_fr"},{"location":"tnalagmes.lang.parse_fr/#routine-isfractional95fr","text":"def isFractional_fr(input_str) This function takes the given text and checks if it is a fraction. Args: input_str (str): the string to check if fractional Returns: (bool) or (float): False if not a fraction, otherwise the fraction","title":"Routine isFractional_fr"},{"location":"tnalagmes.lang.parse_fr/#routine-normalize95fr","text":"def normalize_fr(text, remove_articles) French string normalization","title":"Routine normalize_fr"},{"location":"tnalagmes.lang.parse_fr/#routine-number95ordinal95fr","text":"def number_ordinal_fr(words, i) Find an ordinal number in a list of words Takes in a list of words (strings without whitespace) and extracts an ordinal number that starts at the given index. Args: words (array): the list to extract a number from i (int): the index in words where to look for the ordinal number Returns: tuple with ordinal number (str), index of next word after the number (int). Returns None if no ordinal number was found.","title":"Routine number_ordinal_fr"},{"location":"tnalagmes.lang.parse_fr/#routine-number95parse95fr","text":"def number_parse_fr(words, i) Parses a list of words to find a number Takes in a list of words (strings without whitespace) and extracts a number that starts at the given index. Args: words (array): the list to extract a number from i (int): the index in words where to look for the number Returns: tuple with number, index of next word after the number. Returns None if no number was found.","title":"Routine number_parse_fr"},{"location":"tnalagmes.lang.parse_it/","text":"Module tnalagmes.lang.parse_it Parse functions for Italian (IT-IT) TODO: numbers greater than 999999 TODO: it_number_parse TODO: it_pruning Routine extract_datetime_it def extract_datetime_it(string, currentDate) Routine extractnumber_it def extractnumber_it(text) Questa funzione prepara il testo dato per l'analisi rendendo numeri testuali come interi o frazioni. In italiano non \u00e8 un modo abituale ma pu\u00f2 essere interessante per Mycroft E' la versione portoghese riadattata in italiano args: text (str): la stringa da normalizzare Ritorna: (int) o (float): il valore del numero estratto Routine extractnumber_long_it def extractnumber_long_it(word) Questa funzione converte un numero testuale lungo es. ventisette -> 27 quarantuno -> 41 nell'equivalente valore intero args: text (str): la stringa da normalizzare Ritorna: (int) : il valore del numero estratto usando tutta la parola Falso : se la parola non \u00e8 un numero es.\"qualcuno\" Routine get_gender_it def get_gender_it(word, raw_string='') Questa potrebbe non essere utile. In italiano per definire il genere \u00e8 necessario analizzare l'articolo che la precede e non la lettera con cui finisce la parola, ma sono presenti funzioni per la rimozione degli articoli dalla frase per semplificarne l'analisi TODO: verificare se utile Routine isFractional_it def isFractional_it(input_str) This function takes the given text and checks if it is a fraction. E' la versione portoghese riadattata in italiano Args: text (str): the string to check if fractional Returns: (bool) or (float): False if not a fraction, otherwise the fraction TODO: verificare la corretta gestione dei plurali Routine normalize_it def normalize_it(text, remove_articles) IT string normalization","title":"tnalagmes lang parse_it"},{"location":"tnalagmes.lang.parse_it/#module-tnalagmeslangparse_it","text":"Parse functions for Italian (IT-IT) TODO: numbers greater than 999999 TODO: it_number_parse TODO: it_pruning","title":"Module tnalagmes.lang.parse_it"},{"location":"tnalagmes.lang.parse_it/#routine-extract95datetime95it","text":"def extract_datetime_it(string, currentDate)","title":"Routine extract_datetime_it"},{"location":"tnalagmes.lang.parse_it/#routine-extractnumber95it","text":"def extractnumber_it(text) Questa funzione prepara il testo dato per l'analisi rendendo numeri testuali come interi o frazioni. In italiano non \u00e8 un modo abituale ma pu\u00f2 essere interessante per Mycroft E' la versione portoghese riadattata in italiano args: text (str): la stringa da normalizzare Ritorna: (int) o (float): il valore del numero estratto","title":"Routine extractnumber_it"},{"location":"tnalagmes.lang.parse_it/#routine-extractnumber95long95it","text":"def extractnumber_long_it(word) Questa funzione converte un numero testuale lungo es. ventisette -> 27 quarantuno -> 41 nell'equivalente valore intero args: text (str): la stringa da normalizzare Ritorna: (int) : il valore del numero estratto usando tutta la parola Falso : se la parola non \u00e8 un numero es.\"qualcuno\"","title":"Routine extractnumber_long_it"},{"location":"tnalagmes.lang.parse_it/#routine-get95gender95it","text":"def get_gender_it(word, raw_string='') Questa potrebbe non essere utile. In italiano per definire il genere \u00e8 necessario analizzare l'articolo che la precede e non la lettera con cui finisce la parola, ma sono presenti funzioni per la rimozione degli articoli dalla frase per semplificarne l'analisi TODO: verificare se utile","title":"Routine get_gender_it"},{"location":"tnalagmes.lang.parse_it/#routine-isfractional95it","text":"def isFractional_it(input_str) This function takes the given text and checks if it is a fraction. E' la versione portoghese riadattata in italiano Args: text (str): the string to check if fractional Returns: (bool) or (float): False if not a fraction, otherwise the fraction TODO: verificare la corretta gestione dei plurali","title":"Routine isFractional_it"},{"location":"tnalagmes.lang.parse_it/#routine-normalize95it","text":"def normalize_it(text, remove_articles) IT string normalization","title":"Routine normalize_it"},{"location":"tnalagmes.lang.parse_pt/","text":"Module tnalagmes.lang.parse_pt Parse functions for Portuguese (PT-PT) TODO: numbers greater than 999999 TODO: date time pt Routine extract_datetime_pt def extract_datetime_pt(input_str, currentDate) Routine extractnumber_pt def extractnumber_pt(text) This function prepares the given text for parsing by making numbers consistent, getting rid of contractions, etc. Args: text (str): the string to normalize Returns: (int) or (float): The value of extracted number Routine get_gender_pt def get_gender_pt(word, raw_string='') Routine isFractional_pt def isFractional_pt(input_str) This function takes the given text and checks if it is a fraction. Args: text (str): the string to check if fractional Returns: (bool) or (float): False if not a fraction, otherwise the fraction Routine normalize_pt def normalize_pt(text, remove_articles) PT string normalization Routine pt_number_parse def pt_number_parse(words, i) Routine pt_pruning def pt_pruning(text, symbols=True, accents=True, agressive=True)","title":"tnalagmes lang parse_pt"},{"location":"tnalagmes.lang.parse_pt/#module-tnalagmeslangparse_pt","text":"Parse functions for Portuguese (PT-PT) TODO: numbers greater than 999999 TODO: date time pt","title":"Module tnalagmes.lang.parse_pt"},{"location":"tnalagmes.lang.parse_pt/#routine-extract95datetime95pt","text":"def extract_datetime_pt(input_str, currentDate)","title":"Routine extract_datetime_pt"},{"location":"tnalagmes.lang.parse_pt/#routine-extractnumber95pt","text":"def extractnumber_pt(text) This function prepares the given text for parsing by making numbers consistent, getting rid of contractions, etc. Args: text (str): the string to normalize Returns: (int) or (float): The value of extracted number","title":"Routine extractnumber_pt"},{"location":"tnalagmes.lang.parse_pt/#routine-get95gender95pt","text":"def get_gender_pt(word, raw_string='')","title":"Routine get_gender_pt"},{"location":"tnalagmes.lang.parse_pt/#routine-isfractional95pt","text":"def isFractional_pt(input_str) This function takes the given text and checks if it is a fraction. Args: text (str): the string to check if fractional Returns: (bool) or (float): False if not a fraction, otherwise the fraction","title":"Routine isFractional_pt"},{"location":"tnalagmes.lang.parse_pt/#routine-normalize95pt","text":"def normalize_pt(text, remove_articles) PT string normalization","title":"Routine normalize_pt"},{"location":"tnalagmes.lang.parse_pt/#routine-pt95number95parse","text":"def pt_number_parse(words, i)","title":"Routine pt_number_parse"},{"location":"tnalagmes.lang.parse_pt/#routine-pt95pruning","text":"def pt_pruning(text, symbols=True, accents=True, agressive=True)","title":"Routine pt_pruning"},{"location":"tnalagmes.lang.parse_sv/","text":"Module tnalagmes.lang.parse_sv Routine extract_datetime_sv def extract_datetime_sv(string, currentDate) Routine extractnumber_sv def extractnumber_sv(text) This function prepares the given text for parsing by making numbers consistent, getting rid of contractions, etc. Args: text (str): the string to normalize Returns: (int) or (float): The value of extracted number Routine is_fractional_sv def is_fractional_sv(input_str) This function takes the given text and checks if it is a fraction. Args: input_str (str): the string to check if fractional Returns: (bool) or (float): False if not a fraction, otherwise the fraction Routine normalize_sv def normalize_sv(text, remove_articles) English string normalization","title":"tnalagmes lang parse_sv"},{"location":"tnalagmes.lang.parse_sv/#module-tnalagmeslangparse_sv","text":"","title":"Module tnalagmes.lang.parse_sv"},{"location":"tnalagmes.lang.parse_sv/#routine-extract95datetime95sv","text":"def extract_datetime_sv(string, currentDate)","title":"Routine extract_datetime_sv"},{"location":"tnalagmes.lang.parse_sv/#routine-extractnumber95sv","text":"def extractnumber_sv(text) This function prepares the given text for parsing by making numbers consistent, getting rid of contractions, etc. Args: text (str): the string to normalize Returns: (int) or (float): The value of extracted number","title":"Routine extractnumber_sv"},{"location":"tnalagmes.lang.parse_sv/#routine-is95fractional95sv","text":"def is_fractional_sv(input_str) This function takes the given text and checks if it is a fraction. Args: input_str (str): the string to check if fractional Returns: (bool) or (float): False if not a fraction, otherwise the fraction","title":"Routine is_fractional_sv"},{"location":"tnalagmes.lang.parse_sv/#routine-normalize95sv","text":"def normalize_sv(text, remove_articles) English string normalization","title":"Routine normalize_sv"},{"location":"tnalagmes.lang.phonemes_en/","text":"Module tnalagmes.lang.phonemes_en Routine get_phonemes_en def get_phonemes_en(name) Routine guess_phonemes_en def guess_phonemes_en(word)","title":"tnalagmes lang phonemes_en"},{"location":"tnalagmes.lang.phonemes_en/#module-tnalagmeslangphonemes_en","text":"","title":"Module tnalagmes.lang.phonemes_en"},{"location":"tnalagmes.lang.phonemes_en/#routine-get95phonemes95en","text":"def get_phonemes_en(name)","title":"Routine get_phonemes_en"},{"location":"tnalagmes.lang.phonemes_en/#routine-guess95phonemes95en","text":"def guess_phonemes_en(word)","title":"Routine guess_phonemes_en"},{"location":"tnalagmes.lang.translate/","text":"Module tnalagmes.lang.translate Routine say_in_language def say_in_language(sentence, lang='en-us', wav_file='~/tnalagmes/translated') Routine translate_text def translate_text(text, lang='en-us')","title":"tnalagmes lang translate"},{"location":"tnalagmes.lang.translate/#module-tnalagmeslangtranslate","text":"","title":"Module tnalagmes.lang.translate"},{"location":"tnalagmes.lang.translate/#routine-say95in95language","text":"def say_in_language(sentence, lang='en-us', wav_file='~/tnalagmes/translated')","title":"Routine say_in_language"},{"location":"tnalagmes.lang.translate/#routine-translate95text","text":"def translate_text(text, lang='en-us')","title":"Routine translate_text"},{"location":"tnalagmes.models.agents/","text":"Module tnalagmes.models.agents Class Agent None Class ChatAgent None Class NPC hello world what is your name attack take damage heal spend mana cast spell","title":"tnalagmes models agents"},{"location":"tnalagmes.models.agents/#module-tnalagmesmodelsagents","text":"","title":"Module tnalagmes.models.agents"},{"location":"tnalagmes.models.agents/#class-agent","text":"None","title":"Class Agent"},{"location":"tnalagmes.models.agents/#class-chatagent","text":"None","title":"Class ChatAgent"},{"location":"tnalagmes.models.agents/#class-npc","text":"hello world what is your name attack take damage heal spend mana cast spell","title":"Class NPC"},{"location":"tnalagmes.models.battle/","text":"Module tnalagmes.models.battle Class Ability what is your _name what is your cost what is your damage what are you generate some damage","title":"tnalagmes models battle"},{"location":"tnalagmes.models.battle/#module-tnalagmesmodelsbattle","text":"","title":"Module tnalagmes.models.battle"},{"location":"tnalagmes.models.battle/#class-ability","text":"what is your _name what is your cost what is your damage what are you generate some damage","title":"Class Ability"},{"location":"tnalagmes.models.objects/","text":"Module tnalagmes.models.objects Class Calendar Calendar Object \"What day/date/week/weekday/month/year is it?\" \"next turn\" \"how many turns left\" \"how many turns passed\" \"how many days per turn\" \"maximum number of turns\" \"increase speed\" \"decrease speed\" \"rollback X days/months/weeks/years\" \"advance X days/months/weeks/years\" Class Inventory what do you have how much money do you have how much are you worth Class InventoryItem what are you what can you do how much are you worth Class ProgressTracker \"total distance\" \"current mileage\" \"add mileage\" \"subtract mileage\" \"are you completed?\" \"current difficulty","title":"tnalagmes models objects"},{"location":"tnalagmes.models.objects/#module-tnalagmesmodelsobjects","text":"","title":"Module tnalagmes.models.objects"},{"location":"tnalagmes.models.objects/#class-calendar","text":"Calendar Object \"What day/date/week/weekday/month/year is it?\" \"next turn\" \"how many turns left\" \"how many turns passed\" \"how many days per turn\" \"maximum number of turns\" \"increase speed\" \"decrease speed\" \"rollback X days/months/weeks/years\" \"advance X days/months/weeks/years\"","title":"Class Calendar"},{"location":"tnalagmes.models.objects/#class-inventory","text":"what do you have how much money do you have how much are you worth","title":"Class Inventory"},{"location":"tnalagmes.models.objects/#class-inventoryitem","text":"what are you what can you do how much are you worth","title":"Class InventoryItem"},{"location":"tnalagmes.models.objects/#class-progresstracker","text":"\"total distance\" \"current mileage\" \"add mileage\" \"subtract mileage\" \"are you completed?\" \"current difficulty","title":"Class ProgressTracker"},{"location":"tnalagmes.models.world/","text":"Module tnalagmes.models.world Class PhysicsEngine None Class Scene None Class World None","title":"tnalagmes models world"},{"location":"tnalagmes.models.world/#module-tnalagmesmodelsworld","text":"","title":"Module tnalagmes.models.world"},{"location":"tnalagmes.models.world/#class-physicsengine","text":"None","title":"Class PhysicsEngine"},{"location":"tnalagmes.models.world/#class-scene","text":"None","title":"Class Scene"},{"location":"tnalagmes.models.world/#class-world","text":"None","title":"Class World"},{"location":"tnalagmes.util.log/","text":"Module tnalagmes.util.log Class LOG Custom logger class that acts like logging.Logger The logger name is automatically generated by the module of the caller Usage: >>> LOG.debug('My message: %s', debug_str) 13:12:43.673 - : :1 - DEBUG - My message: hi >>> LOG('custom_name').debug('Another message') 13:13:10.462 - custom_name - DEBUG - Another message Method create_logger def create_logger(name) Method debug def debug(*args, **kwargs) Log 'msg % args' with severity 'DEBUG'. To pass exception information, use the keyword argument exc_info with a true value, e.g. logger.debug(\"Houston, we have a %s\", \"thorny problem\", exc_info=1) Method error def error(*args, **kwargs) Log 'msg % args' with severity 'ERROR'. To pass exception information, use the keyword argument exc_info with a true value, e.g. logger.error(\"Houston, we have a %s\", \"major problem\", exc_info=1) Method exception def exception(*args, **kwargs) Convenience method for logging an ERROR with exception information. Method info def info(*args, **kwargs) Log 'msg % args' with severity 'INFO'. To pass exception information, use the keyword argument exc_info with a true value, e.g. logger.info(\"Houston, we have a %s\", \"interesting problem\", exc_info=1) Method init def init() Method warning def warning(*args, **kwargs) Log 'msg % args' with severity 'WARNING'. To pass exception information, use the keyword argument exc_info with a true value, e.g. logger.warning(\"Houston, we have a %s\", \"bit of a problem\", exc_info=1)","title":"tnalagmes util log"},{"location":"tnalagmes.util.log/#module-tnalagmesutillog","text":"","title":"Module tnalagmes.util.log"},{"location":"tnalagmes.util.log/#class-log","text":"Custom logger class that acts like logging.Logger The logger name is automatically generated by the module of the caller Usage: >>> LOG.debug('My message: %s', debug_str) 13:12:43.673 - : :1 - DEBUG - My message: hi >>> LOG('custom_name').debug('Another message') 13:13:10.462 - custom_name - DEBUG - Another message","title":"Class LOG"},{"location":"tnalagmes.util.log/#method-create95logger","text":"def create_logger(name)","title":"Method create_logger"},{"location":"tnalagmes.util.log/#method-debug","text":"def debug(*args, **kwargs) Log 'msg % args' with severity 'DEBUG'. To pass exception information, use the keyword argument exc_info with a true value, e.g. logger.debug(\"Houston, we have a %s\", \"thorny problem\", exc_info=1)","title":"Method debug"},{"location":"tnalagmes.util.log/#method-error","text":"def error(*args, **kwargs) Log 'msg % args' with severity 'ERROR'. To pass exception information, use the keyword argument exc_info with a true value, e.g. logger.error(\"Houston, we have a %s\", \"major problem\", exc_info=1)","title":"Method error"},{"location":"tnalagmes.util.log/#method-exception","text":"def exception(*args, **kwargs) Convenience method for logging an ERROR with exception information.","title":"Method exception"},{"location":"tnalagmes.util.log/#method-info","text":"def info(*args, **kwargs) Log 'msg % args' with severity 'INFO'. To pass exception information, use the keyword argument exc_info with a true value, e.g. logger.info(\"Houston, we have a %s\", \"interesting problem\", exc_info=1)","title":"Method info"},{"location":"tnalagmes.util.log/#method-init","text":"def init()","title":"Method init"},{"location":"tnalagmes.util.log/#method-warning","text":"def warning(*args, **kwargs) Log 'msg % args' with severity 'WARNING'. To pass exception information, use the keyword argument exc_info with a true value, e.g. logger.warning(\"Houston, we have a %s\", \"bit of a problem\", exc_info=1)","title":"Method warning"},{"location":"tnalagmes.util.nlp/","text":"Module tnalagmes.util.nlp Routine NER def NER(text) Routine replace_coreferences def replace_coreferences(text) Routine textual_entailment def textual_entailment(premise, hypothesis) Textual Entailment (TE) takes a pair of sentences and predicts whether the facts in the first necessarily imply the facts in the second one. The AllenNLP toolkit provides the following TE visualization, which can be run for any TE model you develop. This page demonstrates a reimplementation of the decomposable attention model (Parikh et al, 2017) , which was state of the art for the SNLI benchmark (short sentences about visual scenes) in 2016. Rather than pre-trained Glove vectors, this model uses ELMo embeddings, which are completely character based and improve performance by 2% :param premise: :param hypotheses: :return:","title":"tnalagmes util nlp"},{"location":"tnalagmes.util.nlp/#module-tnalagmesutilnlp","text":"","title":"Module tnalagmes.util.nlp"},{"location":"tnalagmes.util.nlp/#routine-ner","text":"def NER(text)","title":"Routine NER"},{"location":"tnalagmes.util.nlp/#routine-replace95coreferences","text":"def replace_coreferences(text)","title":"Routine replace_coreferences"},{"location":"tnalagmes.util.nlp/#routine-textual95entailment","text":"def textual_entailment(premise, hypothesis) Textual Entailment (TE) takes a pair of sentences and predicts whether the facts in the first necessarily imply the facts in the second one. The AllenNLP toolkit provides the following TE visualization, which can be run for any TE model you develop. This page demonstrates a reimplementation of the decomposable attention model (Parikh et al, 2017) , which was state of the art for the SNLI benchmark (short sentences about visual scenes) in 2016. Rather than pre-trained Glove vectors, this model uses ELMo embeddings, which are completely character based and improve performance by 2% :param premise: :param hypotheses: :return:","title":"Routine textual_entailment"},{"location":"tnalagmes.util.phonemes/","text":"Module tnalagmes.util.phonemes Routine get_phonemes def get_phonemes(name, lang='en-us') Routine guess_phonemes def guess_phonemes(word, lang='en-us') NOTES: guessing phonemes rule-based","title":"tnalagmes util phonemes"},{"location":"tnalagmes.util.phonemes/#module-tnalagmesutilphonemes","text":"","title":"Module tnalagmes.util.phonemes"},{"location":"tnalagmes.util.phonemes/#routine-get95phonemes","text":"def get_phonemes(name, lang='en-us')","title":"Routine get_phonemes"},{"location":"tnalagmes.util.phonemes/#routine-guess95phonemes","text":"def guess_phonemes(word, lang='en-us') NOTES: guessing phonemes rule-based","title":"Routine guess_phonemes"},{"location":"tnalagmes.util.signal/","text":"Module tnalagmes.util.signal Routine check_for_signal def check_for_signal(signal_name, sec_lifetime=0) See if a named signal exists Args: signal_name (str): The signal's name. Must only contain characters valid in filenames. sec_lifetime (int, optional): How many seconds the signal should remain valid. If 0 or not specified, it is a single-use signal. If -1, it never expires. Returns: bool: True if the signal is defined, False otherwise Routine create_file def create_file(filename) Create the file filename and create any directories needed Args: filename: Path to the file to be created Routine create_signal def create_signal(signal_name) Create a named signal Args: signal_name (str): The signal's name. Must only contain characters valid in filenames. Routine ensure_directory_exists def ensure_directory_exists(directory, domain=None) Create a directory and give access rights to all Args: domain (str): The IPC domain. Basically a subdirectory to prevent overlapping signal filenames. Returns: str: a path to the directory Routine get_ipc_directory def get_ipc_directory(domain=None, dir=None) Get the directory used for Inter Process Communication Files in this folder can be accessed by different processes on the machine. Useful for communication. This is often a small RAM disk. Args: domain (str): The IPC domain. Basically a subdirectory to prevent overlapping signal filenames. Returns: str: a path to the IPC directory","title":"tnalagmes util signal"},{"location":"tnalagmes.util.signal/#module-tnalagmesutilsignal","text":"","title":"Module tnalagmes.util.signal"},{"location":"tnalagmes.util.signal/#routine-check95for95signal","text":"def check_for_signal(signal_name, sec_lifetime=0) See if a named signal exists Args: signal_name (str): The signal's name. Must only contain characters valid in filenames. sec_lifetime (int, optional): How many seconds the signal should remain valid. If 0 or not specified, it is a single-use signal. If -1, it never expires. Returns: bool: True if the signal is defined, False otherwise","title":"Routine check_for_signal"},{"location":"tnalagmes.util.signal/#routine-create95file","text":"def create_file(filename) Create the file filename and create any directories needed Args: filename: Path to the file to be created","title":"Routine create_file"},{"location":"tnalagmes.util.signal/#routine-create95signal","text":"def create_signal(signal_name) Create a named signal Args: signal_name (str): The signal's name. Must only contain characters valid in filenames.","title":"Routine create_signal"},{"location":"tnalagmes.util.signal/#routine-ensure95directory95exists","text":"def ensure_directory_exists(directory, domain=None) Create a directory and give access rights to all Args: domain (str): The IPC domain. Basically a subdirectory to prevent overlapping signal filenames. Returns: str: a path to the directory","title":"Routine ensure_directory_exists"},{"location":"tnalagmes.util.signal/#routine-get95ipc95directory","text":"def get_ipc_directory(domain=None, dir=None) Get the directory used for Inter Process Communication Files in this folder can be accessed by different processes on the machine. Useful for communication. This is often a small RAM disk. Args: domain (str): The IPC domain. Basically a subdirectory to prevent overlapping signal filenames. Returns: str: a path to the IPC directory","title":"Routine get_ipc_directory"},{"location":"tnalagmes.util.time/","text":"Module tnalagmes.util.time Routine default_timezone def default_timezone() Get the default timezone Returns: (datetime.tzinfo): Definition of the default timezone Routine get_timedelta def get_timedelta(dt, anchor=None) Get a datetime object or a int() Epoch timestamp and return a timedelta Routine now_local def now_local(tz=None) Retrieve the current time Args: tz (datetime.tzinfo, optional): Timezone, default to user's settings Returns: (datetime): The current time Routine now_utc def now_utc() Retrieve the current time in UTC Returns: (datetime): The current time in Universal Time, aka GMT Routine to_local def to_local(dt) Convert a datetime to the user's local timezone Args: dt (datetime): A datetime (if no timezone, defaults to UTC) Returns: (datetime): time converted to the local timezone Routine to_utc def to_utc(dt) Convert a datetime with timezone info to a UTC datetime Args: dt (datetime): A datetime (presumably in some local zone) Returns: (datetime): time converted to UTC","title":"tnalagmes util time"},{"location":"tnalagmes.util.time/#module-tnalagmesutiltime","text":"","title":"Module tnalagmes.util.time"},{"location":"tnalagmes.util.time/#routine-default95timezone","text":"def default_timezone() Get the default timezone Returns: (datetime.tzinfo): Definition of the default timezone","title":"Routine default_timezone"},{"location":"tnalagmes.util.time/#routine-get95timedelta","text":"def get_timedelta(dt, anchor=None) Get a datetime object or a int() Epoch timestamp and return a timedelta","title":"Routine get_timedelta"},{"location":"tnalagmes.util.time/#routine-now95local","text":"def now_local(tz=None) Retrieve the current time Args: tz (datetime.tzinfo, optional): Timezone, default to user's settings Returns: (datetime): The current time","title":"Routine now_local"},{"location":"tnalagmes.util.time/#routine-now95utc","text":"def now_utc() Retrieve the current time in UTC Returns: (datetime): The current time in Universal Time, aka GMT","title":"Routine now_utc"},{"location":"tnalagmes.util.time/#routine-to95local","text":"def to_local(dt) Convert a datetime to the user's local timezone Args: dt (datetime): A datetime (if no timezone, defaults to UTC) Returns: (datetime): time converted to the local timezone","title":"Routine to_local"},{"location":"tnalagmes.util.time/#routine-to95utc","text":"def to_utc(dt) Convert a datetime with timezone info to a UTC datetime Args: dt (datetime): A datetime (presumably in some local zone) Returns: (datetime): time converted to UTC","title":"Routine to_utc"}]}